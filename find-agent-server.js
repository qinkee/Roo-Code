#!/usr/bin/env node

/**
 * Êô∫ËÉΩ‰ΩìÊúçÂä°Âô®ËØäÊñ≠ËÑöÊú¨
 * Êâ´ÊèèÂ∏∏Áî®Á´ØÂè£ÔºåÊâæÂà∞Ê≠£Âú®ËøêË°åÁöÑÊô∫ËÉΩ‰ΩìÊúçÂä°Âô®
 */

const http = require('http');

// Â∏∏Áî®ÁöÑA2AÊúçÂä°Âô®Á´ØÂè£ËåÉÂõ¥
const COMMON_PORTS = [
    3000, 3001, 3002, 3003, 3004, 3005,
    3673, 3842, 3843, 3844, 3845,
    8000, 8001, 8002, 8003, 8004, 8005
];

/**
 * ÊµãËØïÂçï‰∏™Á´ØÂè£
 */
function testPort(port) {
    return new Promise((resolve) => {
        const req = http.request({
            hostname: 'localhost',
            port: port,
            path: '/health',
            method: 'GET',
            timeout: 1000
        }, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                resolve({
                    port,
                    status: res.statusCode,
                    available: true,
                    response: body
                });
            });
        });

        req.on('error', () => {
            resolve({
                port,
                available: false
            });
        });

        req.on('timeout', () => {
            req.destroy();
            resolve({
                port,
                available: false
            });
        });

        req.end();
    });
}

/**
 * Ëé∑ÂèñÁ´ØÂè£‰ø°ÊÅØ
 */
function getPortInfo(port) {
    return new Promise((resolve) => {
        const req = http.request({
            hostname: 'localhost',
            port: port,
            path: '/info',
            method: 'GET',
            timeout: 2000
        }, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
                try {
                    const data = JSON.parse(body);
                    resolve({
                        port,
                        info: data,
                        success: true
                    });
                } catch (e) {
                    resolve({
                        port,
                        info: body,
                        success: false
                    });
                }
            });
        });

        req.on('error', () => {
            resolve({ port, success: false });
        });

        req.on('timeout', () => {
            req.destroy();
            resolve({ port, success: false });
        });

        req.end();
    });
}

/**
 * ‰∏ªÊâ´ÊèèÂáΩÊï∞
 */
async function scanPorts() {
    console.log('üîç Scanning for A2A agent servers...');
    console.log('üì° Testing common ports:', COMMON_PORTS.join(', '));
    console.log('‚è≥ This may take a few seconds...\n');

    // Âπ∂Ë°åÊµãËØïÊâÄÊúâÁ´ØÂè£
    const results = await Promise.all(
        COMMON_PORTS.map(port => testPort(port))
    );

    // ÊâæÂà∞ÂèØÁî®ÁöÑÁ´ØÂè£
    const availablePorts = results.filter(result => result.available);

    if (availablePorts.length === 0) {
        console.log('‚ùå No A2A servers found on common ports');
        console.log('üí° Your agent might be running on a different port');
        console.log('üí° Or the agent might not be published yet');
        return;
    }

    console.log(`‚úÖ Found ${availablePorts.length} running server(s):\n`);

    // Ëé∑ÂèñÊØè‰∏™ÂèØÁî®Á´ØÂè£ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
    for (const portResult of availablePorts) {
        console.log(`üîπ Port ${portResult.port}:`);
        console.log(`   Status: ${portResult.status}`);
        
        // Ëé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ
        const info = await getPortInfo(portResult.port);
        if (info.success && info.info) {
            console.log(`   Agent: ${info.info.name || 'Unknown'}`);
            console.log(`   Description: ${info.info.description || 'No description'}`);
            console.log(`   URL: http://localhost:${portResult.port}`);
            
            // Ê£ÄÊü•ÊòØÂê¶ÊòØA2AÊúçÂä°Âô®
            if (info.info.capabilities || info.info.skills) {
                console.log('   ‚úÖ This appears to be an A2A agent server!');
            }
        } else {
            console.log('   ‚ö†Ô∏è  Server responding but no agent info available');
        }
        console.log('');
    }

    // Êèê‰æõÊµãËØïÂª∫ËÆÆ
    if (availablePorts.length > 0) {
        const firstPort = availablePorts[0].port;
        console.log('üéØ Quick test commands:');
        console.log(`   curl http://localhost:${firstPort}/health`);
        console.log(`   curl http://localhost:${firstPort}/info`);
        console.log(`   node test-agent.js  # (make sure to update the port)`);
    }
}

/**
 * Ê£ÄÊü•ÁâπÂÆöÁ´ØÂè£
 */
async function checkSpecificPort(port) {
    console.log(`üîç Checking port ${port}...`);
    
    const result = await testPort(port);
    
    if (!result.available) {
        console.log(`‚ùå Port ${port} is not accessible`);
        console.log('üí° Make sure your agent is published and running');
        return;
    }

    console.log(`‚úÖ Port ${port} is responding!`);
    
    const info = await getPortInfo(port);
    if (info.success) {
        console.log('üìã Agent Information:');
        console.log(JSON.stringify(info.info, null, 2));
    } else {
        console.log('‚ö†Ô∏è  Server is running but agent info is not available');
    }
}

// ‰∏ªÁ®ãÂ∫è
async function main() {
    const args = process.argv.slice(2);
    
    if (args.length > 0) {
        const port = parseInt(args[0]);
        if (isNaN(port)) {
            console.log('‚ùå Invalid port number');
            process.exit(1);
        }
        await checkSpecificPort(port);
    } else {
        await scanPorts();
    }
}

// ËøêË°å
if (require.main === module) {
    main().catch(console.error);
}