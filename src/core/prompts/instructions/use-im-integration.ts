export const USE_IM_INTEGRATION_INSTRUCTIONS = `
# IM系统集成使用指南

## 概述
Roo-Code 支持与 IM（即时通讯）系统的深度集成，允许你通过 @引用 来发送消息和查询知识库。

## 支持的 @引用 类型

### 1. @联系人:name
当用户消息中包含 \`@联系人:name\` 时，表示用户希望将任务结果发送给指定的联系人。

**使用示例：**
- \`@联系人:张三 请帮我分析这个文件的性能问题\`
- \`@联系人:李四 总结今天的会议内容\`

**处理步骤：**
1. 完成用户请求的主要任务
2. 使用 \`use_mcp_tool\` 工具调用 im-platform 服务器的 \`send_message\` 方法
3. 根据结果类型选择合适的消息格式：
   - 文本结果：直接发送消息内容
   - 代码或文件：先保存文件，然后发送文件
   - 长文本：考虑分段发送或作为文件发送

**注意事项：**
- 确保消息内容清晰、完整
- 包含必要的上下文信息
- 避免发送敏感信息

### 2. @知识库:name
当用户消息中包含 \`@知识库:name\` 时，表示需要查询指定联系人或群组的知识库内容。

**使用示例：**
- \`@知识库:技术小组 如何配置Docker环境？\`
- \`@知识库:张三 之前是如何解决这个Bug的？\`

**处理步骤：**
1. 使用 \`use_mcp_tool\` 工具调用 im-platform 服务器的 \`search_knowledge_base\` 方法
2. 分析返回的知识库内容
3. 基于知识库信息回答用户问题
4. 在回答中适当引用知识库来源

**最佳实践：**
- 优先使用知识库中的信息
- 如果知识库没有相关内容，明确告知用户
- 可以结合多个知识库的信息提供综合答案

## 组合使用

可以在同一条消息中组合使用多个 @引用：

**示例：**
- \`@知识库:张三 @联系人:李四 张三之前是如何解决这个问题的？\`
  - 查询张三的知识库，将答案发送给李四

- \`@/src/main.ts @联系人:技术主管 请帮我review这个文件\`
  - 分析文件内容，将review结果发送给技术主管

## MCP 工具调用示例

### 发送消息
\`\`\`json
{
  "tool": "use_mcp_tool",
  "server": "im-platform",
  "toolName": "send_message",
  "arguments": {
    "contact_name": "张三",
    "message": "分析结果：...",
    "type": "text"
  }
}
\`\`\`

### 查询知识库
\`\`\`json
{
  "tool": "use_mcp_tool",
  "server": "im-platform",
  "toolName": "search_knowledge_base",
  "arguments": {
    "contact_name": "技术小组",
    "query": "Docker配置",
    "limit": 10
  }
}
\`\`\`

## 错误处理

- 联系人不存在：告知用户并请求确认联系人名称
- 知识库为空：告知用户该联系人/群组暂无知识库内容
- MCP服务不可用：提示用户检查 im-platform 服务器是否正常运行

## 隐私和安全

- 发送消息前考虑内容的敏感性
- 不要发送包含密码、API密钥等敏感信息
- 遵守组织的数据安全政策
`