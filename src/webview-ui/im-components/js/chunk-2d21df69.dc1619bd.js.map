{"version":3,"sources":["webpack:///./src/utils/A2AClient.js"],"names":["A2AClient","constructor","this","isConnected","currentAgent","messageListeners","statusListeners","serviceEndpoint","agentCard","requestIdCounter","agent","console","log","serviceStatus","isActive","Error","officialClient","agentCardUrl","response","fetch","ok","status","json","error","warn","name","description","roleDescription","endpoints","chat","notifyStatusChange","id","message","onMessage","listener","push","onStatusChange","notifyMessage","forEach","detail","generateMessageId","uuidv4","isAgentConnected","type","useStreaming","placeholderId","sendMessageWithStreaming","request","method","params","endpoint","getServiceEndpoint","headers","body","JSON","stringify","statusText","responseData","content","success","result","agentMessage","timestamp","Date","now","agentId","agentName","originalResponse","friendlyMessage","includes","errorMessage","messageId","streaming","thinkingContent","completionContent","stream","contentType","get","reader","getReader","decoder","TextDecoder","buffer","done","read","value","decode","lines","split","pop","line","startsWith","event","substring","trim","data","parsedData","parse","handleStreamEvent","e","eventData","_notified","initialMessage","code","details","text","newContent","_this$agentCard","finalEndpoint","baseEndpoint","url","endsWith","requestId","statusRequest","jsonrpc","removeListener","filter","l","getCurrentUserId","_window$$store","window","$store","state","userStore","userInfo","getCurrentAgent","testClient","startTime","connect","getStatus","disconnect","latency","globalA2AClient"],"mappings":"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","file":"js/chunk-2d21df69.dc1619bd.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\n/**\n * A2A智能体客户端\n * 基于官方 @a2a-js/sdk 标准实现A2A协议通信\n * 支持标准JSON-RPC 2.0和SSE流式响应\n */\nexport class A2AClient {\n  constructor() {\n    this.isConnected = false;\n    this.currentAgent = null;\n    this.messageListeners = [];\n    this.statusListeners = [];\n    this.serviceEndpoint = null;\n    this.agentCard = null;\n    this.requestIdCounter = 1;\n  }\n\n  /**\n   * 连接到智能体\n   * @param {Object} agent 智能体信息\n   */\n  async connect(agent) {\n    try {\n      console.log('[A2AClient] Connecting to agent:', agent);\n      \n      this.currentAgent = agent;\n      \n      // 检查智能体是否在线\n      if (agent.serviceStatus !== 'online' || !agent.isActive) {\n        throw new Error('智能体当前不在线');\n      }\n\n      // 检查服务端点\n      if (!agent.serviceEndpoint) {\n        throw new Error('智能体服务端点不可用');\n      }\n\n      this.serviceEndpoint = agent.serviceEndpoint;\n      \n      // 不使用SDK，直接实现A2A协议\n      this.officialClient = null;\n      \n      // 获取智能体卡片信息（A2A标准）\n      const agentCardUrl = `${agent.serviceEndpoint}/.well-known/agent-card.json`;\n      \n      try {\n        const response = await fetch(agentCardUrl);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch agent card: ${response.status}`);\n        }\n        this.agentCard = await response.json();\n      } catch (error) {\n        console.warn('[A2AClient] Failed to fetch agent card, using default config:', error);\n        // 使用默认配置\n        this.agentCard = {\n          name: agent.name,\n          description: agent.roleDescription,\n          endpoints: {\n            chat: `${agent.serviceEndpoint}/chat`\n          }\n        };\n      }\n      \n      this.isConnected = true;\n      this.notifyStatusChange('connected');\n      \n      console.log('[A2AClient] Successfully connected to agent:', agent.id);\n      return true;\n      \n    } catch (error) {\n      console.error('[A2AClient] Failed to connect to agent:', error);\n      this.isConnected = false;\n      this.notifyStatusChange('error', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * 断开连接\n   */\n  async disconnect() {\n    try {\n      this.isConnected = false;\n      this.currentAgent = null;\n      this.serviceEndpoint = null;\n      this.agentCard = null;\n      \n      this.notifyStatusChange('disconnected');\n      console.log('[A2AClient] Disconnected from agent');\n      \n    } catch (error) {\n      console.error('[A2AClient] Error during disconnect:', error);\n    }\n  }\n  \n  /**\n   * 注册消息监听器\n   * @param {Function} listener 监听函数\n   */\n  onMessage(listener) {\n    if (typeof listener === 'function') {\n      this.messageListeners.push(listener);\n    }\n  }\n  \n  /**\n   * 注册状态监听器\n   * @param {Function} listener 监听函数\n   */\n  onStatusChange(listener) {\n    if (typeof listener === 'function') {\n      this.statusListeners.push(listener);\n    }\n  }\n  \n  /**\n   * 通知消息监听器\n   * @param {Object} message 消息对象\n   */\n  notifyMessage(message) {\n    this.messageListeners.forEach(listener => {\n      try {\n        listener(message);\n      } catch (error) {\n        console.error('[A2AClient] Error in message listener:', error);\n      }\n    });\n  }\n  \n  /**\n   * 通知状态变化\n   * @param {string} status 状态\n   * @param {string} detail 详情\n   */\n  notifyStatusChange(status, detail = '') {\n    this.statusListeners.forEach(listener => {\n      try {\n        listener({ status, detail });\n      } catch (error) {\n        console.error('[A2AClient] Error in status listener:', error);\n      }\n    });\n  }\n  \n  /**\n   * 生成消息ID\n   */\n  generateMessageId() {\n    return uuidv4();\n  }\n  \n  /**\n   * 检查智能体是否已连接\n   */\n  isAgentConnected() {\n    return this.isConnected && this.currentAgent !== null;\n  }\n\n  /**\n   * 发送消息给智能体 (简化协议，匹配实际智能体支持)\n   * @param {string} message 消息内容\n   * @param {string} type 消息类型 (text, json)\n   * @param {boolean} useStreaming 是否使用流式响应\n   */\n  async sendMessage(message, type = 'text', useStreaming = true, placeholderId = null) {\n    if (!this.isConnected) {\n      throw new Error('未连接到智能体');\n    }\n\n    // 优先使用流式响应\n    if (useStreaming) {\n      return this.sendMessageWithStreaming(message, type, placeholderId);\n    }\n\n    try {\n      console.log('[A2AClient] Sending message:', { message, type });\n      \n      // 使用智能体实际支持的简单格式\n      const request = {\n        method: \"execute\",\n        params: {\n          message: message\n        }\n      };\n\n      const endpoint = await this.getServiceEndpoint();\n      \n      console.log('[A2AClient] Sending request to:', endpoint, request);\n      \n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const responseData = await response.json();\n      console.log('[A2AClient] Received response:', responseData);\n      \n      // 处理响应\n      let content = '';\n      \n      if (responseData.success && responseData.result) {\n        content = responseData.result;\n      } else if (responseData.error) {\n        throw new Error(`Agent Error: ${responseData.error}`);\n      } else {\n        content = '智能体已处理您的请求';\n      }\n      \n      const agentMessage = {\n        id: this.generateMessageId(),\n        content: content,\n        type: 'agent',\n        timestamp: Date.now(),\n        agentId: this.currentAgent.id,\n        agentName: this.currentAgent.name,\n        originalResponse: responseData\n      };\n      \n      this.notifyMessage(agentMessage);\n      return agentMessage;\n      \n    } catch (error) {\n      console.error('[A2AClient] Failed to send message:', error);\n      \n      // 根据错误类型提供友好的提示\n      let friendlyMessage = '抱歉，出错了！';\n      \n      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n        friendlyMessage = '抱歉，出错了！该智能体暂时无法连接和运行，请联系智能体创作者。';\n      } else if (error.message.includes('timeout')) {\n        friendlyMessage = '抱歉，智能体响应超时，请稍后再试。';\n      } else if (error.message.includes('HTTP 404')) {\n        friendlyMessage = '抱歉，智能体服务未找到，请确认智能体是否正常运行。';\n      } else if (error.message.includes('HTTP 500') || error.message.includes('HTTP 502')) {\n        friendlyMessage = '抱歉，智能体服务暂时出现问题，请稍后再试。';\n      } else if (error.message.includes('HTTP')) {\n        friendlyMessage = `抱歉，智能体服务返回错误（${error.message}），请稍后再试。`;\n      } else {\n        friendlyMessage = '抱歉，智能体暂时无法响应，请稍后再试或联系智能体创作者。';\n      }\n      \n      // 创建错误消息\n      const errorMessage = {\n        id: this.generateMessageId(),\n        content: friendlyMessage,\n        type: 'error',\n        timestamp: Date.now(),\n        agentId: this.currentAgent.id,\n        agentName: this.currentAgent.name\n      };\n      \n      this.notifyMessage(errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * 发送消息并使用SSE流式响应\n   * @param {string} message 消息内容\n   * @param {string} type 消息类型 (text, json)\n   */\n  async sendMessageWithStreaming(message, type = 'text', placeholderId = null) {\n    if (!this.isConnected) {\n      throw new Error('未连接到智能体');\n    }\n\n    // 生成消息ID\n    const messageId = this.generateMessageId();\n    let streamContent = '';\n    let isThinking = false;\n    \n    try {\n      console.log('[A2AClient] Sending streaming message:', { message, type, placeholderId });\n      \n      const endpoint = await this.getServiceEndpoint();\n      \n      // 创建初始消息对象，包含占位符ID\n      const agentMessage = {\n        id: messageId,\n        content: '',\n        placeholderId: placeholderId,\n        type: 'agent',\n        timestamp: Date.now(),\n        agentId: this.currentAgent.id,\n        agentName: this.currentAgent.name,\n        streaming: true,\n        thinkingContent: '',\n        completionContent: ''\n      };\n      \n      // 不要立即通知创建消息，等待第一个事件再创建\n      // this.notifyMessage(agentMessage);\n      \n      // 使用 fetch 发送请求并处理SSE流\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream'\n        },\n        body: JSON.stringify({\n          method: \"execute\",\n          params: {\n            message: message,\n            stream: true  // 请求流式响应\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 检查是否为SSE响应\n      const contentType = response.headers.get('Content-Type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        // 如果不是SSE，退回到普通响应处理\n        const responseData = await response.json();\n        agentMessage.content = responseData.result || '智能体已处理您的请求';\n        agentMessage.streaming = false;\n        this.notifyMessage(agentMessage);\n        return agentMessage;\n      }\n\n      // 处理SSE流\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      let done = false;\n      while (!done) {\n        const result = await reader.read();\n        done = result.done;\n        if (done) break;\n        const value = result.value;\n        \n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n        \n        for (const line of lines) {\n          if (line.startsWith('event:')) {\n            const event = line.substring(6).trim();\n            console.log('[A2AClient] SSE Event:', event);\n          } else if (line.startsWith('data:')) {\n            const data = line.substring(5).trim();\n            if (data) {\n              try {\n                const parsedData = JSON.parse(data);\n                this.handleStreamEvent(parsedData, agentMessage);\n              } catch (e) {\n                // 可能是纯文本数据\n                this.handleStreamEvent({ type: 'text', content: data }, agentMessage);\n              }\n            }\n          }\n        }\n      }\n      \n      // 标记流式结束\n      agentMessage.streaming = false;\n      this.notifyMessage(agentMessage);\n      return agentMessage;\n      \n    } catch (error) {\n      console.error('[A2AClient] Streaming failed:', error);\n      \n      // 根据错误类型提供友好的提示\n      let friendlyMessage = '抱歉，出错了！';\n      \n      if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n        friendlyMessage = '抱歉，出错了！该智能体暂时无法连接和运行，请联系智能体创作者。';\n      } else if (error.message.includes('timeout')) {\n        friendlyMessage = '抱歉，智能体响应超时，请稍后再试。';\n      } else if (error.message.includes('HTTP 404')) {\n        friendlyMessage = '抱歉，智能体服务未找到，请确认智能体是否正常运行。';\n      } else if (error.message.includes('HTTP 500') || error.message.includes('HTTP 502')) {\n        friendlyMessage = '抱歉，智能体服务暂时出现问题，请稍后再试。';\n      } else if (error.message.includes('HTTP')) {\n        friendlyMessage = `抱歉，智能体服务返回错误（${error.message}），请稍后再试。`;\n      } else {\n        friendlyMessage = '抱歉，智能体暂时无法响应，请稍后再试或联系智能体创作者。';\n      }\n      \n      // 创建错误消息\n      const errorMessage = {\n        id: this.generateMessageId(),\n        content: friendlyMessage,\n        type: 'error',\n        timestamp: Date.now(),\n        agentId: this.currentAgent.id,\n        agentName: this.currentAgent.name\n      };\n      \n      this.notifyMessage(errorMessage);\n      throw error;\n    }\n  }\n\n  /**\n   * 处理流式事件\n   * @param {Object} eventData 事件数据\n   * @param {Object} agentMessage 消息对象\n   */\n  handleStreamEvent(eventData, agentMessage) {\n    console.log('[A2AClient] Handling stream event:', eventData);\n    \n    // 如果是第一次处理事件，且agentMessage还没有被发送过，则先发送一次\n    if (!agentMessage._notified) {\n      agentMessage._notified = true;\n      // 确保第一次通知时内容为空，显示loading状态\n      const initialMessage = {\n        ...agentMessage,\n        content: '', // 强制内容为空\n        streaming: true\n      };\n      this.notifyMessage(initialMessage);\n    }\n    \n    // 首先检查是否是错误事件（多种格式）\n    if (eventData.error || eventData.code === 'MESSAGE_ERROR' || eventData.type === 'error') {\n      // 错误处理\n      agentMessage.type = 'error';\n      agentMessage.streaming = false;\n      \n      // 提取错误信息\n      let errorMessage = '';\n      if (eventData.error) {\n        errorMessage = eventData.error;\n      } else if (eventData.details && eventData.details.text) {\n        errorMessage = eventData.details.text;\n      } else if (eventData.message) {\n        errorMessage = eventData.message;\n      } else {\n        errorMessage = '智能体处理出现未知错误';\n      }\n      \n      // 根据错误类型提供友好的错误消息\n      let friendlyMessage = '';\n      if (errorMessage.includes('language model did not provide any assistant messages')) {\n        friendlyMessage = '🤖 抱歉，智能体暂时无法处理您的请求。这可能是因为：\\n\\n• 智能体的语言模型配置有问题\\n• 您的问题可能超出了智能体的能力范围\\n• 智能体服务暂时不稳定\\n\\n💡 建议：请尝试换个方式提问，或联系智能体创作者进行排查。';\n      } else if (errorMessage.includes('timeout') || errorMessage.includes('超时')) {\n        friendlyMessage = '⏰ 智能体响应超时，请稍后再试。';\n      } else if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n        friendlyMessage = '🌐 网络连接异常，请检查网络后重试。';\n      } else if (errorMessage.includes('rate limit') || errorMessage.includes('限制')) {\n        friendlyMessage = '🚦 请求频率过高，请稍后再试。';\n      } else {\n        friendlyMessage = `❌ 智能体处理失败：${errorMessage}\\n\\n如果问题持续出现，请联系智能体创作者。`;\n      }\n      \n      agentMessage.content = friendlyMessage;\n      agentMessage.status = 'error';\n      \n      // 通知UI更新\n      this.notifyMessage(agentMessage);\n      return;\n    }\n    \n    // 正常事件处理\n    switch (eventData.type) {\n      case 'connected':\n        // 连接成功\n        agentMessage.status = 'connected';\n        break;\n        \n      case 'start':\n        // 开始处理\n        agentMessage.status = 'processing';\n        break;\n        \n      case 'api_start':\n        // API开始处理\n        agentMessage.status = 'api_processing';\n        // 不要设置内容，保持loading状态\n        break;\n        \n      case 'thinking': {\n        // AI思考过程\n        if (!agentMessage.thinkingContent) {\n          agentMessage.thinkingContent = '';\n        }\n        // 检查是否是新的内容片段（避免重复）\n        const newContent = eventData.content || '';\n        if (!agentMessage.thinkingContent.includes(newContent)) {\n          agentMessage.thinkingContent += newContent;\n        }\n        // 更新显示内容\n        agentMessage.content = `🤔 思考中...\\n${agentMessage.thinkingContent}`;\n        break;\n      }\n        \n      case 'completion':\n        // AI回复内容\n        if (!agentMessage.completionContent) {\n          agentMessage.completionContent = '';\n        }\n        agentMessage.completionContent += eventData.content || '';\n        // 只显示回复内容，隐藏思考过程\n        agentMessage.content = agentMessage.completionContent;\n        break;\n        \n      case 'done':\n        // 处理完成\n        agentMessage.status = 'done';\n        agentMessage.streaming = false;\n        if (eventData.result) {\n          agentMessage.content = eventData.result;\n        }\n        break;\n        \n      default:\n        // 其他事件\n        if (eventData.content) {\n          agentMessage.content += eventData.content;\n        }\n        // 移除eventData.message的处理，避免用户问题被错误显示\n    }\n    \n    // 通知UI更新\n    this.notifyMessage(agentMessage);\n  }\n\n\n  /**\n   * 获取服务端点\n   */\n  async getServiceEndpoint() {\n    let baseEndpoint = this.serviceEndpoint;\n    \n    if (!baseEndpoint && this.agentCard?.url) {\n      baseEndpoint = this.agentCard.url;\n    }\n    \n    if (!baseEndpoint) {\n      throw new Error('No service endpoint available');\n    }\n    \n    console.log('[A2AClient] Original baseEndpoint:', baseEndpoint);\n    \n    // 确保保持原始协议（不要自动升级HTTP到HTTPS）\n    let finalEndpoint;\n    if (baseEndpoint.endsWith('/')) {\n      finalEndpoint = baseEndpoint + 'execute';\n    } else {\n      finalEndpoint = baseEndpoint + '/execute';\n    }\n    \n    console.log('[A2AClient] Final endpoint before fetch:', finalEndpoint);\n    return finalEndpoint;\n  }\n\n  /**\n   * 查询智能体状态\n   */\n  async getStatus() {\n    if (!this.isConnected) {\n      throw new Error('未连接到智能体');\n    }\n\n    try {\n      // 使用A2A标准JSON-RPC格式查询状态\n      const requestId = Date.now();\n      const statusRequest = {\n        jsonrpc: \"2.0\",\n        id: requestId,\n        method: \"agent.getStatus\",\n        params: {}\n      };\n      \n      const endpoint = await this.getServiceEndpoint();\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(statusRequest)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const responseData = await response.json();\n      \n      if (responseData.error) {\n        throw new Error(`A2A Error ${responseData.error.code}: ${responseData.error.message}`);\n      }\n      \n      return responseData.result || responseData;\n      \n    } catch (error) {\n      console.error('[A2AClient] Failed to get status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 移除监听器\n   * @param {Function} listener 监听器函数\n   */\n  removeListener(listener) {\n    this.messageListeners = this.messageListeners.filter(l => l !== listener);\n    this.statusListeners = this.statusListeners.filter(l => l !== listener);\n  }\n\n\n  /**\n   * 获取当前用户ID\n   */\n  getCurrentUserId() {\n    // 这里应该从Vuex store获取用户ID\n    try {\n      return window.$store?.state?.userStore?.userInfo?.id || 'unknown';\n    } catch (error) {\n      return 'unknown';\n    }\n  }\n\n  /**\n   * 获取当前连接的智能体\n   */\n  getCurrentAgent() {\n    return this.currentAgent;\n  }\n\n  /**\n   * 测试智能体连接\n   * @param {Object} agent 智能体信息\n   */\n  static async testConnection(agent) {\n    const testClient = new A2AClient();\n    const startTime = Date.now();\n    \n    try {\n      await testClient.connect(agent);\n      const status = await testClient.getStatus();\n      await testClient.disconnect();\n      \n      return {\n        success: true,\n        status: status,\n        latency: Date.now() - startTime\n      };\n      \n    } catch (error) {\n      await testClient.disconnect();\n      \n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}\n\n// 创建全局实例\nexport const globalA2AClient = new A2AClient();\n\n// 导出默认实例\nexport default globalA2AClient;"],"sourceRoot":""}