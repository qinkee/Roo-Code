import { z } from 'zod';
import { EventEmitter } from 'events';
import { Socket } from 'net';

/**
 * 智能体工具配置
 */
declare const agentToolConfigSchema: z.ZodObject<{
    toolId: z.ZodString;
    enabled: z.ZodBoolean;
    config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    toolId: string;
    enabled: boolean;
    config?: Record<string, any> | undefined;
}, {
    toolId: string;
    enabled: boolean;
    config?: Record<string, any> | undefined;
}>;
type AgentToolConfig = z.infer<typeof agentToolConfigSchema>;
/**
 * 智能体Todo项
 */
declare const agentTodoSchema: z.ZodObject<{
    id: z.ZodString;
    content: z.ZodString;
    status: z.ZodEnum<["pending", "in_progress", "completed"]>;
    createdAt: z.ZodNumber;
    updatedAt: z.ZodNumber;
    priority: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "in_progress" | "completed";
    id: string;
    content: string;
    createdAt: number;
    updatedAt: number;
    priority?: "low" | "medium" | "high" | undefined;
}, {
    status: "pending" | "in_progress" | "completed";
    id: string;
    content: string;
    createdAt: number;
    updatedAt: number;
    priority?: "low" | "medium" | "high" | undefined;
}>;
type AgentTodo = z.infer<typeof agentTodoSchema>;
/**
 * 智能体模板来源
 */
declare const agentTemplateSourceSchema: z.ZodObject<{
    type: z.ZodEnum<["manual", "task"]>;
    taskId: z.ZodOptional<z.ZodString>;
    taskDescription: z.ZodOptional<z.ZodString>;
    timestamp: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "manual" | "task";
    timestamp: number;
    taskId?: string | undefined;
    taskDescription?: string | undefined;
}, {
    type: "manual" | "task";
    timestamp: number;
    taskId?: string | undefined;
    taskDescription?: string | undefined;
}>;
type AgentTemplateSource = z.infer<typeof agentTemplateSourceSchema>;
/**
 * A2A 智能体卡片
 */
declare const a2aAgentCardSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodString;
    skills: z.ZodArray<z.ZodString, "many">;
    url: z.ZodOptional<z.ZodString>;
    capabilities: z.ZodObject<{
        messageTypes: z.ZodArray<z.ZodString, "many">;
        taskTypes: z.ZodArray<z.ZodString, "many">;
        dataFormats: z.ZodArray<z.ZodString, "many">;
        maxConcurrency: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        messageTypes: string[];
        taskTypes: string[];
        dataFormats: string[];
        maxConcurrency?: number | undefined;
    }, {
        messageTypes: string[];
        taskTypes: string[];
        dataFormats: string[];
        maxConcurrency?: number | undefined;
    }>;
    deployment: z.ZodOptional<z.ZodObject<{
        type: z.ZodEnum<["pc", "cloud", "docker"]>;
        platform: z.ZodString;
        region: z.ZodOptional<z.ZodString>;
        networkReachable: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        type: "pc" | "cloud" | "docker";
        platform: string;
        region?: string | undefined;
        networkReachable?: boolean | undefined;
    }, {
        type: "pc" | "cloud" | "docker";
        platform: string;
        region?: string | undefined;
        networkReachable?: boolean | undefined;
    }>>;
    auth: z.ZodOptional<z.ZodObject<{
        apiKey: z.ZodOptional<z.ZodString>;
        authType: z.ZodEnum<["none", "apikey", "oauth"]>;
    }, "strip", z.ZodTypeAny, {
        authType: "none" | "apikey" | "oauth";
        apiKey?: string | undefined;
    }, {
        authType: "none" | "apikey" | "oauth";
        apiKey?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    description: string;
    name: string;
    skills: string[];
    capabilities: {
        messageTypes: string[];
        taskTypes: string[];
        dataFormats: string[];
        maxConcurrency?: number | undefined;
    };
    url?: string | undefined;
    deployment?: {
        type: "pc" | "cloud" | "docker";
        platform: string;
        region?: string | undefined;
        networkReachable?: boolean | undefined;
    } | undefined;
    auth?: {
        authType: "none" | "apikey" | "oauth";
        apiKey?: string | undefined;
    } | undefined;
}, {
    description: string;
    name: string;
    skills: string[];
    capabilities: {
        messageTypes: string[];
        taskTypes: string[];
        dataFormats: string[];
        maxConcurrency?: number | undefined;
    };
    url?: string | undefined;
    deployment?: {
        type: "pc" | "cloud" | "docker";
        platform: string;
        region?: string | undefined;
        networkReachable?: boolean | undefined;
    } | undefined;
    auth?: {
        authType: "none" | "apikey" | "oauth";
        apiKey?: string | undefined;
    } | undefined;
}>;
type A2AAgentCard = z.infer<typeof a2aAgentCardSchema>;
/**
 * 智能体权限定义
 */
declare const agentPermissionSchema: z.ZodObject<{
    action: z.ZodEnum<["read", "execute", "modify", "admin"]>;
    resource: z.ZodString;
    conditions: z.ZodOptional<z.ZodObject<{
        timeRange: z.ZodOptional<z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>>;
        ipRange: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        userAgent: z.ZodOptional<z.ZodString>;
        maxUsage: z.ZodOptional<z.ZodNumber>;
        rateLimit: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        timeRange?: [number, number] | undefined;
        ipRange?: string[] | undefined;
        userAgent?: string | undefined;
        maxUsage?: number | undefined;
        rateLimit?: number | undefined;
    }, {
        timeRange?: [number, number] | undefined;
        ipRange?: string[] | undefined;
        userAgent?: string | undefined;
        maxUsage?: number | undefined;
        rateLimit?: number | undefined;
    }>>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    action: "read" | "execute" | "modify" | "admin";
    resource: string;
    description?: string | undefined;
    conditions?: {
        timeRange?: [number, number] | undefined;
        ipRange?: string[] | undefined;
        userAgent?: string | undefined;
        maxUsage?: number | undefined;
        rateLimit?: number | undefined;
    } | undefined;
}, {
    action: "read" | "execute" | "modify" | "admin";
    resource: string;
    description?: string | undefined;
    conditions?: {
        timeRange?: [number, number] | undefined;
        ipRange?: string[] | undefined;
        userAgent?: string | undefined;
        maxUsage?: number | undefined;
        rateLimit?: number | undefined;
    } | undefined;
}>;
type AgentPermission = z.infer<typeof agentPermissionSchema>;
/**
 * 智能体API配置 - 基于完整的ProviderSettings副本
 */
declare const agentApiConfigSchema: z.ZodObject<{
    codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
    codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    apiModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
    fireworksApiKey: z.ZodOptional<z.ZodString>;
    zaiApiKey: z.ZodOptional<z.ZodString>;
    zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
    sambaNovaApiKey: z.ZodOptional<z.ZodString>;
    cerebrasApiKey: z.ZodOptional<z.ZodString>;
    litellmBaseUrl: z.ZodOptional<z.ZodString>;
    litellmApiKey: z.ZodOptional<z.ZodString>;
    litellmModelId: z.ZodOptional<z.ZodString>;
    litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    chutesApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceModelId: z.ZodOptional<z.ZodString>;
    huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
    groqApiKey: z.ZodOptional<z.ZodString>;
    xaiApiKey: z.ZodOptional<z.ZodString>;
    fakeAi: z.ZodOptional<z.ZodUnknown>;
    requestyBaseUrl: z.ZodOptional<z.ZodString>;
    requestyApiKey: z.ZodOptional<z.ZodString>;
    requestyModelId: z.ZodOptional<z.ZodString>;
    unboundApiKey: z.ZodOptional<z.ZodString>;
    unboundModelId: z.ZodOptional<z.ZodString>;
    moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
    moonshotApiKey: z.ZodOptional<z.ZodString>;
    doubaoBaseUrl: z.ZodOptional<z.ZodString>;
    doubaoApiKey: z.ZodOptional<z.ZodString>;
    deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
    deepSeekApiKey: z.ZodOptional<z.ZodString>;
    mistralApiKey: z.ZodOptional<z.ZodString>;
    mistralCodestralUrl: z.ZodOptional<z.ZodString>;
    openAiNativeApiKey: z.ZodOptional<z.ZodString>;
    openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
    geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
    geminiCliProjectId: z.ZodOptional<z.ZodString>;
    geminiApiKey: z.ZodOptional<z.ZodString>;
    googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
    enableUrlContext: z.ZodOptional<z.ZodBoolean>;
    enableGrounding: z.ZodOptional<z.ZodBoolean>;
    lmStudioModelId: z.ZodOptional<z.ZodString>;
    lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
    lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
    lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
    vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
        vendor: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }>>;
    ollamaModelId: z.ZodOptional<z.ZodString>;
    ollamaBaseUrl: z.ZodOptional<z.ZodString>;
    openAiBaseUrl: z.ZodOptional<z.ZodString>;
    openAiApiKey: z.ZodOptional<z.ZodString>;
    openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
    openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiModelId: z.ZodOptional<z.ZodString>;
    openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        contextWindow: z.ZodNumber;
        supportsImages: z.ZodOptional<z.ZodBoolean>;
        supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
        supportsPromptCache: z.ZodBoolean;
        supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        description: z.ZodOptional<z.ZodString>;
        modelType: z.ZodOptional<z.ZodString>;
        reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
        maxCachePoints: z.ZodOptional<z.ZodNumber>;
        cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            contextWindow: z.ZodNumber;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }>>>;
    openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
    azureApiVersion: z.ZodOptional<z.ZodString>;
    openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiHostHeader: z.ZodOptional<z.ZodString>;
    openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    vertexKeyFile: z.ZodOptional<z.ZodString>;
    vertexJsonCredentials: z.ZodOptional<z.ZodString>;
    vertexProjectId: z.ZodOptional<z.ZodString>;
    vertexRegion: z.ZodOptional<z.ZodString>;
    awsAccessKey: z.ZodOptional<z.ZodString>;
    awsSecretKey: z.ZodOptional<z.ZodString>;
    awsSessionToken: z.ZodOptional<z.ZodString>;
    awsRegion: z.ZodOptional<z.ZodString>;
    awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
    awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    awsProfile: z.ZodOptional<z.ZodString>;
    awsUseProfile: z.ZodOptional<z.ZodBoolean>;
    awsApiKey: z.ZodOptional<z.ZodString>;
    awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
    awsCustomArn: z.ZodOptional<z.ZodString>;
    awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
    awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
    awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
    openRouterApiKey: z.ZodOptional<z.ZodString>;
    openRouterModelId: z.ZodOptional<z.ZodString>;
    openRouterBaseUrl: z.ZodOptional<z.ZodString>;
    openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
    openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
    glamaModelId: z.ZodOptional<z.ZodString>;
    glamaApiKey: z.ZodOptional<z.ZodString>;
    claudeCodePath: z.ZodOptional<z.ZodString>;
    claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
    apiKey: z.ZodOptional<z.ZodString>;
    anthropicBaseUrl: z.ZodOptional<z.ZodString>;
    anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
    anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
} & {
    originalId: z.ZodOptional<z.ZodString>;
    originalName: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
    createdAt?: number | undefined;
    originalId?: string | undefined;
    originalName?: string | undefined;
}, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
    createdAt?: number | undefined;
    originalId?: string | undefined;
    originalName?: string | undefined;
}>;
type AgentApiConfig = z.infer<typeof agentApiConfigSchema>;
/**
 * 智能体配置
 */
declare const agentConfigSchema: z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    name: z.ZodString;
    avatar: z.ZodString;
    roleDescription: z.ZodString;
    apiConfigId: z.ZodString;
    apiConfig: z.ZodOptional<z.ZodObject<{
        codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
        codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
        codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
        codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
        codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
        codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        apiModelId: z.ZodOptional<z.ZodString>;
        ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
        ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
        fireworksApiKey: z.ZodOptional<z.ZodString>;
        zaiApiKey: z.ZodOptional<z.ZodString>;
        zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
        sambaNovaApiKey: z.ZodOptional<z.ZodString>;
        cerebrasApiKey: z.ZodOptional<z.ZodString>;
        litellmBaseUrl: z.ZodOptional<z.ZodString>;
        litellmApiKey: z.ZodOptional<z.ZodString>;
        litellmModelId: z.ZodOptional<z.ZodString>;
        litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
        chutesApiKey: z.ZodOptional<z.ZodString>;
        huggingFaceApiKey: z.ZodOptional<z.ZodString>;
        huggingFaceModelId: z.ZodOptional<z.ZodString>;
        huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
        groqApiKey: z.ZodOptional<z.ZodString>;
        xaiApiKey: z.ZodOptional<z.ZodString>;
        fakeAi: z.ZodOptional<z.ZodUnknown>;
        requestyBaseUrl: z.ZodOptional<z.ZodString>;
        requestyApiKey: z.ZodOptional<z.ZodString>;
        requestyModelId: z.ZodOptional<z.ZodString>;
        unboundApiKey: z.ZodOptional<z.ZodString>;
        unboundModelId: z.ZodOptional<z.ZodString>;
        moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
        moonshotApiKey: z.ZodOptional<z.ZodString>;
        doubaoBaseUrl: z.ZodOptional<z.ZodString>;
        doubaoApiKey: z.ZodOptional<z.ZodString>;
        deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
        deepSeekApiKey: z.ZodOptional<z.ZodString>;
        mistralApiKey: z.ZodOptional<z.ZodString>;
        mistralCodestralUrl: z.ZodOptional<z.ZodString>;
        openAiNativeApiKey: z.ZodOptional<z.ZodString>;
        openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
        geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
        geminiCliProjectId: z.ZodOptional<z.ZodString>;
        geminiApiKey: z.ZodOptional<z.ZodString>;
        googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
        enableUrlContext: z.ZodOptional<z.ZodBoolean>;
        enableGrounding: z.ZodOptional<z.ZodBoolean>;
        lmStudioModelId: z.ZodOptional<z.ZodString>;
        lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
        lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
        lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
        vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
            vendor: z.ZodOptional<z.ZodString>;
            family: z.ZodOptional<z.ZodString>;
            version: z.ZodOptional<z.ZodString>;
            id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        }, {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        }>>;
        ollamaModelId: z.ZodOptional<z.ZodString>;
        ollamaBaseUrl: z.ZodOptional<z.ZodString>;
        openAiBaseUrl: z.ZodOptional<z.ZodString>;
        openAiApiKey: z.ZodOptional<z.ZodString>;
        openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
        openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
        openAiModelId: z.ZodOptional<z.ZodString>;
        openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            contextWindow: z.ZodNumber;
            supportsImages: z.ZodOptional<z.ZodBoolean>;
            supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
            supportsPromptCache: z.ZodBoolean;
            supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
            supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
            requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
            supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
            supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
            description: z.ZodOptional<z.ZodString>;
            modelType: z.ZodOptional<z.ZodString>;
            reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
            maxCachePoints: z.ZodOptional<z.ZodNumber>;
            cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                contextWindow: z.ZodNumber;
                inputPrice: z.ZodOptional<z.ZodNumber>;
                outputPrice: z.ZodOptional<z.ZodNumber>;
                cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }, {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        }, {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        }>>>;
        openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
        azureApiVersion: z.ZodOptional<z.ZodString>;
        openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
        openAiHostHeader: z.ZodOptional<z.ZodString>;
        openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        vertexKeyFile: z.ZodOptional<z.ZodString>;
        vertexJsonCredentials: z.ZodOptional<z.ZodString>;
        vertexProjectId: z.ZodOptional<z.ZodString>;
        vertexRegion: z.ZodOptional<z.ZodString>;
        awsAccessKey: z.ZodOptional<z.ZodString>;
        awsSecretKey: z.ZodOptional<z.ZodString>;
        awsSessionToken: z.ZodOptional<z.ZodString>;
        awsRegion: z.ZodOptional<z.ZodString>;
        awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
        awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
        awsProfile: z.ZodOptional<z.ZodString>;
        awsUseProfile: z.ZodOptional<z.ZodBoolean>;
        awsApiKey: z.ZodOptional<z.ZodString>;
        awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
        awsCustomArn: z.ZodOptional<z.ZodString>;
        awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
        awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
        awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
        openRouterApiKey: z.ZodOptional<z.ZodString>;
        openRouterModelId: z.ZodOptional<z.ZodString>;
        openRouterBaseUrl: z.ZodOptional<z.ZodString>;
        openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
        openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
        glamaModelId: z.ZodOptional<z.ZodString>;
        glamaApiKey: z.ZodOptional<z.ZodString>;
        claudeCodePath: z.ZodOptional<z.ZodString>;
        claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
        apiKey: z.ZodOptional<z.ZodString>;
        anthropicBaseUrl: z.ZodOptional<z.ZodString>;
        anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
        anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
        apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
    } & {
        originalId: z.ZodOptional<z.ZodString>;
        originalName: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
        codeIndexOpenAiKey?: string | undefined;
        codeIndexQdrantApiKey?: string | undefined;
        codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
        codebaseIndexGeminiApiKey?: string | undefined;
        codebaseIndexMistralApiKey?: string | undefined;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
        fakeAi?: unknown;
        xaiApiKey?: string | undefined;
        groqApiKey?: string | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
        chutesApiKey?: string | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
        cerebrasApiKey?: string | undefined;
        sambaNovaApiKey?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
        fireworksApiKey?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
        createdAt?: number | undefined;
        originalId?: string | undefined;
        originalName?: string | undefined;
    }, {
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
        codeIndexOpenAiKey?: string | undefined;
        codeIndexQdrantApiKey?: string | undefined;
        codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
        codebaseIndexGeminiApiKey?: string | undefined;
        codebaseIndexMistralApiKey?: string | undefined;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
        fakeAi?: unknown;
        xaiApiKey?: string | undefined;
        groqApiKey?: string | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
        chutesApiKey?: string | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
        cerebrasApiKey?: string | undefined;
        sambaNovaApiKey?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
        fireworksApiKey?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
        createdAt?: number | undefined;
        originalId?: string | undefined;
        originalName?: string | undefined;
    }>>;
    mode: z.ZodString;
    tools: z.ZodArray<z.ZodObject<{
        toolId: z.ZodString;
        enabled: z.ZodBoolean;
        config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        toolId: string;
        enabled: boolean;
        config?: Record<string, any> | undefined;
    }, {
        toolId: string;
        enabled: boolean;
        config?: Record<string, any> | undefined;
    }>, "many">;
    todos: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        content: z.ZodString;
        status: z.ZodEnum<["pending", "in_progress", "completed"]>;
        createdAt: z.ZodNumber;
        updatedAt: z.ZodNumber;
        priority: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    }, "strip", z.ZodTypeAny, {
        status: "pending" | "in_progress" | "completed";
        id: string;
        content: string;
        createdAt: number;
        updatedAt: number;
        priority?: "low" | "medium" | "high" | undefined;
    }, {
        status: "pending" | "in_progress" | "completed";
        id: string;
        content: string;
        createdAt: number;
        updatedAt: number;
        priority?: "low" | "medium" | "high" | undefined;
    }>, "many">;
    isPrivate: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    shareScope: z.ZodOptional<z.ZodEnum<["friends", "groups", "public"]>>;
    shareLevel: z.ZodOptional<z.ZodNumber>;
    a2aAgentCard: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        skills: z.ZodArray<z.ZodString, "many">;
        url: z.ZodOptional<z.ZodString>;
        capabilities: z.ZodObject<{
            messageTypes: z.ZodArray<z.ZodString, "many">;
            taskTypes: z.ZodArray<z.ZodString, "many">;
            dataFormats: z.ZodArray<z.ZodString, "many">;
            maxConcurrency: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            messageTypes: string[];
            taskTypes: string[];
            dataFormats: string[];
            maxConcurrency?: number | undefined;
        }, {
            messageTypes: string[];
            taskTypes: string[];
            dataFormats: string[];
            maxConcurrency?: number | undefined;
        }>;
        deployment: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["pc", "cloud", "docker"]>;
            platform: z.ZodString;
            region: z.ZodOptional<z.ZodString>;
            networkReachable: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            type: "pc" | "cloud" | "docker";
            platform: string;
            region?: string | undefined;
            networkReachable?: boolean | undefined;
        }, {
            type: "pc" | "cloud" | "docker";
            platform: string;
            region?: string | undefined;
            networkReachable?: boolean | undefined;
        }>>;
        auth: z.ZodOptional<z.ZodObject<{
            apiKey: z.ZodOptional<z.ZodString>;
            authType: z.ZodEnum<["none", "apikey", "oauth"]>;
        }, "strip", z.ZodTypeAny, {
            authType: "none" | "apikey" | "oauth";
            apiKey?: string | undefined;
        }, {
            authType: "none" | "apikey" | "oauth";
            apiKey?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        description: string;
        name: string;
        skills: string[];
        capabilities: {
            messageTypes: string[];
            taskTypes: string[];
            dataFormats: string[];
            maxConcurrency?: number | undefined;
        };
        url?: string | undefined;
        deployment?: {
            type: "pc" | "cloud" | "docker";
            platform: string;
            region?: string | undefined;
            networkReachable?: boolean | undefined;
        } | undefined;
        auth?: {
            authType: "none" | "apikey" | "oauth";
            apiKey?: string | undefined;
        } | undefined;
    }, {
        description: string;
        name: string;
        skills: string[];
        capabilities: {
            messageTypes: string[];
            taskTypes: string[];
            dataFormats: string[];
            maxConcurrency?: number | undefined;
        };
        url?: string | undefined;
        deployment?: {
            type: "pc" | "cloud" | "docker";
            platform: string;
            region?: string | undefined;
            networkReachable?: boolean | undefined;
        } | undefined;
        auth?: {
            authType: "none" | "apikey" | "oauth";
            apiKey?: string | undefined;
        } | undefined;
    }>>;
    a2aEndpoint: z.ZodOptional<z.ZodString>;
    permissions: z.ZodOptional<z.ZodArray<z.ZodObject<{
        action: z.ZodEnum<["read", "execute", "modify", "admin"]>;
        resource: z.ZodString;
        conditions: z.ZodOptional<z.ZodObject<{
            timeRange: z.ZodOptional<z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>>;
            ipRange: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            userAgent: z.ZodOptional<z.ZodString>;
            maxUsage: z.ZodOptional<z.ZodNumber>;
            rateLimit: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            timeRange?: [number, number] | undefined;
            ipRange?: string[] | undefined;
            userAgent?: string | undefined;
            maxUsage?: number | undefined;
            rateLimit?: number | undefined;
        }, {
            timeRange?: [number, number] | undefined;
            ipRange?: string[] | undefined;
            userAgent?: string | undefined;
            maxUsage?: number | undefined;
            rateLimit?: number | undefined;
        }>>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        action: "read" | "execute" | "modify" | "admin";
        resource: string;
        description?: string | undefined;
        conditions?: {
            timeRange?: [number, number] | undefined;
            ipRange?: string[] | undefined;
            userAgent?: string | undefined;
            maxUsage?: number | undefined;
            rateLimit?: number | undefined;
        } | undefined;
    }, {
        action: "read" | "execute" | "modify" | "admin";
        resource: string;
        description?: string | undefined;
        conditions?: {
            timeRange?: [number, number] | undefined;
            ipRange?: string[] | undefined;
            userAgent?: string | undefined;
            maxUsage?: number | undefined;
            rateLimit?: number | undefined;
        } | undefined;
    }>, "many">>;
    allowedUsers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    allowedGroups: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    deniedUsers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    isPublished: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    publishInfo: z.ZodOptional<z.ZodObject<{
        terminalType: z.ZodOptional<z.ZodEnum<["local", "cloud"]>>;
        serverPort: z.ZodOptional<z.ZodNumber>;
        serverUrl: z.ZodOptional<z.ZodString>;
        publishedAt: z.ZodOptional<z.ZodString>;
        serviceStatus: z.ZodOptional<z.ZodEnum<["online", "offline", "error"]>>;
        lastHeartbeat: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        terminalType?: "cloud" | "local" | undefined;
        serverPort?: number | undefined;
        serverUrl?: string | undefined;
        publishedAt?: string | undefined;
        serviceStatus?: "online" | "offline" | "error" | undefined;
        lastHeartbeat?: number | undefined;
    }, {
        terminalType?: "cloud" | "local" | undefined;
        serverPort?: number | undefined;
        serverUrl?: string | undefined;
        publishedAt?: string | undefined;
        serviceStatus?: "online" | "offline" | "error" | undefined;
        lastHeartbeat?: number | undefined;
    }>>;
    templateSource: z.ZodOptional<z.ZodObject<{
        type: z.ZodEnum<["manual", "task"]>;
        taskId: z.ZodOptional<z.ZodString>;
        taskDescription: z.ZodOptional<z.ZodString>;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    }, {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    }>>;
    createdAt: z.ZodNumber;
    updatedAt: z.ZodNumber;
    lastUsedAt: z.ZodOptional<z.ZodNumber>;
    isActive: z.ZodBoolean;
    version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    version: number;
    createdAt: number;
    updatedAt: number;
    userId: string;
    avatar: string;
    roleDescription: string;
    apiConfigId: string;
    mode: string;
    tools: {
        toolId: string;
        enabled: boolean;
        config?: Record<string, any> | undefined;
    }[];
    todos: {
        status: "pending" | "in_progress" | "completed";
        id: string;
        content: string;
        createdAt: number;
        updatedAt: number;
        priority?: "low" | "medium" | "high" | undefined;
    }[];
    isPrivate: boolean;
    isPublished: boolean;
    isActive: boolean;
    apiConfig?: {
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
        codeIndexOpenAiKey?: string | undefined;
        codeIndexQdrantApiKey?: string | undefined;
        codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
        codebaseIndexGeminiApiKey?: string | undefined;
        codebaseIndexMistralApiKey?: string | undefined;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
        fakeAi?: unknown;
        xaiApiKey?: string | undefined;
        groqApiKey?: string | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
        chutesApiKey?: string | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
        cerebrasApiKey?: string | undefined;
        sambaNovaApiKey?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
        fireworksApiKey?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
        createdAt?: number | undefined;
        originalId?: string | undefined;
        originalName?: string | undefined;
    } | undefined;
    shareScope?: "friends" | "groups" | "public" | undefined;
    shareLevel?: number | undefined;
    a2aAgentCard?: {
        description: string;
        name: string;
        skills: string[];
        capabilities: {
            messageTypes: string[];
            taskTypes: string[];
            dataFormats: string[];
            maxConcurrency?: number | undefined;
        };
        url?: string | undefined;
        deployment?: {
            type: "pc" | "cloud" | "docker";
            platform: string;
            region?: string | undefined;
            networkReachable?: boolean | undefined;
        } | undefined;
        auth?: {
            authType: "none" | "apikey" | "oauth";
            apiKey?: string | undefined;
        } | undefined;
    } | undefined;
    a2aEndpoint?: string | undefined;
    permissions?: {
        action: "read" | "execute" | "modify" | "admin";
        resource: string;
        description?: string | undefined;
        conditions?: {
            timeRange?: [number, number] | undefined;
            ipRange?: string[] | undefined;
            userAgent?: string | undefined;
            maxUsage?: number | undefined;
            rateLimit?: number | undefined;
        } | undefined;
    }[] | undefined;
    allowedUsers?: string[] | undefined;
    allowedGroups?: string[] | undefined;
    deniedUsers?: string[] | undefined;
    publishInfo?: {
        terminalType?: "cloud" | "local" | undefined;
        serverPort?: number | undefined;
        serverUrl?: string | undefined;
        publishedAt?: string | undefined;
        serviceStatus?: "online" | "offline" | "error" | undefined;
        lastHeartbeat?: number | undefined;
    } | undefined;
    templateSource?: {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    } | undefined;
    lastUsedAt?: number | undefined;
}, {
    id: string;
    name: string;
    version: number;
    createdAt: number;
    updatedAt: number;
    userId: string;
    avatar: string;
    roleDescription: string;
    apiConfigId: string;
    mode: string;
    tools: {
        toolId: string;
        enabled: boolean;
        config?: Record<string, any> | undefined;
    }[];
    todos: {
        status: "pending" | "in_progress" | "completed";
        id: string;
        content: string;
        createdAt: number;
        updatedAt: number;
        priority?: "low" | "medium" | "high" | undefined;
    }[];
    isActive: boolean;
    apiConfig?: {
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
        codeIndexOpenAiKey?: string | undefined;
        codeIndexQdrantApiKey?: string | undefined;
        codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
        codebaseIndexGeminiApiKey?: string | undefined;
        codebaseIndexMistralApiKey?: string | undefined;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
        fakeAi?: unknown;
        xaiApiKey?: string | undefined;
        groqApiKey?: string | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
        chutesApiKey?: string | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
        cerebrasApiKey?: string | undefined;
        sambaNovaApiKey?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
        fireworksApiKey?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
        createdAt?: number | undefined;
        originalId?: string | undefined;
        originalName?: string | undefined;
    } | undefined;
    isPrivate?: boolean | undefined;
    shareScope?: "friends" | "groups" | "public" | undefined;
    shareLevel?: number | undefined;
    a2aAgentCard?: {
        description: string;
        name: string;
        skills: string[];
        capabilities: {
            messageTypes: string[];
            taskTypes: string[];
            dataFormats: string[];
            maxConcurrency?: number | undefined;
        };
        url?: string | undefined;
        deployment?: {
            type: "pc" | "cloud" | "docker";
            platform: string;
            region?: string | undefined;
            networkReachable?: boolean | undefined;
        } | undefined;
        auth?: {
            authType: "none" | "apikey" | "oauth";
            apiKey?: string | undefined;
        } | undefined;
    } | undefined;
    a2aEndpoint?: string | undefined;
    permissions?: {
        action: "read" | "execute" | "modify" | "admin";
        resource: string;
        description?: string | undefined;
        conditions?: {
            timeRange?: [number, number] | undefined;
            ipRange?: string[] | undefined;
            userAgent?: string | undefined;
            maxUsage?: number | undefined;
            rateLimit?: number | undefined;
        } | undefined;
    }[] | undefined;
    allowedUsers?: string[] | undefined;
    allowedGroups?: string[] | undefined;
    deniedUsers?: string[] | undefined;
    isPublished?: boolean | undefined;
    publishInfo?: {
        terminalType?: "cloud" | "local" | undefined;
        serverPort?: number | undefined;
        serverUrl?: string | undefined;
        publishedAt?: string | undefined;
        serviceStatus?: "online" | "offline" | "error" | undefined;
        lastHeartbeat?: number | undefined;
    } | undefined;
    templateSource?: {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    } | undefined;
    lastUsedAt?: number | undefined;
}>;
type AgentConfig = z.infer<typeof agentConfigSchema>;
/**
 * 智能体列表查询选项
 */
declare const agentListOptionsSchema: z.ZodObject<{
    sortBy: z.ZodOptional<z.ZodEnum<["name", "createdAt", "updatedAt", "lastUsedAt"]>>;
    sortOrder: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    filterByMode: z.ZodOptional<z.ZodString>;
    onlyActive: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodOptional<z.ZodNumber>;
    offset: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    sortBy?: "name" | "createdAt" | "updatedAt" | "lastUsedAt" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    filterByMode?: string | undefined;
    onlyActive?: boolean | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
}, {
    sortBy?: "name" | "createdAt" | "updatedAt" | "lastUsedAt" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    filterByMode?: string | undefined;
    onlyActive?: boolean | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
}>;
type AgentListOptions = z.infer<typeof agentListOptionsSchema>;
/**
 * 智能体导出数据
 */
declare const agentExportDataSchema: z.ZodObject<{
    agent: z.ZodObject<{
        id: z.ZodString;
        userId: z.ZodString;
        name: z.ZodString;
        avatar: z.ZodString;
        roleDescription: z.ZodString;
        apiConfigId: z.ZodString;
        apiConfig: z.ZodOptional<z.ZodObject<{
            codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
            codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
            codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
            codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
            codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
            codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
            codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
            includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
            diffEnabled: z.ZodOptional<z.ZodBoolean>;
            todoListEnabled: z.ZodOptional<z.ZodBoolean>;
            fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
            modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
            consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
            enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
            reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
            modelMaxTokens: z.ZodOptional<z.ZodNumber>;
            modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            apiModelId: z.ZodOptional<z.ZodString>;
            ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
            ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
            fireworksApiKey: z.ZodOptional<z.ZodString>;
            zaiApiKey: z.ZodOptional<z.ZodString>;
            zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
            sambaNovaApiKey: z.ZodOptional<z.ZodString>;
            cerebrasApiKey: z.ZodOptional<z.ZodString>;
            litellmBaseUrl: z.ZodOptional<z.ZodString>;
            litellmApiKey: z.ZodOptional<z.ZodString>;
            litellmModelId: z.ZodOptional<z.ZodString>;
            litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
            chutesApiKey: z.ZodOptional<z.ZodString>;
            huggingFaceApiKey: z.ZodOptional<z.ZodString>;
            huggingFaceModelId: z.ZodOptional<z.ZodString>;
            huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
            groqApiKey: z.ZodOptional<z.ZodString>;
            xaiApiKey: z.ZodOptional<z.ZodString>;
            fakeAi: z.ZodOptional<z.ZodUnknown>;
            requestyBaseUrl: z.ZodOptional<z.ZodString>;
            requestyApiKey: z.ZodOptional<z.ZodString>;
            requestyModelId: z.ZodOptional<z.ZodString>;
            unboundApiKey: z.ZodOptional<z.ZodString>;
            unboundModelId: z.ZodOptional<z.ZodString>;
            moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
            moonshotApiKey: z.ZodOptional<z.ZodString>;
            doubaoBaseUrl: z.ZodOptional<z.ZodString>;
            doubaoApiKey: z.ZodOptional<z.ZodString>;
            deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
            deepSeekApiKey: z.ZodOptional<z.ZodString>;
            mistralApiKey: z.ZodOptional<z.ZodString>;
            mistralCodestralUrl: z.ZodOptional<z.ZodString>;
            openAiNativeApiKey: z.ZodOptional<z.ZodString>;
            openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
            geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
            geminiCliProjectId: z.ZodOptional<z.ZodString>;
            geminiApiKey: z.ZodOptional<z.ZodString>;
            googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
            enableUrlContext: z.ZodOptional<z.ZodBoolean>;
            enableGrounding: z.ZodOptional<z.ZodBoolean>;
            lmStudioModelId: z.ZodOptional<z.ZodString>;
            lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
            lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
            lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
            vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
                vendor: z.ZodOptional<z.ZodString>;
                family: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                id: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            }, {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            }>>;
            ollamaModelId: z.ZodOptional<z.ZodString>;
            ollamaBaseUrl: z.ZodOptional<z.ZodString>;
            openAiBaseUrl: z.ZodOptional<z.ZodString>;
            openAiApiKey: z.ZodOptional<z.ZodString>;
            openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
            openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
            openAiModelId: z.ZodOptional<z.ZodString>;
            openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                contextWindow: z.ZodNumber;
                supportsImages: z.ZodOptional<z.ZodBoolean>;
                supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
                supportsPromptCache: z.ZodBoolean;
                supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
                supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
                requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
                supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
                supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
                inputPrice: z.ZodOptional<z.ZodNumber>;
                outputPrice: z.ZodOptional<z.ZodNumber>;
                cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
                description: z.ZodOptional<z.ZodString>;
                modelType: z.ZodOptional<z.ZodString>;
                reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
                maxCachePoints: z.ZodOptional<z.ZodNumber>;
                cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    contextWindow: z.ZodNumber;
                    inputPrice: z.ZodOptional<z.ZodNumber>;
                    outputPrice: z.ZodOptional<z.ZodNumber>;
                    cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                    cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }, {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            }, {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            }>>>;
            openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
            azureApiVersion: z.ZodOptional<z.ZodString>;
            openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
            openAiHostHeader: z.ZodOptional<z.ZodString>;
            openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            vertexKeyFile: z.ZodOptional<z.ZodString>;
            vertexJsonCredentials: z.ZodOptional<z.ZodString>;
            vertexProjectId: z.ZodOptional<z.ZodString>;
            vertexRegion: z.ZodOptional<z.ZodString>;
            awsAccessKey: z.ZodOptional<z.ZodString>;
            awsSecretKey: z.ZodOptional<z.ZodString>;
            awsSessionToken: z.ZodOptional<z.ZodString>;
            awsRegion: z.ZodOptional<z.ZodString>;
            awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
            awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
            awsProfile: z.ZodOptional<z.ZodString>;
            awsUseProfile: z.ZodOptional<z.ZodBoolean>;
            awsApiKey: z.ZodOptional<z.ZodString>;
            awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
            awsCustomArn: z.ZodOptional<z.ZodString>;
            awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
            awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
            awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
            openRouterApiKey: z.ZodOptional<z.ZodString>;
            openRouterModelId: z.ZodOptional<z.ZodString>;
            openRouterBaseUrl: z.ZodOptional<z.ZodString>;
            openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
            openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
            glamaModelId: z.ZodOptional<z.ZodString>;
            glamaApiKey: z.ZodOptional<z.ZodString>;
            claudeCodePath: z.ZodOptional<z.ZodString>;
            claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
            apiKey: z.ZodOptional<z.ZodString>;
            anthropicBaseUrl: z.ZodOptional<z.ZodString>;
            anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
            anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
            apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        } & {
            originalId: z.ZodOptional<z.ZodString>;
            originalName: z.ZodOptional<z.ZodString>;
            createdAt: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            createdAt?: number | undefined;
            originalId?: string | undefined;
            originalName?: string | undefined;
        }, {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            createdAt?: number | undefined;
            originalId?: string | undefined;
            originalName?: string | undefined;
        }>>;
        mode: z.ZodString;
        tools: z.ZodArray<z.ZodObject<{
            toolId: z.ZodString;
            enabled: z.ZodBoolean;
            config: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            toolId: string;
            enabled: boolean;
            config?: Record<string, any> | undefined;
        }, {
            toolId: string;
            enabled: boolean;
            config?: Record<string, any> | undefined;
        }>, "many">;
        todos: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            content: z.ZodString;
            status: z.ZodEnum<["pending", "in_progress", "completed"]>;
            createdAt: z.ZodNumber;
            updatedAt: z.ZodNumber;
            priority: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        }, "strip", z.ZodTypeAny, {
            status: "pending" | "in_progress" | "completed";
            id: string;
            content: string;
            createdAt: number;
            updatedAt: number;
            priority?: "low" | "medium" | "high" | undefined;
        }, {
            status: "pending" | "in_progress" | "completed";
            id: string;
            content: string;
            createdAt: number;
            updatedAt: number;
            priority?: "low" | "medium" | "high" | undefined;
        }>, "many">;
        isPrivate: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        shareScope: z.ZodOptional<z.ZodEnum<["friends", "groups", "public"]>>;
        shareLevel: z.ZodOptional<z.ZodNumber>;
        a2aAgentCard: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            description: z.ZodString;
            skills: z.ZodArray<z.ZodString, "many">;
            url: z.ZodOptional<z.ZodString>;
            capabilities: z.ZodObject<{
                messageTypes: z.ZodArray<z.ZodString, "many">;
                taskTypes: z.ZodArray<z.ZodString, "many">;
                dataFormats: z.ZodArray<z.ZodString, "many">;
                maxConcurrency: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            }, {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            }>;
            deployment: z.ZodOptional<z.ZodObject<{
                type: z.ZodEnum<["pc", "cloud", "docker"]>;
                platform: z.ZodString;
                region: z.ZodOptional<z.ZodString>;
                networkReachable: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            }, {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            }>>;
            auth: z.ZodOptional<z.ZodObject<{
                apiKey: z.ZodOptional<z.ZodString>;
                authType: z.ZodEnum<["none", "apikey", "oauth"]>;
            }, "strip", z.ZodTypeAny, {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            }, {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            name: string;
            skills: string[];
            capabilities: {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            };
            url?: string | undefined;
            deployment?: {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            } | undefined;
            auth?: {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            } | undefined;
        }, {
            description: string;
            name: string;
            skills: string[];
            capabilities: {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            };
            url?: string | undefined;
            deployment?: {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            } | undefined;
            auth?: {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            } | undefined;
        }>>;
        a2aEndpoint: z.ZodOptional<z.ZodString>;
        permissions: z.ZodOptional<z.ZodArray<z.ZodObject<{
            action: z.ZodEnum<["read", "execute", "modify", "admin"]>;
            resource: z.ZodString;
            conditions: z.ZodOptional<z.ZodObject<{
                timeRange: z.ZodOptional<z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>>;
                ipRange: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                userAgent: z.ZodOptional<z.ZodString>;
                maxUsage: z.ZodOptional<z.ZodNumber>;
                rateLimit: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            }, {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            }>>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            action: "read" | "execute" | "modify" | "admin";
            resource: string;
            description?: string | undefined;
            conditions?: {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            } | undefined;
        }, {
            action: "read" | "execute" | "modify" | "admin";
            resource: string;
            description?: string | undefined;
            conditions?: {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            } | undefined;
        }>, "many">>;
        allowedUsers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        allowedGroups: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        deniedUsers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        isPublished: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        publishInfo: z.ZodOptional<z.ZodObject<{
            terminalType: z.ZodOptional<z.ZodEnum<["local", "cloud"]>>;
            serverPort: z.ZodOptional<z.ZodNumber>;
            serverUrl: z.ZodOptional<z.ZodString>;
            publishedAt: z.ZodOptional<z.ZodString>;
            serviceStatus: z.ZodOptional<z.ZodEnum<["online", "offline", "error"]>>;
            lastHeartbeat: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            terminalType?: "cloud" | "local" | undefined;
            serverPort?: number | undefined;
            serverUrl?: string | undefined;
            publishedAt?: string | undefined;
            serviceStatus?: "online" | "offline" | "error" | undefined;
            lastHeartbeat?: number | undefined;
        }, {
            terminalType?: "cloud" | "local" | undefined;
            serverPort?: number | undefined;
            serverUrl?: string | undefined;
            publishedAt?: string | undefined;
            serviceStatus?: "online" | "offline" | "error" | undefined;
            lastHeartbeat?: number | undefined;
        }>>;
        templateSource: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<["manual", "task"]>;
            taskId: z.ZodOptional<z.ZodString>;
            taskDescription: z.ZodOptional<z.ZodString>;
            timestamp: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            type: "manual" | "task";
            timestamp: number;
            taskId?: string | undefined;
            taskDescription?: string | undefined;
        }, {
            type: "manual" | "task";
            timestamp: number;
            taskId?: string | undefined;
            taskDescription?: string | undefined;
        }>>;
        createdAt: z.ZodNumber;
        updatedAt: z.ZodNumber;
        lastUsedAt: z.ZodOptional<z.ZodNumber>;
        isActive: z.ZodBoolean;
        version: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        version: number;
        createdAt: number;
        updatedAt: number;
        userId: string;
        avatar: string;
        roleDescription: string;
        apiConfigId: string;
        mode: string;
        tools: {
            toolId: string;
            enabled: boolean;
            config?: Record<string, any> | undefined;
        }[];
        todos: {
            status: "pending" | "in_progress" | "completed";
            id: string;
            content: string;
            createdAt: number;
            updatedAt: number;
            priority?: "low" | "medium" | "high" | undefined;
        }[];
        isPrivate: boolean;
        isPublished: boolean;
        isActive: boolean;
        apiConfig?: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            createdAt?: number | undefined;
            originalId?: string | undefined;
            originalName?: string | undefined;
        } | undefined;
        shareScope?: "friends" | "groups" | "public" | undefined;
        shareLevel?: number | undefined;
        a2aAgentCard?: {
            description: string;
            name: string;
            skills: string[];
            capabilities: {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            };
            url?: string | undefined;
            deployment?: {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            } | undefined;
            auth?: {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            } | undefined;
        } | undefined;
        a2aEndpoint?: string | undefined;
        permissions?: {
            action: "read" | "execute" | "modify" | "admin";
            resource: string;
            description?: string | undefined;
            conditions?: {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            } | undefined;
        }[] | undefined;
        allowedUsers?: string[] | undefined;
        allowedGroups?: string[] | undefined;
        deniedUsers?: string[] | undefined;
        publishInfo?: {
            terminalType?: "cloud" | "local" | undefined;
            serverPort?: number | undefined;
            serverUrl?: string | undefined;
            publishedAt?: string | undefined;
            serviceStatus?: "online" | "offline" | "error" | undefined;
            lastHeartbeat?: number | undefined;
        } | undefined;
        templateSource?: {
            type: "manual" | "task";
            timestamp: number;
            taskId?: string | undefined;
            taskDescription?: string | undefined;
        } | undefined;
        lastUsedAt?: number | undefined;
    }, {
        id: string;
        name: string;
        version: number;
        createdAt: number;
        updatedAt: number;
        userId: string;
        avatar: string;
        roleDescription: string;
        apiConfigId: string;
        mode: string;
        tools: {
            toolId: string;
            enabled: boolean;
            config?: Record<string, any> | undefined;
        }[];
        todos: {
            status: "pending" | "in_progress" | "completed";
            id: string;
            content: string;
            createdAt: number;
            updatedAt: number;
            priority?: "low" | "medium" | "high" | undefined;
        }[];
        isActive: boolean;
        apiConfig?: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            createdAt?: number | undefined;
            originalId?: string | undefined;
            originalName?: string | undefined;
        } | undefined;
        isPrivate?: boolean | undefined;
        shareScope?: "friends" | "groups" | "public" | undefined;
        shareLevel?: number | undefined;
        a2aAgentCard?: {
            description: string;
            name: string;
            skills: string[];
            capabilities: {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            };
            url?: string | undefined;
            deployment?: {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            } | undefined;
            auth?: {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            } | undefined;
        } | undefined;
        a2aEndpoint?: string | undefined;
        permissions?: {
            action: "read" | "execute" | "modify" | "admin";
            resource: string;
            description?: string | undefined;
            conditions?: {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            } | undefined;
        }[] | undefined;
        allowedUsers?: string[] | undefined;
        allowedGroups?: string[] | undefined;
        deniedUsers?: string[] | undefined;
        isPublished?: boolean | undefined;
        publishInfo?: {
            terminalType?: "cloud" | "local" | undefined;
            serverPort?: number | undefined;
            serverUrl?: string | undefined;
            publishedAt?: string | undefined;
            serviceStatus?: "online" | "offline" | "error" | undefined;
            lastHeartbeat?: number | undefined;
        } | undefined;
        templateSource?: {
            type: "manual" | "task";
            timestamp: number;
            taskId?: string | undefined;
            taskDescription?: string | undefined;
        } | undefined;
        lastUsedAt?: number | undefined;
    }>;
    metadata: z.ZodObject<{
        exportedAt: z.ZodNumber;
        exportedBy: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        exportedAt: number;
        exportedBy: string;
    }, {
        version: string;
        exportedAt: number;
        exportedBy: string;
    }>;
}, "strip", z.ZodTypeAny, {
    agent: {
        id: string;
        name: string;
        version: number;
        createdAt: number;
        updatedAt: number;
        userId: string;
        avatar: string;
        roleDescription: string;
        apiConfigId: string;
        mode: string;
        tools: {
            toolId: string;
            enabled: boolean;
            config?: Record<string, any> | undefined;
        }[];
        todos: {
            status: "pending" | "in_progress" | "completed";
            id: string;
            content: string;
            createdAt: number;
            updatedAt: number;
            priority?: "low" | "medium" | "high" | undefined;
        }[];
        isPrivate: boolean;
        isPublished: boolean;
        isActive: boolean;
        apiConfig?: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            createdAt?: number | undefined;
            originalId?: string | undefined;
            originalName?: string | undefined;
        } | undefined;
        shareScope?: "friends" | "groups" | "public" | undefined;
        shareLevel?: number | undefined;
        a2aAgentCard?: {
            description: string;
            name: string;
            skills: string[];
            capabilities: {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            };
            url?: string | undefined;
            deployment?: {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            } | undefined;
            auth?: {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            } | undefined;
        } | undefined;
        a2aEndpoint?: string | undefined;
        permissions?: {
            action: "read" | "execute" | "modify" | "admin";
            resource: string;
            description?: string | undefined;
            conditions?: {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            } | undefined;
        }[] | undefined;
        allowedUsers?: string[] | undefined;
        allowedGroups?: string[] | undefined;
        deniedUsers?: string[] | undefined;
        publishInfo?: {
            terminalType?: "cloud" | "local" | undefined;
            serverPort?: number | undefined;
            serverUrl?: string | undefined;
            publishedAt?: string | undefined;
            serviceStatus?: "online" | "offline" | "error" | undefined;
            lastHeartbeat?: number | undefined;
        } | undefined;
        templateSource?: {
            type: "manual" | "task";
            timestamp: number;
            taskId?: string | undefined;
            taskDescription?: string | undefined;
        } | undefined;
        lastUsedAt?: number | undefined;
    };
    metadata: {
        version: string;
        exportedAt: number;
        exportedBy: string;
    };
}, {
    agent: {
        id: string;
        name: string;
        version: number;
        createdAt: number;
        updatedAt: number;
        userId: string;
        avatar: string;
        roleDescription: string;
        apiConfigId: string;
        mode: string;
        tools: {
            toolId: string;
            enabled: boolean;
            config?: Record<string, any> | undefined;
        }[];
        todos: {
            status: "pending" | "in_progress" | "completed";
            id: string;
            content: string;
            createdAt: number;
            updatedAt: number;
            priority?: "low" | "medium" | "high" | undefined;
        }[];
        isActive: boolean;
        apiConfig?: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            createdAt?: number | undefined;
            originalId?: string | undefined;
            originalName?: string | undefined;
        } | undefined;
        isPrivate?: boolean | undefined;
        shareScope?: "friends" | "groups" | "public" | undefined;
        shareLevel?: number | undefined;
        a2aAgentCard?: {
            description: string;
            name: string;
            skills: string[];
            capabilities: {
                messageTypes: string[];
                taskTypes: string[];
                dataFormats: string[];
                maxConcurrency?: number | undefined;
            };
            url?: string | undefined;
            deployment?: {
                type: "pc" | "cloud" | "docker";
                platform: string;
                region?: string | undefined;
                networkReachable?: boolean | undefined;
            } | undefined;
            auth?: {
                authType: "none" | "apikey" | "oauth";
                apiKey?: string | undefined;
            } | undefined;
        } | undefined;
        a2aEndpoint?: string | undefined;
        permissions?: {
            action: "read" | "execute" | "modify" | "admin";
            resource: string;
            description?: string | undefined;
            conditions?: {
                timeRange?: [number, number] | undefined;
                ipRange?: string[] | undefined;
                userAgent?: string | undefined;
                maxUsage?: number | undefined;
                rateLimit?: number | undefined;
            } | undefined;
        }[] | undefined;
        allowedUsers?: string[] | undefined;
        allowedGroups?: string[] | undefined;
        deniedUsers?: string[] | undefined;
        isPublished?: boolean | undefined;
        publishInfo?: {
            terminalType?: "cloud" | "local" | undefined;
            serverPort?: number | undefined;
            serverUrl?: string | undefined;
            publishedAt?: string | undefined;
            serviceStatus?: "online" | "offline" | "error" | undefined;
            lastHeartbeat?: number | undefined;
        } | undefined;
        templateSource?: {
            type: "manual" | "task";
            timestamp: number;
            taskId?: string | undefined;
            taskDescription?: string | undefined;
        } | undefined;
        lastUsedAt?: number | undefined;
    };
    metadata: {
        version: string;
        exportedAt: number;
        exportedBy: string;
    };
}>;
type AgentExportData = z.infer<typeof agentExportDataSchema>;
/**
 * 智能体模板数据（用于从任务创建智能体）
 */
declare const agentTemplateDataSchema: z.ZodObject<{
    apiConfigId: z.ZodOptional<z.ZodString>;
    mode: z.ZodOptional<z.ZodString>;
    tools: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    templateSource: z.ZodObject<{
        type: z.ZodEnum<["manual", "task"]>;
        taskId: z.ZodOptional<z.ZodString>;
        taskDescription: z.ZodOptional<z.ZodString>;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    }, {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    templateSource: {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    };
    apiConfigId?: string | undefined;
    mode?: string | undefined;
    tools?: string[] | undefined;
}, {
    templateSource: {
        type: "manual" | "task";
        timestamp: number;
        taskId?: string | undefined;
        taskDescription?: string | undefined;
    };
    apiConfigId?: string | undefined;
    mode?: string | undefined;
    tools?: string[] | undefined;
}>;
type AgentTemplateData = z.infer<typeof agentTemplateDataSchema>;
/**
 * 资源配额定义（用于后台运行）
 */
declare const resourceQuotaSchema: z.ZodObject<{
    maxMemory: z.ZodNumber;
    maxCpuTime: z.ZodNumber;
    maxFileOperations: z.ZodNumber;
    maxNetworkRequests: z.ZodNumber;
    maxExecutionTime: z.ZodNumber;
    workspaceAccess: z.ZodObject<{
        readOnly: z.ZodBoolean;
        allowedPaths: z.ZodArray<z.ZodString, "many">;
        deniedPaths: z.ZodArray<z.ZodString, "many">;
        tempDirectory: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        readOnly: boolean;
        allowedPaths: string[];
        deniedPaths: string[];
        tempDirectory: string;
    }, {
        readOnly: boolean;
        allowedPaths: string[];
        deniedPaths: string[];
        tempDirectory: string;
    }>;
}, "strip", z.ZodTypeAny, {
    maxMemory: number;
    maxCpuTime: number;
    maxFileOperations: number;
    maxNetworkRequests: number;
    maxExecutionTime: number;
    workspaceAccess: {
        readOnly: boolean;
        allowedPaths: string[];
        deniedPaths: string[];
        tempDirectory: string;
    };
}, {
    maxMemory: number;
    maxCpuTime: number;
    maxFileOperations: number;
    maxNetworkRequests: number;
    maxExecutionTime: number;
    workspaceAccess: {
        readOnly: boolean;
        allowedPaths: string[];
        deniedPaths: string[];
        tempDirectory: string;
    };
}>;
type ResourceQuota = z.infer<typeof resourceQuotaSchema>;
/**
 * 资源使用情况
 */
declare const resourceUsageSchema: z.ZodObject<{
    memory: z.ZodNumber;
    cpuTime: z.ZodNumber;
    fileOperations: z.ZodNumber;
    networkRequests: z.ZodNumber;
    startTime: z.ZodNumber;
    lastUpdate: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    memory: number;
    cpuTime: number;
    fileOperations: number;
    networkRequests: number;
    startTime: number;
    lastUpdate: number;
}, {
    memory: number;
    cpuTime: number;
    fileOperations: number;
    networkRequests: number;
    startTime: number;
    lastUpdate: number;
}>;
type ResourceUsage = z.infer<typeof resourceUsageSchema>;
/**
 * 智能体实例定义（运行时环境相关）
 */
declare const agentInstanceSchema: z.ZodObject<{
    agentId: z.ZodString;
    instanceId: z.ZodString;
    userId: z.ZodString;
    deployment: z.ZodObject<{
        type: z.ZodEnum<["pc", "cloud", "docker", "k8s"]>;
        platform: z.ZodString;
        location: z.ZodOptional<z.ZodString>;
        version: z.ZodString;
        region: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "pc" | "cloud" | "docker" | "k8s";
        version: string;
        platform: string;
        region?: string | undefined;
        location?: string | undefined;
    }, {
        type: "pc" | "cloud" | "docker" | "k8s";
        version: string;
        platform: string;
        region?: string | undefined;
        location?: string | undefined;
    }>;
    endpoint: z.ZodObject<{
        type: z.ZodEnum<["local_only", "network_reachable", "hybrid"]>;
        direct: z.ZodOptional<z.ZodObject<{
            url: z.ZodString;
            protocol: z.ZodEnum<["http", "https"]>;
            port: z.ZodOptional<z.ZodNumber>;
            apiKey: z.ZodOptional<z.ZodString>;
            healthCheckPath: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            protocol: "http" | "https";
            healthCheckPath: string;
            apiKey?: string | undefined;
            port?: number | undefined;
        }, {
            url: string;
            protocol: "http" | "https";
            healthCheckPath: string;
            apiKey?: string | undefined;
            port?: number | undefined;
        }>>;
        imBridge: z.ZodObject<{
            proxyId: z.ZodString;
            channelId: z.ZodOptional<z.ZodString>;
            priority: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            priority: number;
            proxyId: string;
            channelId?: string | undefined;
        }, {
            priority: number;
            proxyId: string;
            channelId?: string | undefined;
        }>;
        networkReachable: z.ZodOptional<z.ZodBoolean>;
        lastProbeTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "local_only" | "network_reachable" | "hybrid";
        imBridge: {
            priority: number;
            proxyId: string;
            channelId?: string | undefined;
        };
        networkReachable?: boolean | undefined;
        direct?: {
            url: string;
            protocol: "http" | "https";
            healthCheckPath: string;
            apiKey?: string | undefined;
            port?: number | undefined;
        } | undefined;
        lastProbeTime?: number | undefined;
    }, {
        type: "local_only" | "network_reachable" | "hybrid";
        imBridge: {
            priority: number;
            proxyId: string;
            channelId?: string | undefined;
        };
        networkReachable?: boolean | undefined;
        direct?: {
            url: string;
            protocol: "http" | "https";
            healthCheckPath: string;
            apiKey?: string | undefined;
            port?: number | undefined;
        } | undefined;
        lastProbeTime?: number | undefined;
    }>;
    status: z.ZodObject<{
        state: z.ZodEnum<["starting", "online", "offline", "error", "maintenance"]>;
        startTime: z.ZodNumber;
        lastSeen: z.ZodNumber;
        currentLoad: z.ZodNumber;
        errorCount: z.ZodNumber;
        errorRate: z.ZodNumber;
        uptime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        startTime: number;
        state: "online" | "offline" | "error" | "starting" | "maintenance";
        lastSeen: number;
        currentLoad: number;
        errorCount: number;
        errorRate: number;
        uptime: number;
    }, {
        startTime: number;
        state: "online" | "offline" | "error" | "starting" | "maintenance";
        lastSeen: number;
        currentLoad: number;
        errorCount: number;
        errorRate: number;
        uptime: number;
    }>;
    metrics: z.ZodObject<{
        avgResponseTime: z.ZodNumber;
        successRate: z.ZodNumber;
        throughput: z.ZodNumber;
        memoryUsage: z.ZodOptional<z.ZodNumber>;
        cpuUsage: z.ZodOptional<z.ZodNumber>;
        lastUpdate: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        lastUpdate: number;
        avgResponseTime: number;
        successRate: number;
        throughput: number;
        memoryUsage?: number | undefined;
        cpuUsage?: number | undefined;
    }, {
        lastUpdate: number;
        avgResponseTime: number;
        successRate: number;
        throughput: number;
        memoryUsage?: number | undefined;
        cpuUsage?: number | undefined;
    }>;
    resourceQuota: z.ZodOptional<z.ZodObject<{
        maxMemory: z.ZodNumber;
        maxCpuTime: z.ZodNumber;
        maxFileOperations: z.ZodNumber;
        maxNetworkRequests: z.ZodNumber;
        maxExecutionTime: z.ZodNumber;
        workspaceAccess: z.ZodObject<{
            readOnly: z.ZodBoolean;
            allowedPaths: z.ZodArray<z.ZodString, "many">;
            deniedPaths: z.ZodArray<z.ZodString, "many">;
            tempDirectory: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            readOnly: boolean;
            allowedPaths: string[];
            deniedPaths: string[];
            tempDirectory: string;
        }, {
            readOnly: boolean;
            allowedPaths: string[];
            deniedPaths: string[];
            tempDirectory: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        maxMemory: number;
        maxCpuTime: number;
        maxFileOperations: number;
        maxNetworkRequests: number;
        maxExecutionTime: number;
        workspaceAccess: {
            readOnly: boolean;
            allowedPaths: string[];
            deniedPaths: string[];
            tempDirectory: string;
        };
    }, {
        maxMemory: number;
        maxCpuTime: number;
        maxFileOperations: number;
        maxNetworkRequests: number;
        maxExecutionTime: number;
        workspaceAccess: {
            readOnly: boolean;
            allowedPaths: string[];
            deniedPaths: string[];
            tempDirectory: string;
        };
    }>>;
    metadata: z.ZodObject<{
        createdAt: z.ZodNumber;
        updatedAt: z.ZodNumber;
        version: z.ZodNumber;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        version: number;
        createdAt: number;
        updatedAt: number;
        tags?: string[] | undefined;
    }, {
        version: number;
        createdAt: number;
        updatedAt: number;
        tags?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: {
        startTime: number;
        state: "online" | "offline" | "error" | "starting" | "maintenance";
        lastSeen: number;
        currentLoad: number;
        errorCount: number;
        errorRate: number;
        uptime: number;
    };
    deployment: {
        type: "pc" | "cloud" | "docker" | "k8s";
        version: string;
        platform: string;
        region?: string | undefined;
        location?: string | undefined;
    };
    userId: string;
    metadata: {
        version: number;
        createdAt: number;
        updatedAt: number;
        tags?: string[] | undefined;
    };
    agentId: string;
    instanceId: string;
    endpoint: {
        type: "local_only" | "network_reachable" | "hybrid";
        imBridge: {
            priority: number;
            proxyId: string;
            channelId?: string | undefined;
        };
        networkReachable?: boolean | undefined;
        direct?: {
            url: string;
            protocol: "http" | "https";
            healthCheckPath: string;
            apiKey?: string | undefined;
            port?: number | undefined;
        } | undefined;
        lastProbeTime?: number | undefined;
    };
    metrics: {
        lastUpdate: number;
        avgResponseTime: number;
        successRate: number;
        throughput: number;
        memoryUsage?: number | undefined;
        cpuUsage?: number | undefined;
    };
    resourceQuota?: {
        maxMemory: number;
        maxCpuTime: number;
        maxFileOperations: number;
        maxNetworkRequests: number;
        maxExecutionTime: number;
        workspaceAccess: {
            readOnly: boolean;
            allowedPaths: string[];
            deniedPaths: string[];
            tempDirectory: string;
        };
    } | undefined;
}, {
    status: {
        startTime: number;
        state: "online" | "offline" | "error" | "starting" | "maintenance";
        lastSeen: number;
        currentLoad: number;
        errorCount: number;
        errorRate: number;
        uptime: number;
    };
    deployment: {
        type: "pc" | "cloud" | "docker" | "k8s";
        version: string;
        platform: string;
        region?: string | undefined;
        location?: string | undefined;
    };
    userId: string;
    metadata: {
        version: number;
        createdAt: number;
        updatedAt: number;
        tags?: string[] | undefined;
    };
    agentId: string;
    instanceId: string;
    endpoint: {
        type: "local_only" | "network_reachable" | "hybrid";
        imBridge: {
            priority: number;
            proxyId: string;
            channelId?: string | undefined;
        };
        networkReachable?: boolean | undefined;
        direct?: {
            url: string;
            protocol: "http" | "https";
            healthCheckPath: string;
            apiKey?: string | undefined;
            port?: number | undefined;
        } | undefined;
        lastProbeTime?: number | undefined;
    };
    metrics: {
        lastUpdate: number;
        avgResponseTime: number;
        successRate: number;
        throughput: number;
        memoryUsage?: number | undefined;
        cpuUsage?: number | undefined;
    };
    resourceQuota?: {
        maxMemory: number;
        maxCpuTime: number;
        maxFileOperations: number;
        maxNetworkRequests: number;
        maxExecutionTime: number;
        workspaceAccess: {
            readOnly: boolean;
            allowedPaths: string[];
            deniedPaths: string[];
            tempDirectory: string;
        };
    } | undefined;
}>;
type AgentInstance = z.infer<typeof agentInstanceSchema>;
/**
 * A2A 通信相关类型
 */
declare const agentRequestSchema: z.ZodObject<{
    method: z.ZodString;
    params: z.ZodAny;
    timeout: z.ZodOptional<z.ZodNumber>;
    priority: z.ZodOptional<z.ZodEnum<["low", "normal", "high"]>>;
    retries: z.ZodOptional<z.ZodNumber>;
    sourceAgentId: z.ZodOptional<z.ZodString>;
    sourceUserId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    method: string;
    params?: any;
    priority?: "low" | "high" | "normal" | undefined;
    timeout?: number | undefined;
    retries?: number | undefined;
    sourceAgentId?: string | undefined;
    sourceUserId?: string | undefined;
}, {
    method: string;
    params?: any;
    priority?: "low" | "high" | "normal" | undefined;
    timeout?: number | undefined;
    retries?: number | undefined;
    sourceAgentId?: string | undefined;
    sourceUserId?: string | undefined;
}>;
type AgentRequest = z.infer<typeof agentRequestSchema>;
declare const agentResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    data: z.ZodOptional<z.ZodAny>;
    error: z.ZodOptional<z.ZodString>;
    agentId: z.ZodString;
    route: z.ZodOptional<z.ZodEnum<["direct", "im_bridge", "hybrid"]>>;
    timestamp: z.ZodNumber;
    duration: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    timestamp: number;
    agentId: string;
    success: boolean;
    duration?: number | undefined;
    error?: string | undefined;
    data?: any;
    route?: "hybrid" | "direct" | "im_bridge" | undefined;
}, {
    timestamp: number;
    agentId: string;
    success: boolean;
    duration?: number | undefined;
    error?: string | undefined;
    data?: any;
    route?: "hybrid" | "direct" | "im_bridge" | undefined;
}>;
type AgentResponse = z.infer<typeof agentResponseSchema>;
/**
 * 智能体端点定义
 */
declare const agentEndpointSchema: z.ZodObject<{
    agentId: z.ZodString;
    userId: z.ZodString;
    type: z.ZodEnum<["local_only", "network_reachable", "hybrid"]>;
    directUrl: z.ZodOptional<z.ZodString>;
    apiKey: z.ZodOptional<z.ZodString>;
    imProxyId: z.ZodString;
    networkReachable: z.ZodOptional<z.ZodBoolean>;
    lastProbeTime: z.ZodOptional<z.ZodNumber>;
    status: z.ZodObject<{
        state: z.ZodEnum<["online", "offline", "busy", "error"]>;
        lastSeen: z.ZodNumber;
        currentLoad: z.ZodNumber;
        errorRate: z.ZodNumber;
        avgResponseTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        state: "online" | "offline" | "error" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    }, {
        state: "online" | "offline" | "error" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    }>;
    deploymentType: z.ZodEnum<["pc", "cloud", "docker", "serverless"]>;
}, "strip", z.ZodTypeAny, {
    type: "local_only" | "network_reachable" | "hybrid";
    status: {
        state: "online" | "offline" | "error" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    };
    userId: string;
    agentId: string;
    imProxyId: string;
    deploymentType: "pc" | "cloud" | "docker" | "serverless";
    apiKey?: string | undefined;
    networkReachable?: boolean | undefined;
    lastProbeTime?: number | undefined;
    directUrl?: string | undefined;
}, {
    type: "local_only" | "network_reachable" | "hybrid";
    status: {
        state: "online" | "offline" | "error" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    };
    userId: string;
    agentId: string;
    imProxyId: string;
    deploymentType: "pc" | "cloud" | "docker" | "serverless";
    apiKey?: string | undefined;
    networkReachable?: boolean | undefined;
    lastProbeTime?: number | undefined;
    directUrl?: string | undefined;
}>;
type AgentEndpoint = z.infer<typeof agentEndpointSchema>;
/**
 * 智能体发现查询
 */
declare const agentDiscoveryQuerySchema: z.ZodObject<{
    userId: z.ZodString;
    capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    categories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    deploymentTypes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    regions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    keywords: z.ZodOptional<z.ZodString>;
    onlyOnline: z.ZodOptional<z.ZodBoolean>;
    visibility: z.ZodOptional<z.ZodEnum<["private", "friends", "groups", "public", "all"]>>;
    shareScope: z.ZodOptional<z.ZodEnum<["friends", "groups", "public"]>>;
    shareLevel: z.ZodOptional<z.ZodNumber>;
    sortBy: z.ZodOptional<z.ZodEnum<["relevance", "performance", "popularity", "rating"]>>;
    sortOrder: z.ZodOptional<z.ZodEnum<["asc", "desc"]>>;
    offset: z.ZodOptional<z.ZodNumber>;
    limit: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    userId: string;
    capabilities?: string[] | undefined;
    shareScope?: "friends" | "groups" | "public" | undefined;
    shareLevel?: number | undefined;
    sortBy?: "relevance" | "performance" | "popularity" | "rating" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    tags?: string[] | undefined;
    categories?: string[] | undefined;
    deploymentTypes?: string[] | undefined;
    regions?: string[] | undefined;
    keywords?: string | undefined;
    onlyOnline?: boolean | undefined;
    visibility?: "friends" | "groups" | "public" | "private" | "all" | undefined;
}, {
    userId: string;
    capabilities?: string[] | undefined;
    shareScope?: "friends" | "groups" | "public" | undefined;
    shareLevel?: number | undefined;
    sortBy?: "relevance" | "performance" | "popularity" | "rating" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    tags?: string[] | undefined;
    categories?: string[] | undefined;
    deploymentTypes?: string[] | undefined;
    regions?: string[] | undefined;
    keywords?: string | undefined;
    onlyOnline?: boolean | undefined;
    visibility?: "friends" | "groups" | "public" | "private" | "all" | undefined;
}>;
type AgentDiscoveryQuery = z.infer<typeof agentDiscoveryQuerySchema>;
/**
 * 智能体发现结果
 */
declare const agentDiscoveryResultSchema: z.ZodObject<{
    agentId: z.ZodString;
    userId: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    avatar: z.ZodString;
    matchedCapabilities: z.ZodArray<z.ZodString, "many">;
    relevanceScore: z.ZodNumber;
    deploymentType: z.ZodEnum<["pc", "cloud", "docker", "serverless"]>;
    region: z.ZodOptional<z.ZodString>;
    endpointType: z.ZodEnum<["local_only", "network_reachable", "hybrid"]>;
    currentLoad: z.ZodNumber;
    avgResponseTime: z.ZodNumber;
    errorRate: z.ZodNumber;
    availability: z.ZodNumber;
    totalCalls: z.ZodNumber;
    successRate: z.ZodNumber;
    rating: z.ZodOptional<z.ZodNumber>;
    isPrivate: z.ZodBoolean;
    hasAccess: z.ZodBoolean;
    category: z.ZodOptional<z.ZodString>;
    tags: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodNumber;
    lastUsed: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    description: string;
    name: string;
    createdAt: number;
    userId: string;
    avatar: string;
    isPrivate: boolean;
    agentId: string;
    currentLoad: number;
    errorRate: number;
    avgResponseTime: number;
    successRate: number;
    tags: string[];
    deploymentType: "pc" | "cloud" | "docker" | "serverless";
    matchedCapabilities: string[];
    relevanceScore: number;
    endpointType: "local_only" | "network_reachable" | "hybrid";
    availability: number;
    totalCalls: number;
    hasAccess: boolean;
    region?: string | undefined;
    rating?: number | undefined;
    category?: string | undefined;
    lastUsed?: number | undefined;
}, {
    description: string;
    name: string;
    createdAt: number;
    userId: string;
    avatar: string;
    isPrivate: boolean;
    agentId: string;
    currentLoad: number;
    errorRate: number;
    avgResponseTime: number;
    successRate: number;
    tags: string[];
    deploymentType: "pc" | "cloud" | "docker" | "serverless";
    matchedCapabilities: string[];
    relevanceScore: number;
    endpointType: "local_only" | "network_reachable" | "hybrid";
    availability: number;
    totalCalls: number;
    hasAccess: boolean;
    region?: string | undefined;
    rating?: number | undefined;
    category?: string | undefined;
    lastUsed?: number | undefined;
}>;
type AgentDiscoveryResult = z.infer<typeof agentDiscoveryResultSchema>;
/**
 * 统一智能体注册中心条目
 */
declare const unifiedAgentRegistrySchema: z.ZodObject<{
    agentId: z.ZodString;
    userId: z.ZodString;
    name: z.ZodString;
    avatar: z.ZodString;
    description: z.ZodString;
    capabilities: z.ZodObject<{
        tools: z.ZodArray<z.ZodString, "many">;
        skills: z.ZodArray<z.ZodString, "many">;
        categories: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        skills: string[];
        tools: string[];
        categories: string[];
    }, {
        skills: string[];
        tools: string[];
        categories: string[];
    }>;
    deployment: z.ZodObject<{
        type: z.ZodEnum<["pc", "cloud", "docker", "serverless"]>;
        region: z.ZodOptional<z.ZodString>;
        endpointType: z.ZodEnum<["local_only", "network_reachable", "hybrid"]>;
        directUrl: z.ZodOptional<z.ZodString>;
        imProxyId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "pc" | "cloud" | "docker" | "serverless";
        endpointType: "local_only" | "network_reachable" | "hybrid";
        region?: string | undefined;
        directUrl?: string | undefined;
        imProxyId?: string | undefined;
    }, {
        type: "pc" | "cloud" | "docker" | "serverless";
        endpointType: "local_only" | "network_reachable" | "hybrid";
        region?: string | undefined;
        directUrl?: string | undefined;
        imProxyId?: string | undefined;
    }>;
    status: z.ZodObject<{
        state: z.ZodEnum<["online", "offline", "busy", "maintenance"]>;
        lastSeen: z.ZodNumber;
        currentLoad: z.ZodNumber;
        errorRate: z.ZodNumber;
        avgResponseTime: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        state: "online" | "offline" | "maintenance" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    }, {
        state: "online" | "offline" | "maintenance" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    }>;
    sharing: z.ZodObject<{
        isPrivate: z.ZodBoolean;
        shareScope: z.ZodEnum<["none", "friends", "groups", "public"]>;
        shareLevel: z.ZodNumber;
        permissions: z.ZodArray<z.ZodEnum<["read", "execute", "modify"]>, "many">;
        allowedUsers: z.ZodArray<z.ZodString, "many">;
        allowedGroups: z.ZodArray<z.ZodString, "many">;
        deniedUsers: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        isPrivate: boolean;
        shareScope: "none" | "friends" | "groups" | "public";
        shareLevel: number;
        permissions: ("read" | "execute" | "modify")[];
        allowedUsers: string[];
        allowedGroups: string[];
        deniedUsers: string[];
    }, {
        isPrivate: boolean;
        shareScope: "none" | "friends" | "groups" | "public";
        shareLevel: number;
        permissions: ("read" | "execute" | "modify")[];
        allowedUsers: string[];
        allowedGroups: string[];
        deniedUsers: string[];
    }>;
    metadata: z.ZodObject<{
        createdAt: z.ZodNumber;
        updatedAt: z.ZodNumber;
        version: z.ZodString;
        tags: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        version: string;
        createdAt: number;
        updatedAt: number;
        tags: string[];
    }, {
        version: string;
        createdAt: number;
        updatedAt: number;
        tags: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    status: {
        state: "online" | "offline" | "maintenance" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    };
    description: string;
    name: string;
    capabilities: {
        skills: string[];
        tools: string[];
        categories: string[];
    };
    deployment: {
        type: "pc" | "cloud" | "docker" | "serverless";
        endpointType: "local_only" | "network_reachable" | "hybrid";
        region?: string | undefined;
        directUrl?: string | undefined;
        imProxyId?: string | undefined;
    };
    userId: string;
    avatar: string;
    metadata: {
        version: string;
        createdAt: number;
        updatedAt: number;
        tags: string[];
    };
    agentId: string;
    sharing: {
        isPrivate: boolean;
        shareScope: "none" | "friends" | "groups" | "public";
        shareLevel: number;
        permissions: ("read" | "execute" | "modify")[];
        allowedUsers: string[];
        allowedGroups: string[];
        deniedUsers: string[];
    };
}, {
    status: {
        state: "online" | "offline" | "maintenance" | "busy";
        lastSeen: number;
        currentLoad: number;
        errorRate: number;
        avgResponseTime: number;
    };
    description: string;
    name: string;
    capabilities: {
        skills: string[];
        tools: string[];
        categories: string[];
    };
    deployment: {
        type: "pc" | "cloud" | "docker" | "serverless";
        endpointType: "local_only" | "network_reachable" | "hybrid";
        region?: string | undefined;
        directUrl?: string | undefined;
        imProxyId?: string | undefined;
    };
    userId: string;
    avatar: string;
    metadata: {
        version: string;
        createdAt: number;
        updatedAt: number;
        tags: string[];
    };
    agentId: string;
    sharing: {
        isPrivate: boolean;
        shareScope: "none" | "friends" | "groups" | "public";
        shareLevel: number;
        permissions: ("read" | "execute" | "modify")[];
        allowedUsers: string[];
        allowedGroups: string[];
        deniedUsers: string[];
    };
}>;
type UnifiedAgentRegistry = z.infer<typeof unifiedAgentRegistrySchema>;

/**
 * RooCodeEventName
 */
declare enum RooCodeEventName {
    TaskCreated = "taskCreated",
    TaskStarted = "taskStarted",
    TaskCompleted = "taskCompleted",
    TaskAborted = "taskAborted",
    TaskFocused = "taskFocused",
    TaskUnfocused = "taskUnfocused",
    TaskActive = "taskActive",
    TaskIdle = "taskIdle",
    TaskPaused = "taskPaused",
    TaskUnpaused = "taskUnpaused",
    TaskSpawned = "taskSpawned",
    Message = "message",
    TaskModeSwitched = "taskModeSwitched",
    TaskAskResponded = "taskAskResponded",
    TaskTokenUsageUpdated = "taskTokenUsageUpdated",
    TaskToolFailed = "taskToolFailed",
    EvalPass = "evalPass",
    EvalFail = "evalFail"
}
/**
 * RooCodeEvents
 */
declare const rooCodeEventsSchema: z.ZodObject<{
    taskCreated: z.ZodTuple<[z.ZodString], null>;
    taskStarted: z.ZodTuple<[z.ZodString], null>;
    taskCompleted: z.ZodTuple<[z.ZodString, z.ZodObject<{
        totalTokensIn: z.ZodNumber;
        totalTokensOut: z.ZodNumber;
        totalCacheWrites: z.ZodOptional<z.ZodNumber>;
        totalCacheReads: z.ZodOptional<z.ZodNumber>;
        totalCost: z.ZodNumber;
        contextTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }>, z.ZodRecord<z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodObject<{
        attempts: z.ZodNumber;
        failures: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        attempts: number;
        failures: number;
    }, {
        attempts: number;
        failures: number;
    }>>, z.ZodObject<{
        isSubtask: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isSubtask: boolean;
    }, {
        isSubtask: boolean;
    }>], null>;
    taskAborted: z.ZodTuple<[z.ZodString], null>;
    taskFocused: z.ZodTuple<[z.ZodString], null>;
    taskUnfocused: z.ZodTuple<[z.ZodString], null>;
    taskActive: z.ZodTuple<[z.ZodString], null>;
    taskIdle: z.ZodTuple<[z.ZodString], null>;
    taskPaused: z.ZodTuple<[z.ZodString], null>;
    taskUnpaused: z.ZodTuple<[z.ZodString], null>;
    taskSpawned: z.ZodTuple<[z.ZodString, z.ZodString], null>;
    message: z.ZodTuple<[z.ZodObject<{
        taskId: z.ZodString;
        action: z.ZodUnion<[z.ZodLiteral<"created">, z.ZodLiteral<"updated">]>;
        message: z.ZodObject<{
            ts: z.ZodNumber;
            type: z.ZodUnion<[z.ZodLiteral<"ask">, z.ZodLiteral<"say">]>;
            ask: z.ZodOptional<z.ZodEnum<["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"]>>;
            say: z.ZodOptional<z.ZodEnum<["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"]>>;
            text: z.ZodOptional<z.ZodString>;
            images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            partial: z.ZodOptional<z.ZodBoolean>;
            reasoning: z.ZodOptional<z.ZodString>;
            conversationHistoryIndex: z.ZodOptional<z.ZodNumber>;
            checkpoint: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            progressStatus: z.ZodOptional<z.ZodObject<{
                icon: z.ZodOptional<z.ZodString>;
                text: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                text?: string | undefined;
                icon?: string | undefined;
            }, {
                text?: string | undefined;
                icon?: string | undefined;
            }>>;
            contextCondense: z.ZodOptional<z.ZodObject<{
                cost: z.ZodNumber;
                prevContextTokens: z.ZodNumber;
                newContextTokens: z.ZodNumber;
                summary: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            }, {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            }>>;
            isProtected: z.ZodOptional<z.ZodBoolean>;
            apiProtocol: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"openai">, z.ZodLiteral<"anthropic">]>>;
            metadata: z.ZodOptional<z.ZodObject<{
                gpt5: z.ZodOptional<z.ZodObject<{
                    previous_response_id: z.ZodOptional<z.ZodString>;
                    instructions: z.ZodOptional<z.ZodString>;
                    reasoning_summary: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                }, {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                }>>;
                taskId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            }, {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        }, {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }, {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }>], null>;
    taskModeSwitched: z.ZodTuple<[z.ZodString, z.ZodString], null>;
    taskAskResponded: z.ZodTuple<[z.ZodString], null>;
    taskToolFailed: z.ZodTuple<[z.ZodString, z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodString], null>;
    taskTokenUsageUpdated: z.ZodTuple<[z.ZodString, z.ZodObject<{
        totalTokensIn: z.ZodNumber;
        totalTokensOut: z.ZodNumber;
        totalCacheWrites: z.ZodOptional<z.ZodNumber>;
        totalCacheReads: z.ZodOptional<z.ZodNumber>;
        totalCost: z.ZodNumber;
        contextTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }>], null>;
}, "strip", z.ZodTypeAny, {
    taskCreated: [string];
    taskStarted: [string];
    taskCompleted: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
        attempts: number;
        failures: number;
    }>>, {
        isSubtask: boolean;
    }];
    taskAborted: [string];
    taskFocused: [string];
    taskUnfocused: [string];
    taskActive: [string];
    taskIdle: [string];
    taskPaused: [string];
    taskUnpaused: [string];
    taskSpawned: [string, string];
    message: [{
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }];
    taskModeSwitched: [string, string];
    taskAskResponded: [string];
    taskTokenUsageUpdated: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }];
    taskToolFailed: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
}, {
    taskCreated: [string];
    taskStarted: [string];
    taskCompleted: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
        attempts: number;
        failures: number;
    }>>, {
        isSubtask: boolean;
    }];
    taskAborted: [string];
    taskFocused: [string];
    taskUnfocused: [string];
    taskActive: [string];
    taskIdle: [string];
    taskPaused: [string];
    taskUnpaused: [string];
    taskSpawned: [string, string];
    message: [{
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }];
    taskModeSwitched: [string, string];
    taskAskResponded: [string];
    taskTokenUsageUpdated: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }];
    taskToolFailed: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
}>;
type RooCodeEvents = z.infer<typeof rooCodeEventsSchema>;
/**
 * TaskEvent
 */
declare const taskEventSchema: z.ZodDiscriminatedUnion<"eventName", [z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskCreated>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskCreated;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskCreated;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskStarted>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskStarted;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskStarted;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskCompleted>;
    payload: z.ZodTuple<[z.ZodString, z.ZodObject<{
        totalTokensIn: z.ZodNumber;
        totalTokensOut: z.ZodNumber;
        totalCacheWrites: z.ZodOptional<z.ZodNumber>;
        totalCacheReads: z.ZodOptional<z.ZodNumber>;
        totalCost: z.ZodNumber;
        contextTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }>, z.ZodRecord<z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodObject<{
        attempts: z.ZodNumber;
        failures: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        attempts: number;
        failures: number;
    }, {
        attempts: number;
        failures: number;
    }>>, z.ZodObject<{
        isSubtask: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        isSubtask: boolean;
    }, {
        isSubtask: boolean;
    }>], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskCompleted;
    payload: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
        attempts: number;
        failures: number;
    }>>, {
        isSubtask: boolean;
    }];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskCompleted;
    payload: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
        attempts: number;
        failures: number;
    }>>, {
        isSubtask: boolean;
    }];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskAborted>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskAborted;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskAborted;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskFocused>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskFocused;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskFocused;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskUnfocused>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskUnfocused;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskUnfocused;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskActive>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskActive;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskActive;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskIdle>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskIdle;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskIdle;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskPaused>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskPaused;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskPaused;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskUnpaused>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskUnpaused;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskUnpaused;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskSpawned>;
    payload: z.ZodTuple<[z.ZodString, z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskSpawned;
    payload: [string, string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskSpawned;
    payload: [string, string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.Message>;
    payload: z.ZodTuple<[z.ZodObject<{
        taskId: z.ZodString;
        action: z.ZodUnion<[z.ZodLiteral<"created">, z.ZodLiteral<"updated">]>;
        message: z.ZodObject<{
            ts: z.ZodNumber;
            type: z.ZodUnion<[z.ZodLiteral<"ask">, z.ZodLiteral<"say">]>;
            ask: z.ZodOptional<z.ZodEnum<["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"]>>;
            say: z.ZodOptional<z.ZodEnum<["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"]>>;
            text: z.ZodOptional<z.ZodString>;
            images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            partial: z.ZodOptional<z.ZodBoolean>;
            reasoning: z.ZodOptional<z.ZodString>;
            conversationHistoryIndex: z.ZodOptional<z.ZodNumber>;
            checkpoint: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            progressStatus: z.ZodOptional<z.ZodObject<{
                icon: z.ZodOptional<z.ZodString>;
                text: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                text?: string | undefined;
                icon?: string | undefined;
            }, {
                text?: string | undefined;
                icon?: string | undefined;
            }>>;
            contextCondense: z.ZodOptional<z.ZodObject<{
                cost: z.ZodNumber;
                prevContextTokens: z.ZodNumber;
                newContextTokens: z.ZodNumber;
                summary: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            }, {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            }>>;
            isProtected: z.ZodOptional<z.ZodBoolean>;
            apiProtocol: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"openai">, z.ZodLiteral<"anthropic">]>>;
            metadata: z.ZodOptional<z.ZodObject<{
                gpt5: z.ZodOptional<z.ZodObject<{
                    previous_response_id: z.ZodOptional<z.ZodString>;
                    instructions: z.ZodOptional<z.ZodString>;
                    reasoning_summary: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                }, {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                }>>;
                taskId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            }, {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        }, {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }, {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }>], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.Message;
    payload: [{
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.Message;
    payload: [{
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        action: "created" | "updated";
    }];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskModeSwitched>;
    payload: z.ZodTuple<[z.ZodString, z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskModeSwitched;
    payload: [string, string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskModeSwitched;
    payload: [string, string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskAskResponded>;
    payload: z.ZodTuple<[z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskAskResponded;
    payload: [string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskAskResponded;
    payload: [string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskToolFailed>;
    payload: z.ZodTuple<[z.ZodString, z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodString], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskToolFailed;
    payload: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskToolFailed;
    payload: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.TaskTokenUsageUpdated>;
    payload: z.ZodTuple<[z.ZodString, z.ZodObject<{
        totalTokensIn: z.ZodNumber;
        totalTokensOut: z.ZodNumber;
        totalCacheWrites: z.ZodOptional<z.ZodNumber>;
        totalCacheReads: z.ZodOptional<z.ZodNumber>;
        totalCost: z.ZodNumber;
        contextTokens: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }>], null>;
    taskId: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    eventName: RooCodeEventName.TaskTokenUsageUpdated;
    payload: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }];
    taskId?: number | undefined;
}, {
    eventName: RooCodeEventName.TaskTokenUsageUpdated;
    payload: [string, {
        totalTokensIn: number;
        totalTokensOut: number;
        totalCost: number;
        contextTokens: number;
        totalCacheWrites?: number | undefined;
        totalCacheReads?: number | undefined;
    }];
    taskId?: number | undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.EvalPass>;
    payload: z.ZodUndefined;
    taskId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    taskId: number;
    eventName: RooCodeEventName.EvalPass;
    payload?: undefined;
}, {
    taskId: number;
    eventName: RooCodeEventName.EvalPass;
    payload?: undefined;
}>, z.ZodObject<{
    eventName: z.ZodLiteral<RooCodeEventName.EvalFail>;
    payload: z.ZodUndefined;
    taskId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    taskId: number;
    eventName: RooCodeEventName.EvalFail;
    payload?: undefined;
}, {
    taskId: number;
    eventName: RooCodeEventName.EvalFail;
    payload?: undefined;
}>]>;
type TaskEvent = z.infer<typeof taskEventSchema>;

/**
 * TS
 */
type Keys<T> = keyof T;
type Values<T> = T[keyof T];
type Equals<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? true : false;
type AssertEqual<T extends true> = T;

declare const extendedReasoningEffortsSchema: z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>;
type ReasoningEffortWithMinimal = z.infer<typeof extendedReasoningEffortsSchema>;
/**
 * ProviderName
 */
declare const providerNames: readonly ["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"];
declare const providerNamesSchema: z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>;
type ProviderName = z.infer<typeof providerNamesSchema>;
/**
 * ProviderSettingsEntry
 */
declare const providerSettingsEntrySchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
    modelId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    modelId?: string | undefined;
}, {
    id: string;
    name: string;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    modelId?: string | undefined;
}>;
type ProviderSettingsEntry = z.infer<typeof providerSettingsEntrySchema>;
/**
 * ProviderSettings
 */
/**
 * Default value for consecutive mistake limit
 */
declare const DEFAULT_CONSECUTIVE_MISTAKE_LIMIT = 3;
declare const providerSettingsSchemaDiscriminated: z.ZodDiscriminatedUnion<"apiProvider", [z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    apiKey: z.ZodOptional<z.ZodString>;
    anthropicBaseUrl: z.ZodOptional<z.ZodString>;
    anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
    anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"anthropic">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "anthropic";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
}, {
    apiProvider: "anthropic";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    claudeCodePath: z.ZodOptional<z.ZodString>;
    claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
} & {
    apiProvider: z.ZodLiteral<"claude-code">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "claude-code";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
}, {
    apiProvider: "claude-code";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    glamaModelId: z.ZodOptional<z.ZodString>;
    glamaApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"glama">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "glama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
}, {
    apiProvider: "glama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    openRouterApiKey: z.ZodOptional<z.ZodString>;
    openRouterModelId: z.ZodOptional<z.ZodString>;
    openRouterBaseUrl: z.ZodOptional<z.ZodString>;
    openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
    openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"openrouter">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "openrouter";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
}, {
    apiProvider: "openrouter";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    awsAccessKey: z.ZodOptional<z.ZodString>;
    awsSecretKey: z.ZodOptional<z.ZodString>;
    awsSessionToken: z.ZodOptional<z.ZodString>;
    awsRegion: z.ZodOptional<z.ZodString>;
    awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
    awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    awsProfile: z.ZodOptional<z.ZodString>;
    awsUseProfile: z.ZodOptional<z.ZodBoolean>;
    awsApiKey: z.ZodOptional<z.ZodString>;
    awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
    awsCustomArn: z.ZodOptional<z.ZodString>;
    awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
    awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
    awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"bedrock">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "bedrock";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
}, {
    apiProvider: "bedrock";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    vertexKeyFile: z.ZodOptional<z.ZodString>;
    vertexJsonCredentials: z.ZodOptional<z.ZodString>;
    vertexProjectId: z.ZodOptional<z.ZodString>;
    vertexRegion: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"vertex">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "vertex";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
}, {
    apiProvider: "vertex";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    openAiBaseUrl: z.ZodOptional<z.ZodString>;
    openAiApiKey: z.ZodOptional<z.ZodString>;
    openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
    openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiModelId: z.ZodOptional<z.ZodString>;
    openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        contextWindow: z.ZodNumber;
        supportsImages: z.ZodOptional<z.ZodBoolean>;
        supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
        supportsPromptCache: z.ZodBoolean;
        supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        description: z.ZodOptional<z.ZodString>;
        modelType: z.ZodOptional<z.ZodString>;
        reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
        maxCachePoints: z.ZodOptional<z.ZodNumber>;
        cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            contextWindow: z.ZodNumber;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }>>>;
    openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
    azureApiVersion: z.ZodOptional<z.ZodString>;
    openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiHostHeader: z.ZodOptional<z.ZodString>;
    openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
} & {
    apiProvider: z.ZodLiteral<"openai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "openai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
}, {
    apiProvider: "openai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    ollamaModelId: z.ZodOptional<z.ZodString>;
    ollamaBaseUrl: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"ollama">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "ollama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
}, {
    apiProvider: "ollama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
        vendor: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }>>;
} & {
    apiProvider: z.ZodLiteral<"vscode-lm">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "vscode-lm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
}, {
    apiProvider: "vscode-lm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    lmStudioModelId: z.ZodOptional<z.ZodString>;
    lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
    lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
    lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"lmstudio">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "lmstudio";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
}, {
    apiProvider: "lmstudio";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    geminiApiKey: z.ZodOptional<z.ZodString>;
    googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
    enableUrlContext: z.ZodOptional<z.ZodBoolean>;
    enableGrounding: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"gemini">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "gemini";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
}, {
    apiProvider: "gemini";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
    geminiCliProjectId: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"gemini-cli">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "gemini-cli";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
}, {
    apiProvider: "gemini-cli";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    openAiNativeApiKey: z.ZodOptional<z.ZodString>;
    openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"openai-native">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "openai-native";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
}, {
    apiProvider: "openai-native";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    mistralApiKey: z.ZodOptional<z.ZodString>;
    mistralCodestralUrl: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"mistral">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "mistral";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
}, {
    apiProvider: "mistral";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
    deepSeekApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"deepseek">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "deepseek";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
}, {
    apiProvider: "deepseek";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    doubaoBaseUrl: z.ZodOptional<z.ZodString>;
    doubaoApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"doubao">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "doubao";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
}, {
    apiProvider: "doubao";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
    moonshotApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"moonshot">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "moonshot";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
}, {
    apiProvider: "moonshot";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    unboundApiKey: z.ZodOptional<z.ZodString>;
    unboundModelId: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"unbound">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "unbound";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
}, {
    apiProvider: "unbound";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    requestyBaseUrl: z.ZodOptional<z.ZodString>;
    requestyApiKey: z.ZodOptional<z.ZodString>;
    requestyModelId: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"requesty">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "requesty";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
}, {
    apiProvider: "requesty";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiProvider: z.ZodLiteral<"human-relay">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "human-relay";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
}, {
    apiProvider: "human-relay";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    fakeAi: z.ZodOptional<z.ZodUnknown>;
} & {
    apiProvider: z.ZodLiteral<"fake-ai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "fake-ai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    fakeAi?: unknown;
}, {
    apiProvider: "fake-ai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    fakeAi?: unknown;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    xaiApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"xai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "xai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    xaiApiKey?: string | undefined;
}, {
    apiProvider: "xai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    xaiApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    groqApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"groq">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "groq";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    groqApiKey?: string | undefined;
}, {
    apiProvider: "groq";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    groqApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    huggingFaceApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceModelId: z.ZodOptional<z.ZodString>;
    huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"huggingface">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "huggingface";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
}, {
    apiProvider: "huggingface";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    chutesApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"chutes">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "chutes";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    chutesApiKey?: string | undefined;
}, {
    apiProvider: "chutes";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    chutesApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    litellmBaseUrl: z.ZodOptional<z.ZodString>;
    litellmApiKey: z.ZodOptional<z.ZodString>;
    litellmModelId: z.ZodOptional<z.ZodString>;
    litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"litellm">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "litellm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
}, {
    apiProvider: "litellm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    cerebrasApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"cerebras">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "cerebras";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    cerebrasApiKey?: string | undefined;
}, {
    apiProvider: "cerebras";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    cerebrasApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    sambaNovaApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"sambanova">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "sambanova";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    sambaNovaApiKey?: string | undefined;
}, {
    apiProvider: "sambanova";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    sambaNovaApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    zaiApiKey: z.ZodOptional<z.ZodString>;
    zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
} & {
    apiProvider: z.ZodLiteral<"zai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "zai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
}, {
    apiProvider: "zai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    fireworksApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"fireworks">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "fireworks";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    fireworksApiKey?: string | undefined;
}, {
    apiProvider: "fireworks";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    fireworksApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"io-intelligence">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "io-intelligence";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}, {
    apiProvider: "io-intelligence";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}>, z.ZodObject<{
    apiProvider: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    apiProvider?: undefined;
}, {
    apiProvider?: undefined;
}>]>;
declare const providerSettingsSchema: z.ZodObject<{
    codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
    codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    apiModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
    fireworksApiKey: z.ZodOptional<z.ZodString>;
    zaiApiKey: z.ZodOptional<z.ZodString>;
    zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
    sambaNovaApiKey: z.ZodOptional<z.ZodString>;
    cerebrasApiKey: z.ZodOptional<z.ZodString>;
    litellmBaseUrl: z.ZodOptional<z.ZodString>;
    litellmApiKey: z.ZodOptional<z.ZodString>;
    litellmModelId: z.ZodOptional<z.ZodString>;
    litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    chutesApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceModelId: z.ZodOptional<z.ZodString>;
    huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
    groqApiKey: z.ZodOptional<z.ZodString>;
    xaiApiKey: z.ZodOptional<z.ZodString>;
    fakeAi: z.ZodOptional<z.ZodUnknown>;
    requestyBaseUrl: z.ZodOptional<z.ZodString>;
    requestyApiKey: z.ZodOptional<z.ZodString>;
    requestyModelId: z.ZodOptional<z.ZodString>;
    unboundApiKey: z.ZodOptional<z.ZodString>;
    unboundModelId: z.ZodOptional<z.ZodString>;
    moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
    moonshotApiKey: z.ZodOptional<z.ZodString>;
    doubaoBaseUrl: z.ZodOptional<z.ZodString>;
    doubaoApiKey: z.ZodOptional<z.ZodString>;
    deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
    deepSeekApiKey: z.ZodOptional<z.ZodString>;
    mistralApiKey: z.ZodOptional<z.ZodString>;
    mistralCodestralUrl: z.ZodOptional<z.ZodString>;
    openAiNativeApiKey: z.ZodOptional<z.ZodString>;
    openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
    geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
    geminiCliProjectId: z.ZodOptional<z.ZodString>;
    geminiApiKey: z.ZodOptional<z.ZodString>;
    googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
    enableUrlContext: z.ZodOptional<z.ZodBoolean>;
    enableGrounding: z.ZodOptional<z.ZodBoolean>;
    lmStudioModelId: z.ZodOptional<z.ZodString>;
    lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
    lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
    lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
    vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
        vendor: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }>>;
    ollamaModelId: z.ZodOptional<z.ZodString>;
    ollamaBaseUrl: z.ZodOptional<z.ZodString>;
    openAiBaseUrl: z.ZodOptional<z.ZodString>;
    openAiApiKey: z.ZodOptional<z.ZodString>;
    openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
    openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiModelId: z.ZodOptional<z.ZodString>;
    openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        contextWindow: z.ZodNumber;
        supportsImages: z.ZodOptional<z.ZodBoolean>;
        supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
        supportsPromptCache: z.ZodBoolean;
        supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        description: z.ZodOptional<z.ZodString>;
        modelType: z.ZodOptional<z.ZodString>;
        reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
        maxCachePoints: z.ZodOptional<z.ZodNumber>;
        cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            contextWindow: z.ZodNumber;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }>>>;
    openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
    azureApiVersion: z.ZodOptional<z.ZodString>;
    openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiHostHeader: z.ZodOptional<z.ZodString>;
    openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    vertexKeyFile: z.ZodOptional<z.ZodString>;
    vertexJsonCredentials: z.ZodOptional<z.ZodString>;
    vertexProjectId: z.ZodOptional<z.ZodString>;
    vertexRegion: z.ZodOptional<z.ZodString>;
    awsAccessKey: z.ZodOptional<z.ZodString>;
    awsSecretKey: z.ZodOptional<z.ZodString>;
    awsSessionToken: z.ZodOptional<z.ZodString>;
    awsRegion: z.ZodOptional<z.ZodString>;
    awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
    awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    awsProfile: z.ZodOptional<z.ZodString>;
    awsUseProfile: z.ZodOptional<z.ZodBoolean>;
    awsApiKey: z.ZodOptional<z.ZodString>;
    awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
    awsCustomArn: z.ZodOptional<z.ZodString>;
    awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
    awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
    awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
    openRouterApiKey: z.ZodOptional<z.ZodString>;
    openRouterModelId: z.ZodOptional<z.ZodString>;
    openRouterBaseUrl: z.ZodOptional<z.ZodString>;
    openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
    openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
    glamaModelId: z.ZodOptional<z.ZodString>;
    glamaApiKey: z.ZodOptional<z.ZodString>;
    claudeCodePath: z.ZodOptional<z.ZodString>;
    claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
    apiKey: z.ZodOptional<z.ZodString>;
    anthropicBaseUrl: z.ZodOptional<z.ZodString>;
    anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
    anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
}, "strip", z.ZodTypeAny, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}>;
type ProviderSettings = z.infer<typeof providerSettingsSchema>;
declare const providerSettingsWithIdSchema: z.ZodObject<{
    codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
    codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    apiModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
    fireworksApiKey: z.ZodOptional<z.ZodString>;
    zaiApiKey: z.ZodOptional<z.ZodString>;
    zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
    sambaNovaApiKey: z.ZodOptional<z.ZodString>;
    cerebrasApiKey: z.ZodOptional<z.ZodString>;
    litellmBaseUrl: z.ZodOptional<z.ZodString>;
    litellmApiKey: z.ZodOptional<z.ZodString>;
    litellmModelId: z.ZodOptional<z.ZodString>;
    litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    chutesApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceModelId: z.ZodOptional<z.ZodString>;
    huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
    groqApiKey: z.ZodOptional<z.ZodString>;
    xaiApiKey: z.ZodOptional<z.ZodString>;
    fakeAi: z.ZodOptional<z.ZodUnknown>;
    requestyBaseUrl: z.ZodOptional<z.ZodString>;
    requestyApiKey: z.ZodOptional<z.ZodString>;
    requestyModelId: z.ZodOptional<z.ZodString>;
    unboundApiKey: z.ZodOptional<z.ZodString>;
    unboundModelId: z.ZodOptional<z.ZodString>;
    moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
    moonshotApiKey: z.ZodOptional<z.ZodString>;
    doubaoBaseUrl: z.ZodOptional<z.ZodString>;
    doubaoApiKey: z.ZodOptional<z.ZodString>;
    deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
    deepSeekApiKey: z.ZodOptional<z.ZodString>;
    mistralApiKey: z.ZodOptional<z.ZodString>;
    mistralCodestralUrl: z.ZodOptional<z.ZodString>;
    openAiNativeApiKey: z.ZodOptional<z.ZodString>;
    openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
    geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
    geminiCliProjectId: z.ZodOptional<z.ZodString>;
    geminiApiKey: z.ZodOptional<z.ZodString>;
    googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
    enableUrlContext: z.ZodOptional<z.ZodBoolean>;
    enableGrounding: z.ZodOptional<z.ZodBoolean>;
    lmStudioModelId: z.ZodOptional<z.ZodString>;
    lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
    lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
    lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
    vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
        vendor: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }>>;
    ollamaModelId: z.ZodOptional<z.ZodString>;
    ollamaBaseUrl: z.ZodOptional<z.ZodString>;
    openAiBaseUrl: z.ZodOptional<z.ZodString>;
    openAiApiKey: z.ZodOptional<z.ZodString>;
    openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
    openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiModelId: z.ZodOptional<z.ZodString>;
    openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        contextWindow: z.ZodNumber;
        supportsImages: z.ZodOptional<z.ZodBoolean>;
        supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
        supportsPromptCache: z.ZodBoolean;
        supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        description: z.ZodOptional<z.ZodString>;
        modelType: z.ZodOptional<z.ZodString>;
        reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
        maxCachePoints: z.ZodOptional<z.ZodNumber>;
        cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            contextWindow: z.ZodNumber;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }>>>;
    openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
    azureApiVersion: z.ZodOptional<z.ZodString>;
    openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiHostHeader: z.ZodOptional<z.ZodString>;
    openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    vertexKeyFile: z.ZodOptional<z.ZodString>;
    vertexJsonCredentials: z.ZodOptional<z.ZodString>;
    vertexProjectId: z.ZodOptional<z.ZodString>;
    vertexRegion: z.ZodOptional<z.ZodString>;
    awsAccessKey: z.ZodOptional<z.ZodString>;
    awsSecretKey: z.ZodOptional<z.ZodString>;
    awsSessionToken: z.ZodOptional<z.ZodString>;
    awsRegion: z.ZodOptional<z.ZodString>;
    awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
    awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    awsProfile: z.ZodOptional<z.ZodString>;
    awsUseProfile: z.ZodOptional<z.ZodBoolean>;
    awsApiKey: z.ZodOptional<z.ZodString>;
    awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
    awsCustomArn: z.ZodOptional<z.ZodString>;
    awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
    awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
    awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
    openRouterApiKey: z.ZodOptional<z.ZodString>;
    openRouterModelId: z.ZodOptional<z.ZodString>;
    openRouterBaseUrl: z.ZodOptional<z.ZodString>;
    openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
    openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
    glamaModelId: z.ZodOptional<z.ZodString>;
    glamaApiKey: z.ZodOptional<z.ZodString>;
    claudeCodePath: z.ZodOptional<z.ZodString>;
    claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
    apiKey: z.ZodOptional<z.ZodString>;
    anthropicBaseUrl: z.ZodOptional<z.ZodString>;
    anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
    anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
} & {
    id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    id?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    id?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}>;
declare const discriminatedProviderSettingsWithIdSchema: z.ZodIntersection<z.ZodDiscriminatedUnion<"apiProvider", [z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    apiKey: z.ZodOptional<z.ZodString>;
    anthropicBaseUrl: z.ZodOptional<z.ZodString>;
    anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
    anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"anthropic">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "anthropic";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
}, {
    apiProvider: "anthropic";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    claudeCodePath: z.ZodOptional<z.ZodString>;
    claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
} & {
    apiProvider: z.ZodLiteral<"claude-code">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "claude-code";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
}, {
    apiProvider: "claude-code";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    glamaModelId: z.ZodOptional<z.ZodString>;
    glamaApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"glama">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "glama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
}, {
    apiProvider: "glama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    openRouterApiKey: z.ZodOptional<z.ZodString>;
    openRouterModelId: z.ZodOptional<z.ZodString>;
    openRouterBaseUrl: z.ZodOptional<z.ZodString>;
    openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
    openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"openrouter">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "openrouter";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
}, {
    apiProvider: "openrouter";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    awsAccessKey: z.ZodOptional<z.ZodString>;
    awsSecretKey: z.ZodOptional<z.ZodString>;
    awsSessionToken: z.ZodOptional<z.ZodString>;
    awsRegion: z.ZodOptional<z.ZodString>;
    awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
    awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    awsProfile: z.ZodOptional<z.ZodString>;
    awsUseProfile: z.ZodOptional<z.ZodBoolean>;
    awsApiKey: z.ZodOptional<z.ZodString>;
    awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
    awsCustomArn: z.ZodOptional<z.ZodString>;
    awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
    awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
    awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"bedrock">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "bedrock";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
}, {
    apiProvider: "bedrock";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    vertexKeyFile: z.ZodOptional<z.ZodString>;
    vertexJsonCredentials: z.ZodOptional<z.ZodString>;
    vertexProjectId: z.ZodOptional<z.ZodString>;
    vertexRegion: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"vertex">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "vertex";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
}, {
    apiProvider: "vertex";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    openAiBaseUrl: z.ZodOptional<z.ZodString>;
    openAiApiKey: z.ZodOptional<z.ZodString>;
    openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
    openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiModelId: z.ZodOptional<z.ZodString>;
    openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        contextWindow: z.ZodNumber;
        supportsImages: z.ZodOptional<z.ZodBoolean>;
        supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
        supportsPromptCache: z.ZodBoolean;
        supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        description: z.ZodOptional<z.ZodString>;
        modelType: z.ZodOptional<z.ZodString>;
        reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
        maxCachePoints: z.ZodOptional<z.ZodNumber>;
        cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            contextWindow: z.ZodNumber;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }>>>;
    openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
    azureApiVersion: z.ZodOptional<z.ZodString>;
    openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiHostHeader: z.ZodOptional<z.ZodString>;
    openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
} & {
    apiProvider: z.ZodLiteral<"openai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "openai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
}, {
    apiProvider: "openai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    ollamaModelId: z.ZodOptional<z.ZodString>;
    ollamaBaseUrl: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"ollama">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "ollama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
}, {
    apiProvider: "ollama";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
        vendor: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }>>;
} & {
    apiProvider: z.ZodLiteral<"vscode-lm">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "vscode-lm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
}, {
    apiProvider: "vscode-lm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    lmStudioModelId: z.ZodOptional<z.ZodString>;
    lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
    lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
    lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"lmstudio">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "lmstudio";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
}, {
    apiProvider: "lmstudio";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    geminiApiKey: z.ZodOptional<z.ZodString>;
    googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
    enableUrlContext: z.ZodOptional<z.ZodBoolean>;
    enableGrounding: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"gemini">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "gemini";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
}, {
    apiProvider: "gemini";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
    geminiCliProjectId: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"gemini-cli">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "gemini-cli";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
}, {
    apiProvider: "gemini-cli";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    openAiNativeApiKey: z.ZodOptional<z.ZodString>;
    openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"openai-native">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "openai-native";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
}, {
    apiProvider: "openai-native";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    mistralApiKey: z.ZodOptional<z.ZodString>;
    mistralCodestralUrl: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"mistral">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "mistral";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
}, {
    apiProvider: "mistral";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
    deepSeekApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"deepseek">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "deepseek";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
}, {
    apiProvider: "deepseek";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    doubaoBaseUrl: z.ZodOptional<z.ZodString>;
    doubaoApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"doubao">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "doubao";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
}, {
    apiProvider: "doubao";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
    moonshotApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"moonshot">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "moonshot";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
}, {
    apiProvider: "moonshot";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    unboundApiKey: z.ZodOptional<z.ZodString>;
    unboundModelId: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"unbound">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "unbound";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
}, {
    apiProvider: "unbound";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    requestyBaseUrl: z.ZodOptional<z.ZodString>;
    requestyApiKey: z.ZodOptional<z.ZodString>;
    requestyModelId: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"requesty">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "requesty";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
}, {
    apiProvider: "requesty";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiProvider: z.ZodLiteral<"human-relay">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "human-relay";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
}, {
    apiProvider: "human-relay";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    fakeAi: z.ZodOptional<z.ZodUnknown>;
} & {
    apiProvider: z.ZodLiteral<"fake-ai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "fake-ai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    fakeAi?: unknown;
}, {
    apiProvider: "fake-ai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    fakeAi?: unknown;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    xaiApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"xai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "xai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    xaiApiKey?: string | undefined;
}, {
    apiProvider: "xai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    xaiApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    groqApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"groq">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "groq";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    groqApiKey?: string | undefined;
}, {
    apiProvider: "groq";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    groqApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    huggingFaceApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceModelId: z.ZodOptional<z.ZodString>;
    huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"huggingface">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "huggingface";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
}, {
    apiProvider: "huggingface";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    chutesApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"chutes">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "chutes";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    chutesApiKey?: string | undefined;
}, {
    apiProvider: "chutes";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    chutesApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    litellmBaseUrl: z.ZodOptional<z.ZodString>;
    litellmApiKey: z.ZodOptional<z.ZodString>;
    litellmModelId: z.ZodOptional<z.ZodString>;
    litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
} & {
    apiProvider: z.ZodLiteral<"litellm">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "litellm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
}, {
    apiProvider: "litellm";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    cerebrasApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"cerebras">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "cerebras";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    cerebrasApiKey?: string | undefined;
}, {
    apiProvider: "cerebras";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    cerebrasApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    sambaNovaApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"sambanova">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "sambanova";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    sambaNovaApiKey?: string | undefined;
}, {
    apiProvider: "sambanova";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    sambaNovaApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    zaiApiKey: z.ZodOptional<z.ZodString>;
    zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
} & {
    apiProvider: z.ZodLiteral<"zai">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "zai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
}, {
    apiProvider: "zai";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    fireworksApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"fireworks">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "fireworks";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    fireworksApiKey?: string | undefined;
}, {
    apiProvider: "fireworks";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    fireworksApiKey?: string | undefined;
}>, z.ZodObject<{
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
} & {
    apiModelId: z.ZodOptional<z.ZodString>;
} & {
    ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
} & {
    apiProvider: z.ZodLiteral<"io-intelligence">;
}, "strip", z.ZodTypeAny, {
    apiProvider: "io-intelligence";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}, {
    apiProvider: "io-intelligence";
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
}>, z.ZodObject<{
    apiProvider: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    apiProvider?: undefined;
}, {
    apiProvider?: undefined;
}>]>, z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string | undefined;
}, {
    id?: string | undefined;
}>>;
type ProviderSettingsWithId = z.infer<typeof providerSettingsWithIdSchema>;
declare const PROVIDER_SETTINGS_KEYS: ["reasoningEffort", "codebaseIndexOpenAiCompatibleBaseUrl", "codebaseIndexOpenAiCompatibleModelDimension", "codeIndexOpenAiKey", "codeIndexQdrantApiKey", "codebaseIndexOpenAiCompatibleApiKey", "codebaseIndexGeminiApiKey", "codebaseIndexMistralApiKey", "apiProvider", "includeMaxTokens", "diffEnabled", "todoListEnabled", "fuzzyMatchThreshold", "modelTemperature", "rateLimitSeconds", "consecutiveMistakeLimit", "enableReasoningEffort", "modelMaxTokens", "modelMaxThinkingTokens", "verbosity", "apiModelId", "apiKey", "anthropicBaseUrl", "anthropicUseAuthToken", "anthropicBeta1MContext", "claudeCodePath", "claudeCodeMaxOutputTokens", "glamaModelId", "glamaApiKey", "openRouterApiKey", "openRouterModelId", "openRouterBaseUrl", "openRouterSpecificProvider", "openRouterUseMiddleOutTransform", "awsAccessKey", "awsSecretKey", "awsSessionToken", "awsRegion", "awsUseCrossRegionInference", "awsUsePromptCache", "awsProfile", "awsUseProfile", "awsApiKey", "awsUseApiKey", "awsCustomArn", "awsModelContextWindow", "awsBedrockEndpointEnabled", "awsBedrockEndpoint", "vertexKeyFile", "vertexJsonCredentials", "vertexProjectId", "vertexRegion", "openAiBaseUrl", "openAiApiKey", "openAiLegacyFormat", "openAiR1FormatEnabled", "openAiModelId", "openAiCustomModelInfo", "openAiUseAzure", "azureApiVersion", "openAiStreamingEnabled", "openAiHostHeader", "openAiHeaders", "ollamaModelId", "ollamaBaseUrl", "vsCodeLmModelSelector", "lmStudioModelId", "lmStudioBaseUrl", "lmStudioDraftModelId", "lmStudioSpeculativeDecodingEnabled", "geminiApiKey", "googleGeminiBaseUrl", "enableUrlContext", "enableGrounding", "geminiCliOAuthPath", "geminiCliProjectId", "openAiNativeApiKey", "openAiNativeBaseUrl", "mistralApiKey", "mistralCodestralUrl", "deepSeekBaseUrl", "deepSeekApiKey", "doubaoBaseUrl", "doubaoApiKey", "moonshotBaseUrl", "moonshotApiKey", "unboundApiKey", "unboundModelId", "requestyBaseUrl", "requestyApiKey", "requestyModelId", "fakeAi", "xaiApiKey", "groqApiKey", "huggingFaceApiKey", "huggingFaceModelId", "huggingFaceInferenceProvider", "chutesApiKey", "litellmBaseUrl", "litellmApiKey", "litellmModelId", "litellmUsePromptCache", "cerebrasApiKey", "sambaNovaApiKey", "zaiApiKey", "zaiApiLine", "fireworksApiKey", "ioIntelligenceModelId", "ioIntelligenceApiKey"];
declare const MODEL_ID_KEYS: Partial<keyof ProviderSettings>[];
declare const getModelId: (settings: ProviderSettings) => string | undefined;
declare const ANTHROPIC_STYLE_PROVIDERS: ProviderName[];
declare const getApiProtocol: (provider: ProviderName | undefined, modelId?: string) => "anthropic" | "openai";

/**
 * Default delay in milliseconds after writes to allow diagnostics to detect potential problems.
 * This delay is particularly important for Go and other languages where tools like goimports
 * need time to automatically clean up unused imports.
 */
declare const DEFAULT_WRITE_DELAY_MS = 1000;
/**
 * Default terminal output character limit constant.
 * This provides a reasonable default that aligns with typical terminal usage
 * while preventing context window explosions from extremely long lines.
 */
declare const DEFAULT_TERMINAL_OUTPUT_CHARACTER_LIMIT = 50000;
/**
 * Default timeout for background usage collection in milliseconds.
 * This timeout prevents the background task from running indefinitely
 * when collecting usage data from streaming API responses.
 */
declare const DEFAULT_USAGE_COLLECTION_TIMEOUT_MS = 30000;
/**
 * GlobalSettings
 */
declare const globalSettingsSchema: z.ZodObject<{
    currentApiConfigName: z.ZodOptional<z.ZodString>;
    listApiConfigMeta: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        modelId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }, {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }>, "many">>;
    pinnedApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodBoolean>>;
    lastShownAnnouncementId: z.ZodOptional<z.ZodString>;
    customInstructions: z.ZodOptional<z.ZodString>;
    taskHistory: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        number: z.ZodNumber;
        ts: z.ZodNumber;
        task: z.ZodString;
        tokensIn: z.ZodNumber;
        tokensOut: z.ZodNumber;
        cacheWrites: z.ZodOptional<z.ZodNumber>;
        cacheReads: z.ZodOptional<z.ZodNumber>;
        totalCost: z.ZodNumber;
        size: z.ZodOptional<z.ZodNumber>;
        workspace: z.ZodOptional<z.ZodString>;
        mode: z.ZodOptional<z.ZodString>;
        terminalNo: z.ZodOptional<z.ZodNumber>;
        source: z.ZodOptional<z.ZodEnum<["user", "agent"]>>;
        agentId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }, {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }>, "many">>;
    condensingApiConfigId: z.ZodOptional<z.ZodString>;
    customCondensingPrompt: z.ZodOptional<z.ZodString>;
    autoApprovalEnabled: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowReadOnly: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowReadOnlyOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowWrite: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowWriteOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowWriteProtected: z.ZodOptional<z.ZodBoolean>;
    writeDelayMs: z.ZodOptional<z.ZodNumber>;
    alwaysAllowBrowser: z.ZodOptional<z.ZodBoolean>;
    alwaysApproveResubmit: z.ZodOptional<z.ZodBoolean>;
    requestDelaySeconds: z.ZodOptional<z.ZodNumber>;
    alwaysAllowMcp: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowModeSwitch: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowSubtasks: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowExecute: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowFollowupQuestions: z.ZodOptional<z.ZodBoolean>;
    followupAutoApproveTimeoutMs: z.ZodOptional<z.ZodNumber>;
    alwaysAllowUpdateTodoList: z.ZodOptional<z.ZodBoolean>;
    allowedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    deniedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    commandExecutionTimeout: z.ZodOptional<z.ZodNumber>;
    commandTimeoutAllowlist: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    preventCompletionWithOpenTodos: z.ZodOptional<z.ZodBoolean>;
    allowedMaxRequests: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    allowedMaxCost: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    autoCondenseContext: z.ZodOptional<z.ZodBoolean>;
    autoCondenseContextPercent: z.ZodOptional<z.ZodNumber>;
    maxConcurrentFileReads: z.ZodOptional<z.ZodNumber>;
    /**
     * Whether to include diagnostic messages (errors, warnings) in tool outputs
     * @default true
     */
    includeDiagnosticMessages: z.ZodOptional<z.ZodBoolean>;
    /**
     * Maximum number of diagnostic messages to include in tool outputs
     * @default 50
     */
    maxDiagnosticMessages: z.ZodOptional<z.ZodNumber>;
    browserToolEnabled: z.ZodOptional<z.ZodBoolean>;
    browserViewportSize: z.ZodOptional<z.ZodString>;
    screenshotQuality: z.ZodOptional<z.ZodNumber>;
    remoteBrowserEnabled: z.ZodOptional<z.ZodBoolean>;
    remoteBrowserHost: z.ZodOptional<z.ZodString>;
    cachedChromeHostUrl: z.ZodOptional<z.ZodString>;
    enableCheckpoints: z.ZodOptional<z.ZodBoolean>;
    ttsEnabled: z.ZodOptional<z.ZodBoolean>;
    ttsSpeed: z.ZodOptional<z.ZodNumber>;
    soundEnabled: z.ZodOptional<z.ZodBoolean>;
    soundVolume: z.ZodOptional<z.ZodNumber>;
    maxOpenTabsContext: z.ZodOptional<z.ZodNumber>;
    maxWorkspaceFiles: z.ZodOptional<z.ZodNumber>;
    showRooIgnoredFiles: z.ZodOptional<z.ZodBoolean>;
    maxReadFileLine: z.ZodOptional<z.ZodNumber>;
    maxImageFileSize: z.ZodOptional<z.ZodNumber>;
    maxTotalImageSize: z.ZodOptional<z.ZodNumber>;
    terminalOutputLineLimit: z.ZodOptional<z.ZodNumber>;
    terminalOutputCharacterLimit: z.ZodOptional<z.ZodNumber>;
    terminalShellIntegrationTimeout: z.ZodOptional<z.ZodNumber>;
    terminalShellIntegrationDisabled: z.ZodOptional<z.ZodBoolean>;
    terminalCommandDelay: z.ZodOptional<z.ZodNumber>;
    terminalPowershellCounter: z.ZodOptional<z.ZodBoolean>;
    terminalZshClearEolMark: z.ZodOptional<z.ZodBoolean>;
    terminalZshOhMy: z.ZodOptional<z.ZodBoolean>;
    terminalZshP10k: z.ZodOptional<z.ZodBoolean>;
    terminalZdotdir: z.ZodOptional<z.ZodBoolean>;
    terminalCompressProgressBar: z.ZodOptional<z.ZodBoolean>;
    diagnosticsEnabled: z.ZodOptional<z.ZodBoolean>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    experiments: z.ZodOptional<z.ZodObject<{
        powerSteering: z.ZodOptional<z.ZodBoolean>;
        multiFileApplyDiff: z.ZodOptional<z.ZodBoolean>;
        preventFocusDisruption: z.ZodOptional<z.ZodBoolean>;
        assistantMessageParser: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    }, {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    }>>;
    codebaseIndexModels: z.ZodOptional<z.ZodObject<{
        openai: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        ollama: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        "openai-compatible": z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        gemini: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        mistral: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    }, {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    }>>;
    codebaseIndexConfig: z.ZodOptional<z.ZodObject<{
        codebaseIndexEnabled: z.ZodOptional<z.ZodBoolean>;
        codebaseIndexQdrantUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexEmbedderProvider: z.ZodOptional<z.ZodEnum<["openai", "ollama", "openai-compatible", "gemini", "mistral"]>>;
        codebaseIndexEmbedderBaseUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexEmbedderModelId: z.ZodOptional<z.ZodString>;
        codebaseIndexEmbedderModelDimension: z.ZodOptional<z.ZodNumber>;
        codebaseIndexSearchMinScore: z.ZodOptional<z.ZodNumber>;
        codebaseIndexSearchMaxResults: z.ZodOptional<z.ZodNumber>;
        codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    }, {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    }>>;
    language: z.ZodOptional<z.ZodEnum<["ca", "de", "en", "es", "fr", "hi", "id", "it", "ja", "ko", "nl", "pl", "pt-BR", "ru", "tr", "vi", "zh-CN", "zh-TW"]>>;
    telemetrySetting: z.ZodOptional<z.ZodEnum<["unset", "enabled", "disabled"]>>;
    mcpEnabled: z.ZodOptional<z.ZodBoolean>;
    enableMcpServerCreation: z.ZodOptional<z.ZodBoolean>;
    remoteControlEnabled: z.ZodOptional<z.ZodBoolean>;
    mode: z.ZodOptional<z.ZodString>;
    modeApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    customModes: z.ZodOptional<z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        name: z.ZodString;
        roleDefinition: z.ZodString;
        whenToUse: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        customInstructions: z.ZodOptional<z.ZodString>;
        groups: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
            fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }, {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }>], null>]>, "many">, ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[], ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[]>;
        source: z.ZodOptional<z.ZodEnum<["global", "project"]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }>, "many">>;
    customModePrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodObject<{
        roleDefinition: z.ZodOptional<z.ZodString>;
        whenToUse: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        customInstructions: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }>>>>;
    customSupportPrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodString>>>;
    enhancementApiConfigId: z.ZodOptional<z.ZodString>;
    includeTaskHistoryInEnhance: z.ZodOptional<z.ZodBoolean>;
    historyPreviewCollapsed: z.ZodOptional<z.ZodBoolean>;
    profileThresholds: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
    hasOpenedModeSelector: z.ZodOptional<z.ZodBoolean>;
    lastModeExportPath: z.ZodOptional<z.ZodString>;
    lastModeImportPath: z.ZodOptional<z.ZodString>;
    imContacts: z.ZodOptional<z.ZodObject<{
        friends: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            nickName: z.ZodString;
            headImage: z.ZodString;
            deleted: z.ZodBoolean;
            online: z.ZodBoolean;
            onlineWeb: z.ZodBoolean;
            onlineApp: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }, {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }>, "many">>;
        groups: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            ownerId: z.ZodNumber;
            headImage: z.ZodString;
            headImageThumb: z.ZodString;
            notice: z.ZodString;
            remarkNickName: z.ZodString;
            showNickName: z.ZodString;
            showGroupName: z.ZodString;
            remarkGroupName: z.ZodString;
            dissolve: z.ZodBoolean;
            quit: z.ZodBoolean;
            isBanned: z.ZodBoolean;
            reason: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }, {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }>, "many">>;
        lastUpdated: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    }, {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    }>>;
    agentA2AMode: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodBoolean;
        agentId: z.ZodString;
        agentName: z.ZodString;
        serverUrl: z.ZodString;
        serverPort: z.ZodNumber;
        isDebugMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    }, {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    diffEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    rateLimitSeconds?: number | undefined;
    mode?: string | undefined;
    language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
    customInstructions?: string | undefined;
    customModes?: {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[] | undefined;
    currentApiConfigName?: string | undefined;
    listApiConfigMeta?: {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }[] | undefined;
    pinnedApiConfigs?: Record<string, boolean> | undefined;
    lastShownAnnouncementId?: string | undefined;
    taskHistory?: {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }[] | undefined;
    condensingApiConfigId?: string | undefined;
    customCondensingPrompt?: string | undefined;
    autoApprovalEnabled?: boolean | undefined;
    alwaysAllowReadOnly?: boolean | undefined;
    alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
    alwaysAllowWrite?: boolean | undefined;
    alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
    alwaysAllowWriteProtected?: boolean | undefined;
    writeDelayMs?: number | undefined;
    alwaysAllowBrowser?: boolean | undefined;
    alwaysApproveResubmit?: boolean | undefined;
    requestDelaySeconds?: number | undefined;
    alwaysAllowMcp?: boolean | undefined;
    alwaysAllowModeSwitch?: boolean | undefined;
    alwaysAllowSubtasks?: boolean | undefined;
    alwaysAllowExecute?: boolean | undefined;
    alwaysAllowFollowupQuestions?: boolean | undefined;
    followupAutoApproveTimeoutMs?: number | undefined;
    alwaysAllowUpdateTodoList?: boolean | undefined;
    allowedCommands?: string[] | undefined;
    deniedCommands?: string[] | undefined;
    commandExecutionTimeout?: number | undefined;
    commandTimeoutAllowlist?: string[] | undefined;
    preventCompletionWithOpenTodos?: boolean | undefined;
    allowedMaxRequests?: number | null | undefined;
    allowedMaxCost?: number | null | undefined;
    autoCondenseContext?: boolean | undefined;
    autoCondenseContextPercent?: number | undefined;
    maxConcurrentFileReads?: number | undefined;
    includeDiagnosticMessages?: boolean | undefined;
    maxDiagnosticMessages?: number | undefined;
    browserToolEnabled?: boolean | undefined;
    browserViewportSize?: string | undefined;
    screenshotQuality?: number | undefined;
    remoteBrowserEnabled?: boolean | undefined;
    remoteBrowserHost?: string | undefined;
    cachedChromeHostUrl?: string | undefined;
    enableCheckpoints?: boolean | undefined;
    ttsEnabled?: boolean | undefined;
    ttsSpeed?: number | undefined;
    soundEnabled?: boolean | undefined;
    soundVolume?: number | undefined;
    maxOpenTabsContext?: number | undefined;
    maxWorkspaceFiles?: number | undefined;
    showRooIgnoredFiles?: boolean | undefined;
    maxReadFileLine?: number | undefined;
    maxImageFileSize?: number | undefined;
    maxTotalImageSize?: number | undefined;
    terminalOutputLineLimit?: number | undefined;
    terminalOutputCharacterLimit?: number | undefined;
    terminalShellIntegrationTimeout?: number | undefined;
    terminalShellIntegrationDisabled?: boolean | undefined;
    terminalCommandDelay?: number | undefined;
    terminalPowershellCounter?: boolean | undefined;
    terminalZshClearEolMark?: boolean | undefined;
    terminalZshOhMy?: boolean | undefined;
    terminalZshP10k?: boolean | undefined;
    terminalZdotdir?: boolean | undefined;
    terminalCompressProgressBar?: boolean | undefined;
    diagnosticsEnabled?: boolean | undefined;
    experiments?: {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    } | undefined;
    codebaseIndexModels?: {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    } | undefined;
    codebaseIndexConfig?: {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    } | undefined;
    telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
    mcpEnabled?: boolean | undefined;
    enableMcpServerCreation?: boolean | undefined;
    remoteControlEnabled?: boolean | undefined;
    modeApiConfigs?: Record<string, string> | undefined;
    customModePrompts?: Record<string, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    } | undefined> | undefined;
    customSupportPrompts?: Record<string, string | undefined> | undefined;
    enhancementApiConfigId?: string | undefined;
    includeTaskHistoryInEnhance?: boolean | undefined;
    historyPreviewCollapsed?: boolean | undefined;
    profileThresholds?: Record<string, number> | undefined;
    hasOpenedModeSelector?: boolean | undefined;
    lastModeExportPath?: string | undefined;
    lastModeImportPath?: string | undefined;
    imContacts?: {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    } | undefined;
    agentA2AMode?: {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    } | null | undefined;
}, {
    diffEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    rateLimitSeconds?: number | undefined;
    mode?: string | undefined;
    language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
    customInstructions?: string | undefined;
    customModes?: {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[] | undefined;
    currentApiConfigName?: string | undefined;
    listApiConfigMeta?: {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }[] | undefined;
    pinnedApiConfigs?: Record<string, boolean> | undefined;
    lastShownAnnouncementId?: string | undefined;
    taskHistory?: {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }[] | undefined;
    condensingApiConfigId?: string | undefined;
    customCondensingPrompt?: string | undefined;
    autoApprovalEnabled?: boolean | undefined;
    alwaysAllowReadOnly?: boolean | undefined;
    alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
    alwaysAllowWrite?: boolean | undefined;
    alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
    alwaysAllowWriteProtected?: boolean | undefined;
    writeDelayMs?: number | undefined;
    alwaysAllowBrowser?: boolean | undefined;
    alwaysApproveResubmit?: boolean | undefined;
    requestDelaySeconds?: number | undefined;
    alwaysAllowMcp?: boolean | undefined;
    alwaysAllowModeSwitch?: boolean | undefined;
    alwaysAllowSubtasks?: boolean | undefined;
    alwaysAllowExecute?: boolean | undefined;
    alwaysAllowFollowupQuestions?: boolean | undefined;
    followupAutoApproveTimeoutMs?: number | undefined;
    alwaysAllowUpdateTodoList?: boolean | undefined;
    allowedCommands?: string[] | undefined;
    deniedCommands?: string[] | undefined;
    commandExecutionTimeout?: number | undefined;
    commandTimeoutAllowlist?: string[] | undefined;
    preventCompletionWithOpenTodos?: boolean | undefined;
    allowedMaxRequests?: number | null | undefined;
    allowedMaxCost?: number | null | undefined;
    autoCondenseContext?: boolean | undefined;
    autoCondenseContextPercent?: number | undefined;
    maxConcurrentFileReads?: number | undefined;
    includeDiagnosticMessages?: boolean | undefined;
    maxDiagnosticMessages?: number | undefined;
    browserToolEnabled?: boolean | undefined;
    browserViewportSize?: string | undefined;
    screenshotQuality?: number | undefined;
    remoteBrowserEnabled?: boolean | undefined;
    remoteBrowserHost?: string | undefined;
    cachedChromeHostUrl?: string | undefined;
    enableCheckpoints?: boolean | undefined;
    ttsEnabled?: boolean | undefined;
    ttsSpeed?: number | undefined;
    soundEnabled?: boolean | undefined;
    soundVolume?: number | undefined;
    maxOpenTabsContext?: number | undefined;
    maxWorkspaceFiles?: number | undefined;
    showRooIgnoredFiles?: boolean | undefined;
    maxReadFileLine?: number | undefined;
    maxImageFileSize?: number | undefined;
    maxTotalImageSize?: number | undefined;
    terminalOutputLineLimit?: number | undefined;
    terminalOutputCharacterLimit?: number | undefined;
    terminalShellIntegrationTimeout?: number | undefined;
    terminalShellIntegrationDisabled?: boolean | undefined;
    terminalCommandDelay?: number | undefined;
    terminalPowershellCounter?: boolean | undefined;
    terminalZshClearEolMark?: boolean | undefined;
    terminalZshOhMy?: boolean | undefined;
    terminalZshP10k?: boolean | undefined;
    terminalZdotdir?: boolean | undefined;
    terminalCompressProgressBar?: boolean | undefined;
    diagnosticsEnabled?: boolean | undefined;
    experiments?: {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    } | undefined;
    codebaseIndexModels?: {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    } | undefined;
    codebaseIndexConfig?: {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    } | undefined;
    telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
    mcpEnabled?: boolean | undefined;
    enableMcpServerCreation?: boolean | undefined;
    remoteControlEnabled?: boolean | undefined;
    modeApiConfigs?: Record<string, string> | undefined;
    customModePrompts?: Record<string, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    } | undefined> | undefined;
    customSupportPrompts?: Record<string, string | undefined> | undefined;
    enhancementApiConfigId?: string | undefined;
    includeTaskHistoryInEnhance?: boolean | undefined;
    historyPreviewCollapsed?: boolean | undefined;
    profileThresholds?: Record<string, number> | undefined;
    hasOpenedModeSelector?: boolean | undefined;
    lastModeExportPath?: string | undefined;
    lastModeImportPath?: string | undefined;
    imContacts?: {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    } | undefined;
    agentA2AMode?: {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    } | null | undefined;
}>;
type GlobalSettings = z.infer<typeof globalSettingsSchema>;
declare const GLOBAL_SETTINGS_KEYS: ["diffEnabled", "fuzzyMatchThreshold", "rateLimitSeconds", "mode", "language", "customInstructions", "customModes", "currentApiConfigName", "listApiConfigMeta", "pinnedApiConfigs", "lastShownAnnouncementId", "taskHistory", "condensingApiConfigId", "customCondensingPrompt", "autoApprovalEnabled", "alwaysAllowReadOnly", "alwaysAllowReadOnlyOutsideWorkspace", "alwaysAllowWrite", "alwaysAllowWriteOutsideWorkspace", "alwaysAllowWriteProtected", "writeDelayMs", "alwaysAllowBrowser", "alwaysApproveResubmit", "requestDelaySeconds", "alwaysAllowMcp", "alwaysAllowModeSwitch", "alwaysAllowSubtasks", "alwaysAllowExecute", "alwaysAllowFollowupQuestions", "followupAutoApproveTimeoutMs", "alwaysAllowUpdateTodoList", "allowedCommands", "deniedCommands", "commandExecutionTimeout", "commandTimeoutAllowlist", "preventCompletionWithOpenTodos", "allowedMaxRequests", "allowedMaxCost", "autoCondenseContext", "autoCondenseContextPercent", "maxConcurrentFileReads", "includeDiagnosticMessages", "maxDiagnosticMessages", "browserToolEnabled", "browserViewportSize", "screenshotQuality", "remoteBrowserEnabled", "remoteBrowserHost", "cachedChromeHostUrl", "enableCheckpoints", "ttsEnabled", "ttsSpeed", "soundEnabled", "soundVolume", "maxOpenTabsContext", "maxWorkspaceFiles", "showRooIgnoredFiles", "maxReadFileLine", "maxImageFileSize", "maxTotalImageSize", "terminalOutputLineLimit", "terminalOutputCharacterLimit", "terminalShellIntegrationTimeout", "terminalShellIntegrationDisabled", "terminalCommandDelay", "terminalPowershellCounter", "terminalZshClearEolMark", "terminalZshOhMy", "terminalZshP10k", "terminalZdotdir", "terminalCompressProgressBar", "diagnosticsEnabled", "experiments", "codebaseIndexModels", "codebaseIndexConfig", "telemetrySetting", "mcpEnabled", "enableMcpServerCreation", "remoteControlEnabled", "modeApiConfigs", "customModePrompts", "customSupportPrompts", "enhancementApiConfigId", "includeTaskHistoryInEnhance", "historyPreviewCollapsed", "profileThresholds", "hasOpenedModeSelector", "lastModeExportPath", "lastModeImportPath", "imContacts", "agentA2AMode"];
/**
 * RooCodeSettings
 */
declare const rooCodeSettingsSchema: z.ZodObject<{
    codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
    codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
    includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
    todoListEnabled: z.ZodOptional<z.ZodBoolean>;
    modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
    enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
    modelMaxTokens: z.ZodOptional<z.ZodNumber>;
    modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
    verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    apiModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
    ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
    fireworksApiKey: z.ZodOptional<z.ZodString>;
    zaiApiKey: z.ZodOptional<z.ZodString>;
    zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
    sambaNovaApiKey: z.ZodOptional<z.ZodString>;
    cerebrasApiKey: z.ZodOptional<z.ZodString>;
    litellmBaseUrl: z.ZodOptional<z.ZodString>;
    litellmApiKey: z.ZodOptional<z.ZodString>;
    litellmModelId: z.ZodOptional<z.ZodString>;
    litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    chutesApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceApiKey: z.ZodOptional<z.ZodString>;
    huggingFaceModelId: z.ZodOptional<z.ZodString>;
    huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
    groqApiKey: z.ZodOptional<z.ZodString>;
    xaiApiKey: z.ZodOptional<z.ZodString>;
    fakeAi: z.ZodOptional<z.ZodUnknown>;
    requestyBaseUrl: z.ZodOptional<z.ZodString>;
    requestyApiKey: z.ZodOptional<z.ZodString>;
    requestyModelId: z.ZodOptional<z.ZodString>;
    unboundApiKey: z.ZodOptional<z.ZodString>;
    unboundModelId: z.ZodOptional<z.ZodString>;
    moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
    moonshotApiKey: z.ZodOptional<z.ZodString>;
    doubaoBaseUrl: z.ZodOptional<z.ZodString>;
    doubaoApiKey: z.ZodOptional<z.ZodString>;
    deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
    deepSeekApiKey: z.ZodOptional<z.ZodString>;
    mistralApiKey: z.ZodOptional<z.ZodString>;
    mistralCodestralUrl: z.ZodOptional<z.ZodString>;
    openAiNativeApiKey: z.ZodOptional<z.ZodString>;
    openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
    geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
    geminiCliProjectId: z.ZodOptional<z.ZodString>;
    geminiApiKey: z.ZodOptional<z.ZodString>;
    googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
    enableUrlContext: z.ZodOptional<z.ZodBoolean>;
    enableGrounding: z.ZodOptional<z.ZodBoolean>;
    lmStudioModelId: z.ZodOptional<z.ZodString>;
    lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
    lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
    lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
    vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
        vendor: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }, {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    }>>;
    ollamaModelId: z.ZodOptional<z.ZodString>;
    ollamaBaseUrl: z.ZodOptional<z.ZodString>;
    openAiBaseUrl: z.ZodOptional<z.ZodString>;
    openAiApiKey: z.ZodOptional<z.ZodString>;
    openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
    openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiModelId: z.ZodOptional<z.ZodString>;
    openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        contextWindow: z.ZodNumber;
        supportsImages: z.ZodOptional<z.ZodBoolean>;
        supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
        supportsPromptCache: z.ZodBoolean;
        supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
        supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        description: z.ZodOptional<z.ZodString>;
        modelType: z.ZodOptional<z.ZodString>;
        reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
        minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
        maxCachePoints: z.ZodOptional<z.ZodNumber>;
        cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            contextWindow: z.ZodNumber;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }, {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }, {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    }>>>;
    openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
    azureApiVersion: z.ZodOptional<z.ZodString>;
    openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
    openAiHostHeader: z.ZodOptional<z.ZodString>;
    openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    vertexKeyFile: z.ZodOptional<z.ZodString>;
    vertexJsonCredentials: z.ZodOptional<z.ZodString>;
    vertexProjectId: z.ZodOptional<z.ZodString>;
    vertexRegion: z.ZodOptional<z.ZodString>;
    awsAccessKey: z.ZodOptional<z.ZodString>;
    awsSecretKey: z.ZodOptional<z.ZodString>;
    awsSessionToken: z.ZodOptional<z.ZodString>;
    awsRegion: z.ZodOptional<z.ZodString>;
    awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
    awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    awsProfile: z.ZodOptional<z.ZodString>;
    awsUseProfile: z.ZodOptional<z.ZodBoolean>;
    awsApiKey: z.ZodOptional<z.ZodString>;
    awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
    awsCustomArn: z.ZodOptional<z.ZodString>;
    awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
    awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
    awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
    openRouterApiKey: z.ZodOptional<z.ZodString>;
    openRouterModelId: z.ZodOptional<z.ZodString>;
    openRouterBaseUrl: z.ZodOptional<z.ZodString>;
    openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
    openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
    glamaModelId: z.ZodOptional<z.ZodString>;
    glamaApiKey: z.ZodOptional<z.ZodString>;
    claudeCodePath: z.ZodOptional<z.ZodString>;
    claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
    apiKey: z.ZodOptional<z.ZodString>;
    anthropicBaseUrl: z.ZodOptional<z.ZodString>;
    anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
    anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
} & {
    currentApiConfigName: z.ZodOptional<z.ZodString>;
    listApiConfigMeta: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        modelId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }, {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }>, "many">>;
    pinnedApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodBoolean>>;
    lastShownAnnouncementId: z.ZodOptional<z.ZodString>;
    customInstructions: z.ZodOptional<z.ZodString>;
    taskHistory: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        number: z.ZodNumber;
        ts: z.ZodNumber;
        task: z.ZodString;
        tokensIn: z.ZodNumber;
        tokensOut: z.ZodNumber;
        cacheWrites: z.ZodOptional<z.ZodNumber>;
        cacheReads: z.ZodOptional<z.ZodNumber>;
        totalCost: z.ZodNumber;
        size: z.ZodOptional<z.ZodNumber>;
        workspace: z.ZodOptional<z.ZodString>;
        mode: z.ZodOptional<z.ZodString>;
        terminalNo: z.ZodOptional<z.ZodNumber>;
        source: z.ZodOptional<z.ZodEnum<["user", "agent"]>>;
        agentId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }, {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }>, "many">>;
    condensingApiConfigId: z.ZodOptional<z.ZodString>;
    customCondensingPrompt: z.ZodOptional<z.ZodString>;
    autoApprovalEnabled: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowReadOnly: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowReadOnlyOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowWrite: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowWriteOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowWriteProtected: z.ZodOptional<z.ZodBoolean>;
    writeDelayMs: z.ZodOptional<z.ZodNumber>;
    alwaysAllowBrowser: z.ZodOptional<z.ZodBoolean>;
    alwaysApproveResubmit: z.ZodOptional<z.ZodBoolean>;
    requestDelaySeconds: z.ZodOptional<z.ZodNumber>;
    alwaysAllowMcp: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowModeSwitch: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowSubtasks: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowExecute: z.ZodOptional<z.ZodBoolean>;
    alwaysAllowFollowupQuestions: z.ZodOptional<z.ZodBoolean>;
    followupAutoApproveTimeoutMs: z.ZodOptional<z.ZodNumber>;
    alwaysAllowUpdateTodoList: z.ZodOptional<z.ZodBoolean>;
    allowedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    deniedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    commandExecutionTimeout: z.ZodOptional<z.ZodNumber>;
    commandTimeoutAllowlist: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    preventCompletionWithOpenTodos: z.ZodOptional<z.ZodBoolean>;
    allowedMaxRequests: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    allowedMaxCost: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    autoCondenseContext: z.ZodOptional<z.ZodBoolean>;
    autoCondenseContextPercent: z.ZodOptional<z.ZodNumber>;
    maxConcurrentFileReads: z.ZodOptional<z.ZodNumber>;
    includeDiagnosticMessages: z.ZodOptional<z.ZodBoolean>;
    maxDiagnosticMessages: z.ZodOptional<z.ZodNumber>;
    browserToolEnabled: z.ZodOptional<z.ZodBoolean>;
    browserViewportSize: z.ZodOptional<z.ZodString>;
    screenshotQuality: z.ZodOptional<z.ZodNumber>;
    remoteBrowserEnabled: z.ZodOptional<z.ZodBoolean>;
    remoteBrowserHost: z.ZodOptional<z.ZodString>;
    cachedChromeHostUrl: z.ZodOptional<z.ZodString>;
    enableCheckpoints: z.ZodOptional<z.ZodBoolean>;
    ttsEnabled: z.ZodOptional<z.ZodBoolean>;
    ttsSpeed: z.ZodOptional<z.ZodNumber>;
    soundEnabled: z.ZodOptional<z.ZodBoolean>;
    soundVolume: z.ZodOptional<z.ZodNumber>;
    maxOpenTabsContext: z.ZodOptional<z.ZodNumber>;
    maxWorkspaceFiles: z.ZodOptional<z.ZodNumber>;
    showRooIgnoredFiles: z.ZodOptional<z.ZodBoolean>;
    maxReadFileLine: z.ZodOptional<z.ZodNumber>;
    maxImageFileSize: z.ZodOptional<z.ZodNumber>;
    maxTotalImageSize: z.ZodOptional<z.ZodNumber>;
    terminalOutputLineLimit: z.ZodOptional<z.ZodNumber>;
    terminalOutputCharacterLimit: z.ZodOptional<z.ZodNumber>;
    terminalShellIntegrationTimeout: z.ZodOptional<z.ZodNumber>;
    terminalShellIntegrationDisabled: z.ZodOptional<z.ZodBoolean>;
    terminalCommandDelay: z.ZodOptional<z.ZodNumber>;
    terminalPowershellCounter: z.ZodOptional<z.ZodBoolean>;
    terminalZshClearEolMark: z.ZodOptional<z.ZodBoolean>;
    terminalZshOhMy: z.ZodOptional<z.ZodBoolean>;
    terminalZshP10k: z.ZodOptional<z.ZodBoolean>;
    terminalZdotdir: z.ZodOptional<z.ZodBoolean>;
    terminalCompressProgressBar: z.ZodOptional<z.ZodBoolean>;
    diagnosticsEnabled: z.ZodOptional<z.ZodBoolean>;
    rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
    diffEnabled: z.ZodOptional<z.ZodBoolean>;
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    experiments: z.ZodOptional<z.ZodObject<{
        powerSteering: z.ZodOptional<z.ZodBoolean>;
        multiFileApplyDiff: z.ZodOptional<z.ZodBoolean>;
        preventFocusDisruption: z.ZodOptional<z.ZodBoolean>;
        assistantMessageParser: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    }, {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    }>>;
    codebaseIndexModels: z.ZodOptional<z.ZodObject<{
        openai: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        ollama: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        "openai-compatible": z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        gemini: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
        mistral: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            dimension: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            dimension: number;
        }, {
            dimension: number;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    }, {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    }>>;
    codebaseIndexConfig: z.ZodOptional<z.ZodObject<{
        codebaseIndexEnabled: z.ZodOptional<z.ZodBoolean>;
        codebaseIndexQdrantUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexEmbedderProvider: z.ZodOptional<z.ZodEnum<["openai", "ollama", "openai-compatible", "gemini", "mistral"]>>;
        codebaseIndexEmbedderBaseUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexEmbedderModelId: z.ZodOptional<z.ZodString>;
        codebaseIndexEmbedderModelDimension: z.ZodOptional<z.ZodNumber>;
        codebaseIndexSearchMinScore: z.ZodOptional<z.ZodNumber>;
        codebaseIndexSearchMaxResults: z.ZodOptional<z.ZodNumber>;
        codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
        codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    }, {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    }>>;
    language: z.ZodOptional<z.ZodEnum<["ca", "de", "en", "es", "fr", "hi", "id", "it", "ja", "ko", "nl", "pl", "pt-BR", "ru", "tr", "vi", "zh-CN", "zh-TW"]>>;
    telemetrySetting: z.ZodOptional<z.ZodEnum<["unset", "enabled", "disabled"]>>;
    mcpEnabled: z.ZodOptional<z.ZodBoolean>;
    enableMcpServerCreation: z.ZodOptional<z.ZodBoolean>;
    remoteControlEnabled: z.ZodOptional<z.ZodBoolean>;
    mode: z.ZodOptional<z.ZodString>;
    modeApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    customModes: z.ZodOptional<z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        name: z.ZodString;
        roleDefinition: z.ZodString;
        whenToUse: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        customInstructions: z.ZodOptional<z.ZodString>;
        groups: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
            fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }, {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }>], null>]>, "many">, ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[], ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[]>;
        source: z.ZodOptional<z.ZodEnum<["global", "project"]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }>, "many">>;
    customModePrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodObject<{
        roleDefinition: z.ZodOptional<z.ZodString>;
        whenToUse: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        customInstructions: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }>>>>;
    customSupportPrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodString>>>;
    enhancementApiConfigId: z.ZodOptional<z.ZodString>;
    includeTaskHistoryInEnhance: z.ZodOptional<z.ZodBoolean>;
    historyPreviewCollapsed: z.ZodOptional<z.ZodBoolean>;
    profileThresholds: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
    hasOpenedModeSelector: z.ZodOptional<z.ZodBoolean>;
    lastModeExportPath: z.ZodOptional<z.ZodString>;
    lastModeImportPath: z.ZodOptional<z.ZodString>;
    imContacts: z.ZodOptional<z.ZodObject<{
        friends: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            nickName: z.ZodString;
            headImage: z.ZodString;
            deleted: z.ZodBoolean;
            online: z.ZodBoolean;
            onlineWeb: z.ZodBoolean;
            onlineApp: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }, {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }>, "many">>;
        groups: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            ownerId: z.ZodNumber;
            headImage: z.ZodString;
            headImageThumb: z.ZodString;
            notice: z.ZodString;
            remarkNickName: z.ZodString;
            showNickName: z.ZodString;
            showGroupName: z.ZodString;
            remarkGroupName: z.ZodString;
            dissolve: z.ZodBoolean;
            quit: z.ZodBoolean;
            isBanned: z.ZodBoolean;
            reason: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }, {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }>, "many">>;
        lastUpdated: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    }, {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    }>>;
    agentA2AMode: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        enabled: z.ZodBoolean;
        agentId: z.ZodString;
        agentName: z.ZodString;
        serverUrl: z.ZodString;
        serverPort: z.ZodNumber;
        isDebugMode: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    }, {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
    mode?: string | undefined;
    language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
    customInstructions?: string | undefined;
    customModes?: {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[] | undefined;
    currentApiConfigName?: string | undefined;
    listApiConfigMeta?: {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }[] | undefined;
    pinnedApiConfigs?: Record<string, boolean> | undefined;
    lastShownAnnouncementId?: string | undefined;
    taskHistory?: {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }[] | undefined;
    condensingApiConfigId?: string | undefined;
    customCondensingPrompt?: string | undefined;
    autoApprovalEnabled?: boolean | undefined;
    alwaysAllowReadOnly?: boolean | undefined;
    alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
    alwaysAllowWrite?: boolean | undefined;
    alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
    alwaysAllowWriteProtected?: boolean | undefined;
    writeDelayMs?: number | undefined;
    alwaysAllowBrowser?: boolean | undefined;
    alwaysApproveResubmit?: boolean | undefined;
    requestDelaySeconds?: number | undefined;
    alwaysAllowMcp?: boolean | undefined;
    alwaysAllowModeSwitch?: boolean | undefined;
    alwaysAllowSubtasks?: boolean | undefined;
    alwaysAllowExecute?: boolean | undefined;
    alwaysAllowFollowupQuestions?: boolean | undefined;
    followupAutoApproveTimeoutMs?: number | undefined;
    alwaysAllowUpdateTodoList?: boolean | undefined;
    allowedCommands?: string[] | undefined;
    deniedCommands?: string[] | undefined;
    commandExecutionTimeout?: number | undefined;
    commandTimeoutAllowlist?: string[] | undefined;
    preventCompletionWithOpenTodos?: boolean | undefined;
    allowedMaxRequests?: number | null | undefined;
    allowedMaxCost?: number | null | undefined;
    autoCondenseContext?: boolean | undefined;
    autoCondenseContextPercent?: number | undefined;
    maxConcurrentFileReads?: number | undefined;
    includeDiagnosticMessages?: boolean | undefined;
    maxDiagnosticMessages?: number | undefined;
    browserToolEnabled?: boolean | undefined;
    browserViewportSize?: string | undefined;
    screenshotQuality?: number | undefined;
    remoteBrowserEnabled?: boolean | undefined;
    remoteBrowserHost?: string | undefined;
    cachedChromeHostUrl?: string | undefined;
    enableCheckpoints?: boolean | undefined;
    ttsEnabled?: boolean | undefined;
    ttsSpeed?: number | undefined;
    soundEnabled?: boolean | undefined;
    soundVolume?: number | undefined;
    maxOpenTabsContext?: number | undefined;
    maxWorkspaceFiles?: number | undefined;
    showRooIgnoredFiles?: boolean | undefined;
    maxReadFileLine?: number | undefined;
    maxImageFileSize?: number | undefined;
    maxTotalImageSize?: number | undefined;
    terminalOutputLineLimit?: number | undefined;
    terminalOutputCharacterLimit?: number | undefined;
    terminalShellIntegrationTimeout?: number | undefined;
    terminalShellIntegrationDisabled?: boolean | undefined;
    terminalCommandDelay?: number | undefined;
    terminalPowershellCounter?: boolean | undefined;
    terminalZshClearEolMark?: boolean | undefined;
    terminalZshOhMy?: boolean | undefined;
    terminalZshP10k?: boolean | undefined;
    terminalZdotdir?: boolean | undefined;
    terminalCompressProgressBar?: boolean | undefined;
    diagnosticsEnabled?: boolean | undefined;
    experiments?: {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    } | undefined;
    codebaseIndexModels?: {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    } | undefined;
    codebaseIndexConfig?: {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    } | undefined;
    telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
    mcpEnabled?: boolean | undefined;
    enableMcpServerCreation?: boolean | undefined;
    remoteControlEnabled?: boolean | undefined;
    modeApiConfigs?: Record<string, string> | undefined;
    customModePrompts?: Record<string, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    } | undefined> | undefined;
    customSupportPrompts?: Record<string, string | undefined> | undefined;
    enhancementApiConfigId?: string | undefined;
    includeTaskHistoryInEnhance?: boolean | undefined;
    historyPreviewCollapsed?: boolean | undefined;
    profileThresholds?: Record<string, number> | undefined;
    hasOpenedModeSelector?: boolean | undefined;
    lastModeExportPath?: string | undefined;
    lastModeImportPath?: string | undefined;
    imContacts?: {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    } | undefined;
    agentA2AMode?: {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    } | null | undefined;
}, {
    reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    includeMaxTokens?: boolean | undefined;
    diffEnabled?: boolean | undefined;
    todoListEnabled?: boolean | undefined;
    fuzzyMatchThreshold?: number | undefined;
    modelTemperature?: number | null | undefined;
    rateLimitSeconds?: number | undefined;
    consecutiveMistakeLimit?: number | undefined;
    enableReasoningEffort?: boolean | undefined;
    modelMaxTokens?: number | undefined;
    modelMaxThinkingTokens?: number | undefined;
    verbosity?: "low" | "medium" | "high" | undefined;
    apiModelId?: string | undefined;
    apiKey?: string | undefined;
    anthropicBaseUrl?: string | undefined;
    anthropicUseAuthToken?: boolean | undefined;
    anthropicBeta1MContext?: boolean | undefined;
    claudeCodePath?: string | undefined;
    claudeCodeMaxOutputTokens?: number | undefined;
    glamaModelId?: string | undefined;
    glamaApiKey?: string | undefined;
    openRouterApiKey?: string | undefined;
    openRouterModelId?: string | undefined;
    openRouterBaseUrl?: string | undefined;
    openRouterSpecificProvider?: string | undefined;
    openRouterUseMiddleOutTransform?: boolean | undefined;
    awsAccessKey?: string | undefined;
    awsSecretKey?: string | undefined;
    awsSessionToken?: string | undefined;
    awsRegion?: string | undefined;
    awsUseCrossRegionInference?: boolean | undefined;
    awsUsePromptCache?: boolean | undefined;
    awsProfile?: string | undefined;
    awsUseProfile?: boolean | undefined;
    awsApiKey?: string | undefined;
    awsUseApiKey?: boolean | undefined;
    awsCustomArn?: string | undefined;
    awsModelContextWindow?: number | undefined;
    awsBedrockEndpointEnabled?: boolean | undefined;
    awsBedrockEndpoint?: string | undefined;
    vertexKeyFile?: string | undefined;
    vertexJsonCredentials?: string | undefined;
    vertexProjectId?: string | undefined;
    vertexRegion?: string | undefined;
    openAiBaseUrl?: string | undefined;
    openAiApiKey?: string | undefined;
    openAiLegacyFormat?: boolean | undefined;
    openAiR1FormatEnabled?: boolean | undefined;
    openAiModelId?: string | undefined;
    openAiCustomModelInfo?: {
        contextWindow: number;
        supportsPromptCache: boolean;
        maxTokens?: number | null | undefined;
        maxThinkingTokens?: number | null | undefined;
        supportsImages?: boolean | undefined;
        supportsComputerUse?: boolean | undefined;
        supportsVerbosity?: boolean | undefined;
        supportsReasoningBudget?: boolean | undefined;
        requiredReasoningBudget?: boolean | undefined;
        supportsReasoningEffort?: boolean | undefined;
        supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
        description?: string | undefined;
        modelType?: string | undefined;
        reasoningEffort?: "low" | "medium" | "high" | undefined;
        minTokensPerCachePoint?: number | undefined;
        maxCachePoints?: number | undefined;
        cachableFields?: string[] | undefined;
        tiers?: {
            contextWindow: number;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
        }[] | undefined;
    } | null | undefined;
    openAiUseAzure?: boolean | undefined;
    azureApiVersion?: string | undefined;
    openAiStreamingEnabled?: boolean | undefined;
    openAiHostHeader?: string | undefined;
    openAiHeaders?: Record<string, string> | undefined;
    ollamaModelId?: string | undefined;
    ollamaBaseUrl?: string | undefined;
    vsCodeLmModelSelector?: {
        id?: string | undefined;
        vendor?: string | undefined;
        family?: string | undefined;
        version?: string | undefined;
    } | undefined;
    lmStudioModelId?: string | undefined;
    lmStudioBaseUrl?: string | undefined;
    lmStudioDraftModelId?: string | undefined;
    lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    geminiApiKey?: string | undefined;
    googleGeminiBaseUrl?: string | undefined;
    enableUrlContext?: boolean | undefined;
    enableGrounding?: boolean | undefined;
    geminiCliOAuthPath?: string | undefined;
    geminiCliProjectId?: string | undefined;
    openAiNativeApiKey?: string | undefined;
    openAiNativeBaseUrl?: string | undefined;
    mistralApiKey?: string | undefined;
    mistralCodestralUrl?: string | undefined;
    deepSeekBaseUrl?: string | undefined;
    deepSeekApiKey?: string | undefined;
    doubaoBaseUrl?: string | undefined;
    doubaoApiKey?: string | undefined;
    moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
    moonshotApiKey?: string | undefined;
    unboundApiKey?: string | undefined;
    unboundModelId?: string | undefined;
    requestyBaseUrl?: string | undefined;
    requestyApiKey?: string | undefined;
    requestyModelId?: string | undefined;
    fakeAi?: unknown;
    xaiApiKey?: string | undefined;
    groqApiKey?: string | undefined;
    huggingFaceApiKey?: string | undefined;
    huggingFaceModelId?: string | undefined;
    huggingFaceInferenceProvider?: string | undefined;
    chutesApiKey?: string | undefined;
    litellmBaseUrl?: string | undefined;
    litellmApiKey?: string | undefined;
    litellmModelId?: string | undefined;
    litellmUsePromptCache?: boolean | undefined;
    cerebrasApiKey?: string | undefined;
    sambaNovaApiKey?: string | undefined;
    zaiApiKey?: string | undefined;
    zaiApiLine?: "china" | "international" | undefined;
    fireworksApiKey?: string | undefined;
    ioIntelligenceModelId?: string | undefined;
    ioIntelligenceApiKey?: string | undefined;
    mode?: string | undefined;
    language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
    customInstructions?: string | undefined;
    customModes?: {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[] | undefined;
    currentApiConfigName?: string | undefined;
    listApiConfigMeta?: {
        id: string;
        name: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
    }[] | undefined;
    pinnedApiConfigs?: Record<string, boolean> | undefined;
    lastShownAnnouncementId?: string | undefined;
    taskHistory?: {
        number: number;
        id: string;
        task: string;
        ts: number;
        totalCost: number;
        tokensIn: number;
        tokensOut: number;
        mode?: string | undefined;
        agentId?: string | undefined;
        cacheWrites?: number | undefined;
        cacheReads?: number | undefined;
        size?: number | undefined;
        workspace?: string | undefined;
        terminalNo?: number | undefined;
        source?: "agent" | "user" | undefined;
    }[] | undefined;
    condensingApiConfigId?: string | undefined;
    customCondensingPrompt?: string | undefined;
    autoApprovalEnabled?: boolean | undefined;
    alwaysAllowReadOnly?: boolean | undefined;
    alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
    alwaysAllowWrite?: boolean | undefined;
    alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
    alwaysAllowWriteProtected?: boolean | undefined;
    writeDelayMs?: number | undefined;
    alwaysAllowBrowser?: boolean | undefined;
    alwaysApproveResubmit?: boolean | undefined;
    requestDelaySeconds?: number | undefined;
    alwaysAllowMcp?: boolean | undefined;
    alwaysAllowModeSwitch?: boolean | undefined;
    alwaysAllowSubtasks?: boolean | undefined;
    alwaysAllowExecute?: boolean | undefined;
    alwaysAllowFollowupQuestions?: boolean | undefined;
    followupAutoApproveTimeoutMs?: number | undefined;
    alwaysAllowUpdateTodoList?: boolean | undefined;
    allowedCommands?: string[] | undefined;
    deniedCommands?: string[] | undefined;
    commandExecutionTimeout?: number | undefined;
    commandTimeoutAllowlist?: string[] | undefined;
    preventCompletionWithOpenTodos?: boolean | undefined;
    allowedMaxRequests?: number | null | undefined;
    allowedMaxCost?: number | null | undefined;
    autoCondenseContext?: boolean | undefined;
    autoCondenseContextPercent?: number | undefined;
    maxConcurrentFileReads?: number | undefined;
    includeDiagnosticMessages?: boolean | undefined;
    maxDiagnosticMessages?: number | undefined;
    browserToolEnabled?: boolean | undefined;
    browserViewportSize?: string | undefined;
    screenshotQuality?: number | undefined;
    remoteBrowserEnabled?: boolean | undefined;
    remoteBrowserHost?: string | undefined;
    cachedChromeHostUrl?: string | undefined;
    enableCheckpoints?: boolean | undefined;
    ttsEnabled?: boolean | undefined;
    ttsSpeed?: number | undefined;
    soundEnabled?: boolean | undefined;
    soundVolume?: number | undefined;
    maxOpenTabsContext?: number | undefined;
    maxWorkspaceFiles?: number | undefined;
    showRooIgnoredFiles?: boolean | undefined;
    maxReadFileLine?: number | undefined;
    maxImageFileSize?: number | undefined;
    maxTotalImageSize?: number | undefined;
    terminalOutputLineLimit?: number | undefined;
    terminalOutputCharacterLimit?: number | undefined;
    terminalShellIntegrationTimeout?: number | undefined;
    terminalShellIntegrationDisabled?: boolean | undefined;
    terminalCommandDelay?: number | undefined;
    terminalPowershellCounter?: boolean | undefined;
    terminalZshClearEolMark?: boolean | undefined;
    terminalZshOhMy?: boolean | undefined;
    terminalZshP10k?: boolean | undefined;
    terminalZdotdir?: boolean | undefined;
    terminalCompressProgressBar?: boolean | undefined;
    diagnosticsEnabled?: boolean | undefined;
    experiments?: {
        powerSteering?: boolean | undefined;
        multiFileApplyDiff?: boolean | undefined;
        preventFocusDisruption?: boolean | undefined;
        assistantMessageParser?: boolean | undefined;
    } | undefined;
    codebaseIndexModels?: {
        openai?: Record<string, {
            dimension: number;
        }> | undefined;
        ollama?: Record<string, {
            dimension: number;
        }> | undefined;
        "openai-compatible"?: Record<string, {
            dimension: number;
        }> | undefined;
        gemini?: Record<string, {
            dimension: number;
        }> | undefined;
        mistral?: Record<string, {
            dimension: number;
        }> | undefined;
    } | undefined;
    codebaseIndexConfig?: {
        codebaseIndexEnabled?: boolean | undefined;
        codebaseIndexQdrantUrl?: string | undefined;
        codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
        codebaseIndexEmbedderBaseUrl?: string | undefined;
        codebaseIndexEmbedderModelId?: string | undefined;
        codebaseIndexEmbedderModelDimension?: number | undefined;
        codebaseIndexSearchMinScore?: number | undefined;
        codebaseIndexSearchMaxResults?: number | undefined;
        codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
        codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    } | undefined;
    telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
    mcpEnabled?: boolean | undefined;
    enableMcpServerCreation?: boolean | undefined;
    remoteControlEnabled?: boolean | undefined;
    modeApiConfigs?: Record<string, string> | undefined;
    customModePrompts?: Record<string, {
        description?: string | undefined;
        roleDefinition?: string | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    } | undefined> | undefined;
    customSupportPrompts?: Record<string, string | undefined> | undefined;
    enhancementApiConfigId?: string | undefined;
    includeTaskHistoryInEnhance?: boolean | undefined;
    historyPreviewCollapsed?: boolean | undefined;
    profileThresholds?: Record<string, number> | undefined;
    hasOpenedModeSelector?: boolean | undefined;
    lastModeExportPath?: string | undefined;
    lastModeImportPath?: string | undefined;
    imContacts?: {
        friends?: {
            id: number;
            online: boolean;
            nickName: string;
            headImage: string;
            deleted: boolean;
            onlineWeb: boolean;
            onlineApp: boolean;
        }[] | undefined;
        groups?: {
            id: number;
            name: string;
            headImage: string;
            ownerId: number;
            headImageThumb: string;
            notice: string;
            remarkNickName: string;
            showNickName: string;
            showGroupName: string;
            remarkGroupName: string;
            dissolve: boolean;
            quit: boolean;
            isBanned: boolean;
            reason: string;
        }[] | undefined;
        lastUpdated?: number | undefined;
    } | undefined;
    agentA2AMode?: {
        enabled: boolean;
        serverPort: number;
        serverUrl: string;
        agentId: string;
        agentName: string;
        isDebugMode?: boolean | undefined;
    } | null | undefined;
}>;
type RooCodeSettings = GlobalSettings & ProviderSettings;
/**
 * SecretState
 */
declare const SECRET_STATE_KEYS: readonly ["apiKey", "glamaApiKey", "openRouterApiKey", "awsAccessKey", "awsApiKey", "awsSecretKey", "awsSessionToken", "openAiApiKey", "geminiApiKey", "openAiNativeApiKey", "cerebrasApiKey", "deepSeekApiKey", "moonshotApiKey", "mistralApiKey", "unboundApiKey", "requestyApiKey", "xaiApiKey", "groqApiKey", "chutesApiKey", "litellmApiKey", "codeIndexOpenAiKey", "codeIndexQdrantApiKey", "codebaseIndexOpenAiCompatibleApiKey", "codebaseIndexGeminiApiKey", "codebaseIndexMistralApiKey", "huggingFaceApiKey", "sambaNovaApiKey", "fireworksApiKey", "ioIntelligenceApiKey"];
type SecretState = Pick<ProviderSettings, (typeof SECRET_STATE_KEYS)[number]>;
declare const isSecretStateKey: (key: string) => key is Keys<SecretState>;
/**
 * GlobalState
 */
type GlobalState = Omit<RooCodeSettings, Keys<SecretState>>;
declare const GLOBAL_STATE_KEYS: Keys<GlobalState>[];
declare const isGlobalStateKey: (key: string) => key is Keys<GlobalState>;
/**
 * Evals
 */
declare const EVALS_SETTINGS: RooCodeSettings;
declare const EVALS_TIMEOUT: number;

/**
 * IpcMessageType
 */
declare enum IpcMessageType {
    Connect = "Connect",
    Disconnect = "Disconnect",
    Ack = "Ack",
    TaskCommand = "TaskCommand",
    TaskEvent = "TaskEvent"
}
/**
 * IpcOrigin
 */
declare enum IpcOrigin {
    Client = "client",
    Server = "server"
}
/**
 * Ack
 */
declare const ackSchema: z.ZodObject<{
    clientId: z.ZodString;
    pid: z.ZodNumber;
    ppid: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    clientId: string;
    pid: number;
    ppid: number;
}, {
    clientId: string;
    pid: number;
    ppid: number;
}>;
type Ack = z.infer<typeof ackSchema>;
/**
 * TaskCommandName
 */
declare enum TaskCommandName {
    StartNewTask = "StartNewTask",
    CancelTask = "CancelTask",
    CloseTask = "CloseTask"
}
/**
 * TaskCommand
 */
declare const taskCommandSchema: z.ZodDiscriminatedUnion<"commandName", [z.ZodObject<{
    commandName: z.ZodLiteral<TaskCommandName.StartNewTask>;
    data: z.ZodObject<{
        configuration: z.ZodObject<{
            codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
            codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
            codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
            codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
            codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
            codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
            codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
            includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
            todoListEnabled: z.ZodOptional<z.ZodBoolean>;
            modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
            enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
            reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
            modelMaxTokens: z.ZodOptional<z.ZodNumber>;
            modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
            verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            apiModelId: z.ZodOptional<z.ZodString>;
            ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
            ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
            fireworksApiKey: z.ZodOptional<z.ZodString>;
            zaiApiKey: z.ZodOptional<z.ZodString>;
            zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
            sambaNovaApiKey: z.ZodOptional<z.ZodString>;
            cerebrasApiKey: z.ZodOptional<z.ZodString>;
            litellmBaseUrl: z.ZodOptional<z.ZodString>;
            litellmApiKey: z.ZodOptional<z.ZodString>;
            litellmModelId: z.ZodOptional<z.ZodString>;
            litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
            chutesApiKey: z.ZodOptional<z.ZodString>;
            huggingFaceApiKey: z.ZodOptional<z.ZodString>;
            huggingFaceModelId: z.ZodOptional<z.ZodString>;
            huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
            groqApiKey: z.ZodOptional<z.ZodString>;
            xaiApiKey: z.ZodOptional<z.ZodString>;
            fakeAi: z.ZodOptional<z.ZodUnknown>;
            requestyBaseUrl: z.ZodOptional<z.ZodString>;
            requestyApiKey: z.ZodOptional<z.ZodString>;
            requestyModelId: z.ZodOptional<z.ZodString>;
            unboundApiKey: z.ZodOptional<z.ZodString>;
            unboundModelId: z.ZodOptional<z.ZodString>;
            moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
            moonshotApiKey: z.ZodOptional<z.ZodString>;
            doubaoBaseUrl: z.ZodOptional<z.ZodString>;
            doubaoApiKey: z.ZodOptional<z.ZodString>;
            deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
            deepSeekApiKey: z.ZodOptional<z.ZodString>;
            mistralApiKey: z.ZodOptional<z.ZodString>;
            mistralCodestralUrl: z.ZodOptional<z.ZodString>;
            openAiNativeApiKey: z.ZodOptional<z.ZodString>;
            openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
            geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
            geminiCliProjectId: z.ZodOptional<z.ZodString>;
            geminiApiKey: z.ZodOptional<z.ZodString>;
            googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
            enableUrlContext: z.ZodOptional<z.ZodBoolean>;
            enableGrounding: z.ZodOptional<z.ZodBoolean>;
            lmStudioModelId: z.ZodOptional<z.ZodString>;
            lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
            lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
            lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
            vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
                vendor: z.ZodOptional<z.ZodString>;
                family: z.ZodOptional<z.ZodString>;
                version: z.ZodOptional<z.ZodString>;
                id: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            }, {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            }>>;
            ollamaModelId: z.ZodOptional<z.ZodString>;
            ollamaBaseUrl: z.ZodOptional<z.ZodString>;
            openAiBaseUrl: z.ZodOptional<z.ZodString>;
            openAiApiKey: z.ZodOptional<z.ZodString>;
            openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
            openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
            openAiModelId: z.ZodOptional<z.ZodString>;
            openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                contextWindow: z.ZodNumber;
                supportsImages: z.ZodOptional<z.ZodBoolean>;
                supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
                supportsPromptCache: z.ZodBoolean;
                supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
                supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
                requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
                supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
                supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
                inputPrice: z.ZodOptional<z.ZodNumber>;
                outputPrice: z.ZodOptional<z.ZodNumber>;
                cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
                description: z.ZodOptional<z.ZodString>;
                modelType: z.ZodOptional<z.ZodString>;
                reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
                maxCachePoints: z.ZodOptional<z.ZodNumber>;
                cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    contextWindow: z.ZodNumber;
                    inputPrice: z.ZodOptional<z.ZodNumber>;
                    outputPrice: z.ZodOptional<z.ZodNumber>;
                    cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                    cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }, {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            }, {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            }>>>;
            openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
            azureApiVersion: z.ZodOptional<z.ZodString>;
            openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
            openAiHostHeader: z.ZodOptional<z.ZodString>;
            openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            vertexKeyFile: z.ZodOptional<z.ZodString>;
            vertexJsonCredentials: z.ZodOptional<z.ZodString>;
            vertexProjectId: z.ZodOptional<z.ZodString>;
            vertexRegion: z.ZodOptional<z.ZodString>;
            awsAccessKey: z.ZodOptional<z.ZodString>;
            awsSecretKey: z.ZodOptional<z.ZodString>;
            awsSessionToken: z.ZodOptional<z.ZodString>;
            awsRegion: z.ZodOptional<z.ZodString>;
            awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
            awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
            awsProfile: z.ZodOptional<z.ZodString>;
            awsUseProfile: z.ZodOptional<z.ZodBoolean>;
            awsApiKey: z.ZodOptional<z.ZodString>;
            awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
            awsCustomArn: z.ZodOptional<z.ZodString>;
            awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
            awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
            awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
            openRouterApiKey: z.ZodOptional<z.ZodString>;
            openRouterModelId: z.ZodOptional<z.ZodString>;
            openRouterBaseUrl: z.ZodOptional<z.ZodString>;
            openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
            openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
            glamaModelId: z.ZodOptional<z.ZodString>;
            glamaApiKey: z.ZodOptional<z.ZodString>;
            claudeCodePath: z.ZodOptional<z.ZodString>;
            claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
            apiKey: z.ZodOptional<z.ZodString>;
            anthropicBaseUrl: z.ZodOptional<z.ZodString>;
            anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
            anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
            apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        } & {
            currentApiConfigName: z.ZodOptional<z.ZodString>;
            listApiConfigMeta: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
                modelId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }, {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }>, "many">>;
            pinnedApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodBoolean>>;
            lastShownAnnouncementId: z.ZodOptional<z.ZodString>;
            customInstructions: z.ZodOptional<z.ZodString>;
            taskHistory: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                number: z.ZodNumber;
                ts: z.ZodNumber;
                task: z.ZodString;
                tokensIn: z.ZodNumber;
                tokensOut: z.ZodNumber;
                cacheWrites: z.ZodOptional<z.ZodNumber>;
                cacheReads: z.ZodOptional<z.ZodNumber>;
                totalCost: z.ZodNumber;
                size: z.ZodOptional<z.ZodNumber>;
                workspace: z.ZodOptional<z.ZodString>;
                mode: z.ZodOptional<z.ZodString>;
                terminalNo: z.ZodOptional<z.ZodNumber>;
                source: z.ZodOptional<z.ZodEnum<["user", "agent"]>>;
                agentId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }, {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }>, "many">>;
            condensingApiConfigId: z.ZodOptional<z.ZodString>;
            customCondensingPrompt: z.ZodOptional<z.ZodString>;
            autoApprovalEnabled: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowReadOnly: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowReadOnlyOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowWrite: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowWriteOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowWriteProtected: z.ZodOptional<z.ZodBoolean>;
            writeDelayMs: z.ZodOptional<z.ZodNumber>;
            alwaysAllowBrowser: z.ZodOptional<z.ZodBoolean>;
            alwaysApproveResubmit: z.ZodOptional<z.ZodBoolean>;
            requestDelaySeconds: z.ZodOptional<z.ZodNumber>;
            alwaysAllowMcp: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowModeSwitch: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowSubtasks: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowExecute: z.ZodOptional<z.ZodBoolean>;
            alwaysAllowFollowupQuestions: z.ZodOptional<z.ZodBoolean>;
            followupAutoApproveTimeoutMs: z.ZodOptional<z.ZodNumber>;
            alwaysAllowUpdateTodoList: z.ZodOptional<z.ZodBoolean>;
            allowedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            deniedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            commandExecutionTimeout: z.ZodOptional<z.ZodNumber>;
            commandTimeoutAllowlist: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            preventCompletionWithOpenTodos: z.ZodOptional<z.ZodBoolean>;
            allowedMaxRequests: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            allowedMaxCost: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            autoCondenseContext: z.ZodOptional<z.ZodBoolean>;
            autoCondenseContextPercent: z.ZodOptional<z.ZodNumber>;
            maxConcurrentFileReads: z.ZodOptional<z.ZodNumber>;
            includeDiagnosticMessages: z.ZodOptional<z.ZodBoolean>;
            maxDiagnosticMessages: z.ZodOptional<z.ZodNumber>;
            browserToolEnabled: z.ZodOptional<z.ZodBoolean>;
            browserViewportSize: z.ZodOptional<z.ZodString>;
            screenshotQuality: z.ZodOptional<z.ZodNumber>;
            remoteBrowserEnabled: z.ZodOptional<z.ZodBoolean>;
            remoteBrowserHost: z.ZodOptional<z.ZodString>;
            cachedChromeHostUrl: z.ZodOptional<z.ZodString>;
            enableCheckpoints: z.ZodOptional<z.ZodBoolean>;
            ttsEnabled: z.ZodOptional<z.ZodBoolean>;
            ttsSpeed: z.ZodOptional<z.ZodNumber>;
            soundEnabled: z.ZodOptional<z.ZodBoolean>;
            soundVolume: z.ZodOptional<z.ZodNumber>;
            maxOpenTabsContext: z.ZodOptional<z.ZodNumber>;
            maxWorkspaceFiles: z.ZodOptional<z.ZodNumber>;
            showRooIgnoredFiles: z.ZodOptional<z.ZodBoolean>;
            maxReadFileLine: z.ZodOptional<z.ZodNumber>;
            maxImageFileSize: z.ZodOptional<z.ZodNumber>;
            maxTotalImageSize: z.ZodOptional<z.ZodNumber>;
            terminalOutputLineLimit: z.ZodOptional<z.ZodNumber>;
            terminalOutputCharacterLimit: z.ZodOptional<z.ZodNumber>;
            terminalShellIntegrationTimeout: z.ZodOptional<z.ZodNumber>;
            terminalShellIntegrationDisabled: z.ZodOptional<z.ZodBoolean>;
            terminalCommandDelay: z.ZodOptional<z.ZodNumber>;
            terminalPowershellCounter: z.ZodOptional<z.ZodBoolean>;
            terminalZshClearEolMark: z.ZodOptional<z.ZodBoolean>;
            terminalZshOhMy: z.ZodOptional<z.ZodBoolean>;
            terminalZshP10k: z.ZodOptional<z.ZodBoolean>;
            terminalZdotdir: z.ZodOptional<z.ZodBoolean>;
            terminalCompressProgressBar: z.ZodOptional<z.ZodBoolean>;
            diagnosticsEnabled: z.ZodOptional<z.ZodBoolean>;
            rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
            diffEnabled: z.ZodOptional<z.ZodBoolean>;
            fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
            experiments: z.ZodOptional<z.ZodObject<{
                powerSteering: z.ZodOptional<z.ZodBoolean>;
                multiFileApplyDiff: z.ZodOptional<z.ZodBoolean>;
                preventFocusDisruption: z.ZodOptional<z.ZodBoolean>;
                assistantMessageParser: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            }, {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            }>>;
            codebaseIndexModels: z.ZodOptional<z.ZodObject<{
                openai: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    dimension: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    dimension: number;
                }, {
                    dimension: number;
                }>>>;
                ollama: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    dimension: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    dimension: number;
                }, {
                    dimension: number;
                }>>>;
                "openai-compatible": z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    dimension: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    dimension: number;
                }, {
                    dimension: number;
                }>>>;
                gemini: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    dimension: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    dimension: number;
                }, {
                    dimension: number;
                }>>>;
                mistral: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                    dimension: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    dimension: number;
                }, {
                    dimension: number;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            }, {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            }>>;
            codebaseIndexConfig: z.ZodOptional<z.ZodObject<{
                codebaseIndexEnabled: z.ZodOptional<z.ZodBoolean>;
                codebaseIndexQdrantUrl: z.ZodOptional<z.ZodString>;
                codebaseIndexEmbedderProvider: z.ZodOptional<z.ZodEnum<["openai", "ollama", "openai-compatible", "gemini", "mistral"]>>;
                codebaseIndexEmbedderBaseUrl: z.ZodOptional<z.ZodString>;
                codebaseIndexEmbedderModelId: z.ZodOptional<z.ZodString>;
                codebaseIndexEmbedderModelDimension: z.ZodOptional<z.ZodNumber>;
                codebaseIndexSearchMinScore: z.ZodOptional<z.ZodNumber>;
                codebaseIndexSearchMaxResults: z.ZodOptional<z.ZodNumber>;
                codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
                codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            }, {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            }>>;
            language: z.ZodOptional<z.ZodEnum<["ca", "de", "en", "es", "fr", "hi", "id", "it", "ja", "ko", "nl", "pl", "pt-BR", "ru", "tr", "vi", "zh-CN", "zh-TW"]>>;
            telemetrySetting: z.ZodOptional<z.ZodEnum<["unset", "enabled", "disabled"]>>;
            mcpEnabled: z.ZodOptional<z.ZodBoolean>;
            enableMcpServerCreation: z.ZodOptional<z.ZodBoolean>;
            remoteControlEnabled: z.ZodOptional<z.ZodBoolean>;
            mode: z.ZodOptional<z.ZodString>;
            modeApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            customModes: z.ZodOptional<z.ZodArray<z.ZodObject<{
                slug: z.ZodString;
                name: z.ZodString;
                roleDefinition: z.ZodString;
                whenToUse: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                customInstructions: z.ZodOptional<z.ZodString>;
                groups: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
                    fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
                    description: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }, {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }>], null>]>, "many">, ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[], ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[]>;
                source: z.ZodOptional<z.ZodEnum<["global", "project"]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }, {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }>, "many">>;
            customModePrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodObject<{
                roleDefinition: z.ZodOptional<z.ZodString>;
                whenToUse: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
                customInstructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }>>>>;
            customSupportPrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodString>>>;
            enhancementApiConfigId: z.ZodOptional<z.ZodString>;
            includeTaskHistoryInEnhance: z.ZodOptional<z.ZodBoolean>;
            historyPreviewCollapsed: z.ZodOptional<z.ZodBoolean>;
            profileThresholds: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
            hasOpenedModeSelector: z.ZodOptional<z.ZodBoolean>;
            lastModeExportPath: z.ZodOptional<z.ZodString>;
            lastModeImportPath: z.ZodOptional<z.ZodString>;
            imContacts: z.ZodOptional<z.ZodObject<{
                friends: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    nickName: z.ZodString;
                    headImage: z.ZodString;
                    deleted: z.ZodBoolean;
                    online: z.ZodBoolean;
                    onlineWeb: z.ZodBoolean;
                    onlineApp: z.ZodBoolean;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }, {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }>, "many">>;
                groups: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodNumber;
                    name: z.ZodString;
                    ownerId: z.ZodNumber;
                    headImage: z.ZodString;
                    headImageThumb: z.ZodString;
                    notice: z.ZodString;
                    remarkNickName: z.ZodString;
                    showNickName: z.ZodString;
                    showGroupName: z.ZodString;
                    remarkGroupName: z.ZodString;
                    dissolve: z.ZodBoolean;
                    quit: z.ZodBoolean;
                    isBanned: z.ZodBoolean;
                    reason: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }, {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }>, "many">>;
                lastUpdated: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            }, {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            }>>;
            agentA2AMode: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                enabled: z.ZodBoolean;
                agentId: z.ZodString;
                agentName: z.ZodString;
                serverUrl: z.ZodString;
                serverPort: z.ZodNumber;
                isDebugMode: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            }, {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            mode?: string | undefined;
            language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
            customInstructions?: string | undefined;
            customModes?: {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }[] | undefined;
            currentApiConfigName?: string | undefined;
            listApiConfigMeta?: {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }[] | undefined;
            pinnedApiConfigs?: Record<string, boolean> | undefined;
            lastShownAnnouncementId?: string | undefined;
            taskHistory?: {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }[] | undefined;
            condensingApiConfigId?: string | undefined;
            customCondensingPrompt?: string | undefined;
            autoApprovalEnabled?: boolean | undefined;
            alwaysAllowReadOnly?: boolean | undefined;
            alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
            alwaysAllowWrite?: boolean | undefined;
            alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
            alwaysAllowWriteProtected?: boolean | undefined;
            writeDelayMs?: number | undefined;
            alwaysAllowBrowser?: boolean | undefined;
            alwaysApproveResubmit?: boolean | undefined;
            requestDelaySeconds?: number | undefined;
            alwaysAllowMcp?: boolean | undefined;
            alwaysAllowModeSwitch?: boolean | undefined;
            alwaysAllowSubtasks?: boolean | undefined;
            alwaysAllowExecute?: boolean | undefined;
            alwaysAllowFollowupQuestions?: boolean | undefined;
            followupAutoApproveTimeoutMs?: number | undefined;
            alwaysAllowUpdateTodoList?: boolean | undefined;
            allowedCommands?: string[] | undefined;
            deniedCommands?: string[] | undefined;
            commandExecutionTimeout?: number | undefined;
            commandTimeoutAllowlist?: string[] | undefined;
            preventCompletionWithOpenTodos?: boolean | undefined;
            allowedMaxRequests?: number | null | undefined;
            allowedMaxCost?: number | null | undefined;
            autoCondenseContext?: boolean | undefined;
            autoCondenseContextPercent?: number | undefined;
            maxConcurrentFileReads?: number | undefined;
            includeDiagnosticMessages?: boolean | undefined;
            maxDiagnosticMessages?: number | undefined;
            browserToolEnabled?: boolean | undefined;
            browserViewportSize?: string | undefined;
            screenshotQuality?: number | undefined;
            remoteBrowserEnabled?: boolean | undefined;
            remoteBrowserHost?: string | undefined;
            cachedChromeHostUrl?: string | undefined;
            enableCheckpoints?: boolean | undefined;
            ttsEnabled?: boolean | undefined;
            ttsSpeed?: number | undefined;
            soundEnabled?: boolean | undefined;
            soundVolume?: number | undefined;
            maxOpenTabsContext?: number | undefined;
            maxWorkspaceFiles?: number | undefined;
            showRooIgnoredFiles?: boolean | undefined;
            maxReadFileLine?: number | undefined;
            maxImageFileSize?: number | undefined;
            maxTotalImageSize?: number | undefined;
            terminalOutputLineLimit?: number | undefined;
            terminalOutputCharacterLimit?: number | undefined;
            terminalShellIntegrationTimeout?: number | undefined;
            terminalShellIntegrationDisabled?: boolean | undefined;
            terminalCommandDelay?: number | undefined;
            terminalPowershellCounter?: boolean | undefined;
            terminalZshClearEolMark?: boolean | undefined;
            terminalZshOhMy?: boolean | undefined;
            terminalZshP10k?: boolean | undefined;
            terminalZdotdir?: boolean | undefined;
            terminalCompressProgressBar?: boolean | undefined;
            diagnosticsEnabled?: boolean | undefined;
            experiments?: {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            } | undefined;
            codebaseIndexModels?: {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            } | undefined;
            codebaseIndexConfig?: {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            } | undefined;
            telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
            mcpEnabled?: boolean | undefined;
            enableMcpServerCreation?: boolean | undefined;
            remoteControlEnabled?: boolean | undefined;
            modeApiConfigs?: Record<string, string> | undefined;
            customModePrompts?: Record<string, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            } | undefined> | undefined;
            customSupportPrompts?: Record<string, string | undefined> | undefined;
            enhancementApiConfigId?: string | undefined;
            includeTaskHistoryInEnhance?: boolean | undefined;
            historyPreviewCollapsed?: boolean | undefined;
            profileThresholds?: Record<string, number> | undefined;
            hasOpenedModeSelector?: boolean | undefined;
            lastModeExportPath?: string | undefined;
            lastModeImportPath?: string | undefined;
            imContacts?: {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            } | undefined;
            agentA2AMode?: {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            } | null | undefined;
        }, {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            mode?: string | undefined;
            language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
            customInstructions?: string | undefined;
            customModes?: {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }[] | undefined;
            currentApiConfigName?: string | undefined;
            listApiConfigMeta?: {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }[] | undefined;
            pinnedApiConfigs?: Record<string, boolean> | undefined;
            lastShownAnnouncementId?: string | undefined;
            taskHistory?: {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }[] | undefined;
            condensingApiConfigId?: string | undefined;
            customCondensingPrompt?: string | undefined;
            autoApprovalEnabled?: boolean | undefined;
            alwaysAllowReadOnly?: boolean | undefined;
            alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
            alwaysAllowWrite?: boolean | undefined;
            alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
            alwaysAllowWriteProtected?: boolean | undefined;
            writeDelayMs?: number | undefined;
            alwaysAllowBrowser?: boolean | undefined;
            alwaysApproveResubmit?: boolean | undefined;
            requestDelaySeconds?: number | undefined;
            alwaysAllowMcp?: boolean | undefined;
            alwaysAllowModeSwitch?: boolean | undefined;
            alwaysAllowSubtasks?: boolean | undefined;
            alwaysAllowExecute?: boolean | undefined;
            alwaysAllowFollowupQuestions?: boolean | undefined;
            followupAutoApproveTimeoutMs?: number | undefined;
            alwaysAllowUpdateTodoList?: boolean | undefined;
            allowedCommands?: string[] | undefined;
            deniedCommands?: string[] | undefined;
            commandExecutionTimeout?: number | undefined;
            commandTimeoutAllowlist?: string[] | undefined;
            preventCompletionWithOpenTodos?: boolean | undefined;
            allowedMaxRequests?: number | null | undefined;
            allowedMaxCost?: number | null | undefined;
            autoCondenseContext?: boolean | undefined;
            autoCondenseContextPercent?: number | undefined;
            maxConcurrentFileReads?: number | undefined;
            includeDiagnosticMessages?: boolean | undefined;
            maxDiagnosticMessages?: number | undefined;
            browserToolEnabled?: boolean | undefined;
            browserViewportSize?: string | undefined;
            screenshotQuality?: number | undefined;
            remoteBrowserEnabled?: boolean | undefined;
            remoteBrowserHost?: string | undefined;
            cachedChromeHostUrl?: string | undefined;
            enableCheckpoints?: boolean | undefined;
            ttsEnabled?: boolean | undefined;
            ttsSpeed?: number | undefined;
            soundEnabled?: boolean | undefined;
            soundVolume?: number | undefined;
            maxOpenTabsContext?: number | undefined;
            maxWorkspaceFiles?: number | undefined;
            showRooIgnoredFiles?: boolean | undefined;
            maxReadFileLine?: number | undefined;
            maxImageFileSize?: number | undefined;
            maxTotalImageSize?: number | undefined;
            terminalOutputLineLimit?: number | undefined;
            terminalOutputCharacterLimit?: number | undefined;
            terminalShellIntegrationTimeout?: number | undefined;
            terminalShellIntegrationDisabled?: boolean | undefined;
            terminalCommandDelay?: number | undefined;
            terminalPowershellCounter?: boolean | undefined;
            terminalZshClearEolMark?: boolean | undefined;
            terminalZshOhMy?: boolean | undefined;
            terminalZshP10k?: boolean | undefined;
            terminalZdotdir?: boolean | undefined;
            terminalCompressProgressBar?: boolean | undefined;
            diagnosticsEnabled?: boolean | undefined;
            experiments?: {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            } | undefined;
            codebaseIndexModels?: {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            } | undefined;
            codebaseIndexConfig?: {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            } | undefined;
            telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
            mcpEnabled?: boolean | undefined;
            enableMcpServerCreation?: boolean | undefined;
            remoteControlEnabled?: boolean | undefined;
            modeApiConfigs?: Record<string, string> | undefined;
            customModePrompts?: Record<string, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            } | undefined> | undefined;
            customSupportPrompts?: Record<string, string | undefined> | undefined;
            enhancementApiConfigId?: string | undefined;
            includeTaskHistoryInEnhance?: boolean | undefined;
            historyPreviewCollapsed?: boolean | undefined;
            profileThresholds?: Record<string, number> | undefined;
            hasOpenedModeSelector?: boolean | undefined;
            lastModeExportPath?: string | undefined;
            lastModeImportPath?: string | undefined;
            imContacts?: {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            } | undefined;
            agentA2AMode?: {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            } | null | undefined;
        }>;
        text: z.ZodString;
        images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        newTab: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        text: string;
        configuration: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            mode?: string | undefined;
            language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
            customInstructions?: string | undefined;
            customModes?: {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }[] | undefined;
            currentApiConfigName?: string | undefined;
            listApiConfigMeta?: {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }[] | undefined;
            pinnedApiConfigs?: Record<string, boolean> | undefined;
            lastShownAnnouncementId?: string | undefined;
            taskHistory?: {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }[] | undefined;
            condensingApiConfigId?: string | undefined;
            customCondensingPrompt?: string | undefined;
            autoApprovalEnabled?: boolean | undefined;
            alwaysAllowReadOnly?: boolean | undefined;
            alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
            alwaysAllowWrite?: boolean | undefined;
            alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
            alwaysAllowWriteProtected?: boolean | undefined;
            writeDelayMs?: number | undefined;
            alwaysAllowBrowser?: boolean | undefined;
            alwaysApproveResubmit?: boolean | undefined;
            requestDelaySeconds?: number | undefined;
            alwaysAllowMcp?: boolean | undefined;
            alwaysAllowModeSwitch?: boolean | undefined;
            alwaysAllowSubtasks?: boolean | undefined;
            alwaysAllowExecute?: boolean | undefined;
            alwaysAllowFollowupQuestions?: boolean | undefined;
            followupAutoApproveTimeoutMs?: number | undefined;
            alwaysAllowUpdateTodoList?: boolean | undefined;
            allowedCommands?: string[] | undefined;
            deniedCommands?: string[] | undefined;
            commandExecutionTimeout?: number | undefined;
            commandTimeoutAllowlist?: string[] | undefined;
            preventCompletionWithOpenTodos?: boolean | undefined;
            allowedMaxRequests?: number | null | undefined;
            allowedMaxCost?: number | null | undefined;
            autoCondenseContext?: boolean | undefined;
            autoCondenseContextPercent?: number | undefined;
            maxConcurrentFileReads?: number | undefined;
            includeDiagnosticMessages?: boolean | undefined;
            maxDiagnosticMessages?: number | undefined;
            browserToolEnabled?: boolean | undefined;
            browserViewportSize?: string | undefined;
            screenshotQuality?: number | undefined;
            remoteBrowserEnabled?: boolean | undefined;
            remoteBrowserHost?: string | undefined;
            cachedChromeHostUrl?: string | undefined;
            enableCheckpoints?: boolean | undefined;
            ttsEnabled?: boolean | undefined;
            ttsSpeed?: number | undefined;
            soundEnabled?: boolean | undefined;
            soundVolume?: number | undefined;
            maxOpenTabsContext?: number | undefined;
            maxWorkspaceFiles?: number | undefined;
            showRooIgnoredFiles?: boolean | undefined;
            maxReadFileLine?: number | undefined;
            maxImageFileSize?: number | undefined;
            maxTotalImageSize?: number | undefined;
            terminalOutputLineLimit?: number | undefined;
            terminalOutputCharacterLimit?: number | undefined;
            terminalShellIntegrationTimeout?: number | undefined;
            terminalShellIntegrationDisabled?: boolean | undefined;
            terminalCommandDelay?: number | undefined;
            terminalPowershellCounter?: boolean | undefined;
            terminalZshClearEolMark?: boolean | undefined;
            terminalZshOhMy?: boolean | undefined;
            terminalZshP10k?: boolean | undefined;
            terminalZdotdir?: boolean | undefined;
            terminalCompressProgressBar?: boolean | undefined;
            diagnosticsEnabled?: boolean | undefined;
            experiments?: {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            } | undefined;
            codebaseIndexModels?: {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            } | undefined;
            codebaseIndexConfig?: {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            } | undefined;
            telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
            mcpEnabled?: boolean | undefined;
            enableMcpServerCreation?: boolean | undefined;
            remoteControlEnabled?: boolean | undefined;
            modeApiConfigs?: Record<string, string> | undefined;
            customModePrompts?: Record<string, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            } | undefined> | undefined;
            customSupportPrompts?: Record<string, string | undefined> | undefined;
            enhancementApiConfigId?: string | undefined;
            includeTaskHistoryInEnhance?: boolean | undefined;
            historyPreviewCollapsed?: boolean | undefined;
            profileThresholds?: Record<string, number> | undefined;
            hasOpenedModeSelector?: boolean | undefined;
            lastModeExportPath?: string | undefined;
            lastModeImportPath?: string | undefined;
            imContacts?: {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            } | undefined;
            agentA2AMode?: {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            } | null | undefined;
        };
        images?: string[] | undefined;
        newTab?: boolean | undefined;
    }, {
        text: string;
        configuration: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            mode?: string | undefined;
            language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
            customInstructions?: string | undefined;
            customModes?: {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }[] | undefined;
            currentApiConfigName?: string | undefined;
            listApiConfigMeta?: {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }[] | undefined;
            pinnedApiConfigs?: Record<string, boolean> | undefined;
            lastShownAnnouncementId?: string | undefined;
            taskHistory?: {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }[] | undefined;
            condensingApiConfigId?: string | undefined;
            customCondensingPrompt?: string | undefined;
            autoApprovalEnabled?: boolean | undefined;
            alwaysAllowReadOnly?: boolean | undefined;
            alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
            alwaysAllowWrite?: boolean | undefined;
            alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
            alwaysAllowWriteProtected?: boolean | undefined;
            writeDelayMs?: number | undefined;
            alwaysAllowBrowser?: boolean | undefined;
            alwaysApproveResubmit?: boolean | undefined;
            requestDelaySeconds?: number | undefined;
            alwaysAllowMcp?: boolean | undefined;
            alwaysAllowModeSwitch?: boolean | undefined;
            alwaysAllowSubtasks?: boolean | undefined;
            alwaysAllowExecute?: boolean | undefined;
            alwaysAllowFollowupQuestions?: boolean | undefined;
            followupAutoApproveTimeoutMs?: number | undefined;
            alwaysAllowUpdateTodoList?: boolean | undefined;
            allowedCommands?: string[] | undefined;
            deniedCommands?: string[] | undefined;
            commandExecutionTimeout?: number | undefined;
            commandTimeoutAllowlist?: string[] | undefined;
            preventCompletionWithOpenTodos?: boolean | undefined;
            allowedMaxRequests?: number | null | undefined;
            allowedMaxCost?: number | null | undefined;
            autoCondenseContext?: boolean | undefined;
            autoCondenseContextPercent?: number | undefined;
            maxConcurrentFileReads?: number | undefined;
            includeDiagnosticMessages?: boolean | undefined;
            maxDiagnosticMessages?: number | undefined;
            browserToolEnabled?: boolean | undefined;
            browserViewportSize?: string | undefined;
            screenshotQuality?: number | undefined;
            remoteBrowserEnabled?: boolean | undefined;
            remoteBrowserHost?: string | undefined;
            cachedChromeHostUrl?: string | undefined;
            enableCheckpoints?: boolean | undefined;
            ttsEnabled?: boolean | undefined;
            ttsSpeed?: number | undefined;
            soundEnabled?: boolean | undefined;
            soundVolume?: number | undefined;
            maxOpenTabsContext?: number | undefined;
            maxWorkspaceFiles?: number | undefined;
            showRooIgnoredFiles?: boolean | undefined;
            maxReadFileLine?: number | undefined;
            maxImageFileSize?: number | undefined;
            maxTotalImageSize?: number | undefined;
            terminalOutputLineLimit?: number | undefined;
            terminalOutputCharacterLimit?: number | undefined;
            terminalShellIntegrationTimeout?: number | undefined;
            terminalShellIntegrationDisabled?: boolean | undefined;
            terminalCommandDelay?: number | undefined;
            terminalPowershellCounter?: boolean | undefined;
            terminalZshClearEolMark?: boolean | undefined;
            terminalZshOhMy?: boolean | undefined;
            terminalZshP10k?: boolean | undefined;
            terminalZdotdir?: boolean | undefined;
            terminalCompressProgressBar?: boolean | undefined;
            diagnosticsEnabled?: boolean | undefined;
            experiments?: {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            } | undefined;
            codebaseIndexModels?: {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            } | undefined;
            codebaseIndexConfig?: {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            } | undefined;
            telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
            mcpEnabled?: boolean | undefined;
            enableMcpServerCreation?: boolean | undefined;
            remoteControlEnabled?: boolean | undefined;
            modeApiConfigs?: Record<string, string> | undefined;
            customModePrompts?: Record<string, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            } | undefined> | undefined;
            customSupportPrompts?: Record<string, string | undefined> | undefined;
            enhancementApiConfigId?: string | undefined;
            includeTaskHistoryInEnhance?: boolean | undefined;
            historyPreviewCollapsed?: boolean | undefined;
            profileThresholds?: Record<string, number> | undefined;
            hasOpenedModeSelector?: boolean | undefined;
            lastModeExportPath?: string | undefined;
            lastModeImportPath?: string | undefined;
            imContacts?: {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            } | undefined;
            agentA2AMode?: {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            } | null | undefined;
        };
        images?: string[] | undefined;
        newTab?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        text: string;
        configuration: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            mode?: string | undefined;
            language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
            customInstructions?: string | undefined;
            customModes?: {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }[] | undefined;
            currentApiConfigName?: string | undefined;
            listApiConfigMeta?: {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }[] | undefined;
            pinnedApiConfigs?: Record<string, boolean> | undefined;
            lastShownAnnouncementId?: string | undefined;
            taskHistory?: {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }[] | undefined;
            condensingApiConfigId?: string | undefined;
            customCondensingPrompt?: string | undefined;
            autoApprovalEnabled?: boolean | undefined;
            alwaysAllowReadOnly?: boolean | undefined;
            alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
            alwaysAllowWrite?: boolean | undefined;
            alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
            alwaysAllowWriteProtected?: boolean | undefined;
            writeDelayMs?: number | undefined;
            alwaysAllowBrowser?: boolean | undefined;
            alwaysApproveResubmit?: boolean | undefined;
            requestDelaySeconds?: number | undefined;
            alwaysAllowMcp?: boolean | undefined;
            alwaysAllowModeSwitch?: boolean | undefined;
            alwaysAllowSubtasks?: boolean | undefined;
            alwaysAllowExecute?: boolean | undefined;
            alwaysAllowFollowupQuestions?: boolean | undefined;
            followupAutoApproveTimeoutMs?: number | undefined;
            alwaysAllowUpdateTodoList?: boolean | undefined;
            allowedCommands?: string[] | undefined;
            deniedCommands?: string[] | undefined;
            commandExecutionTimeout?: number | undefined;
            commandTimeoutAllowlist?: string[] | undefined;
            preventCompletionWithOpenTodos?: boolean | undefined;
            allowedMaxRequests?: number | null | undefined;
            allowedMaxCost?: number | null | undefined;
            autoCondenseContext?: boolean | undefined;
            autoCondenseContextPercent?: number | undefined;
            maxConcurrentFileReads?: number | undefined;
            includeDiagnosticMessages?: boolean | undefined;
            maxDiagnosticMessages?: number | undefined;
            browserToolEnabled?: boolean | undefined;
            browserViewportSize?: string | undefined;
            screenshotQuality?: number | undefined;
            remoteBrowserEnabled?: boolean | undefined;
            remoteBrowserHost?: string | undefined;
            cachedChromeHostUrl?: string | undefined;
            enableCheckpoints?: boolean | undefined;
            ttsEnabled?: boolean | undefined;
            ttsSpeed?: number | undefined;
            soundEnabled?: boolean | undefined;
            soundVolume?: number | undefined;
            maxOpenTabsContext?: number | undefined;
            maxWorkspaceFiles?: number | undefined;
            showRooIgnoredFiles?: boolean | undefined;
            maxReadFileLine?: number | undefined;
            maxImageFileSize?: number | undefined;
            maxTotalImageSize?: number | undefined;
            terminalOutputLineLimit?: number | undefined;
            terminalOutputCharacterLimit?: number | undefined;
            terminalShellIntegrationTimeout?: number | undefined;
            terminalShellIntegrationDisabled?: boolean | undefined;
            terminalCommandDelay?: number | undefined;
            terminalPowershellCounter?: boolean | undefined;
            terminalZshClearEolMark?: boolean | undefined;
            terminalZshOhMy?: boolean | undefined;
            terminalZshP10k?: boolean | undefined;
            terminalZdotdir?: boolean | undefined;
            terminalCompressProgressBar?: boolean | undefined;
            diagnosticsEnabled?: boolean | undefined;
            experiments?: {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            } | undefined;
            codebaseIndexModels?: {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            } | undefined;
            codebaseIndexConfig?: {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            } | undefined;
            telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
            mcpEnabled?: boolean | undefined;
            enableMcpServerCreation?: boolean | undefined;
            remoteControlEnabled?: boolean | undefined;
            modeApiConfigs?: Record<string, string> | undefined;
            customModePrompts?: Record<string, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            } | undefined> | undefined;
            customSupportPrompts?: Record<string, string | undefined> | undefined;
            enhancementApiConfigId?: string | undefined;
            includeTaskHistoryInEnhance?: boolean | undefined;
            historyPreviewCollapsed?: boolean | undefined;
            profileThresholds?: Record<string, number> | undefined;
            hasOpenedModeSelector?: boolean | undefined;
            lastModeExportPath?: string | undefined;
            lastModeImportPath?: string | undefined;
            imContacts?: {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            } | undefined;
            agentA2AMode?: {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            } | null | undefined;
        };
        images?: string[] | undefined;
        newTab?: boolean | undefined;
    };
    commandName: TaskCommandName.StartNewTask;
}, {
    data: {
        text: string;
        configuration: {
            reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
            codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
            codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            codeIndexOpenAiKey?: string | undefined;
            codeIndexQdrantApiKey?: string | undefined;
            codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
            codebaseIndexGeminiApiKey?: string | undefined;
            codebaseIndexMistralApiKey?: string | undefined;
            apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
            includeMaxTokens?: boolean | undefined;
            diffEnabled?: boolean | undefined;
            todoListEnabled?: boolean | undefined;
            fuzzyMatchThreshold?: number | undefined;
            modelTemperature?: number | null | undefined;
            rateLimitSeconds?: number | undefined;
            consecutiveMistakeLimit?: number | undefined;
            enableReasoningEffort?: boolean | undefined;
            modelMaxTokens?: number | undefined;
            modelMaxThinkingTokens?: number | undefined;
            verbosity?: "low" | "medium" | "high" | undefined;
            apiModelId?: string | undefined;
            apiKey?: string | undefined;
            anthropicBaseUrl?: string | undefined;
            anthropicUseAuthToken?: boolean | undefined;
            anthropicBeta1MContext?: boolean | undefined;
            claudeCodePath?: string | undefined;
            claudeCodeMaxOutputTokens?: number | undefined;
            glamaModelId?: string | undefined;
            glamaApiKey?: string | undefined;
            openRouterApiKey?: string | undefined;
            openRouterModelId?: string | undefined;
            openRouterBaseUrl?: string | undefined;
            openRouterSpecificProvider?: string | undefined;
            openRouterUseMiddleOutTransform?: boolean | undefined;
            awsAccessKey?: string | undefined;
            awsSecretKey?: string | undefined;
            awsSessionToken?: string | undefined;
            awsRegion?: string | undefined;
            awsUseCrossRegionInference?: boolean | undefined;
            awsUsePromptCache?: boolean | undefined;
            awsProfile?: string | undefined;
            awsUseProfile?: boolean | undefined;
            awsApiKey?: string | undefined;
            awsUseApiKey?: boolean | undefined;
            awsCustomArn?: string | undefined;
            awsModelContextWindow?: number | undefined;
            awsBedrockEndpointEnabled?: boolean | undefined;
            awsBedrockEndpoint?: string | undefined;
            vertexKeyFile?: string | undefined;
            vertexJsonCredentials?: string | undefined;
            vertexProjectId?: string | undefined;
            vertexRegion?: string | undefined;
            openAiBaseUrl?: string | undefined;
            openAiApiKey?: string | undefined;
            openAiLegacyFormat?: boolean | undefined;
            openAiR1FormatEnabled?: boolean | undefined;
            openAiModelId?: string | undefined;
            openAiCustomModelInfo?: {
                contextWindow: number;
                supportsPromptCache: boolean;
                maxTokens?: number | null | undefined;
                maxThinkingTokens?: number | null | undefined;
                supportsImages?: boolean | undefined;
                supportsComputerUse?: boolean | undefined;
                supportsVerbosity?: boolean | undefined;
                supportsReasoningBudget?: boolean | undefined;
                requiredReasoningBudget?: boolean | undefined;
                supportsReasoningEffort?: boolean | undefined;
                supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
                description?: string | undefined;
                modelType?: string | undefined;
                reasoningEffort?: "low" | "medium" | "high" | undefined;
                minTokensPerCachePoint?: number | undefined;
                maxCachePoints?: number | undefined;
                cachableFields?: string[] | undefined;
                tiers?: {
                    contextWindow: number;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                }[] | undefined;
            } | null | undefined;
            openAiUseAzure?: boolean | undefined;
            azureApiVersion?: string | undefined;
            openAiStreamingEnabled?: boolean | undefined;
            openAiHostHeader?: string | undefined;
            openAiHeaders?: Record<string, string> | undefined;
            ollamaModelId?: string | undefined;
            ollamaBaseUrl?: string | undefined;
            vsCodeLmModelSelector?: {
                id?: string | undefined;
                vendor?: string | undefined;
                family?: string | undefined;
                version?: string | undefined;
            } | undefined;
            lmStudioModelId?: string | undefined;
            lmStudioBaseUrl?: string | undefined;
            lmStudioDraftModelId?: string | undefined;
            lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
            geminiApiKey?: string | undefined;
            googleGeminiBaseUrl?: string | undefined;
            enableUrlContext?: boolean | undefined;
            enableGrounding?: boolean | undefined;
            geminiCliOAuthPath?: string | undefined;
            geminiCliProjectId?: string | undefined;
            openAiNativeApiKey?: string | undefined;
            openAiNativeBaseUrl?: string | undefined;
            mistralApiKey?: string | undefined;
            mistralCodestralUrl?: string | undefined;
            deepSeekBaseUrl?: string | undefined;
            deepSeekApiKey?: string | undefined;
            doubaoBaseUrl?: string | undefined;
            doubaoApiKey?: string | undefined;
            moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
            moonshotApiKey?: string | undefined;
            unboundApiKey?: string | undefined;
            unboundModelId?: string | undefined;
            requestyBaseUrl?: string | undefined;
            requestyApiKey?: string | undefined;
            requestyModelId?: string | undefined;
            fakeAi?: unknown;
            xaiApiKey?: string | undefined;
            groqApiKey?: string | undefined;
            huggingFaceApiKey?: string | undefined;
            huggingFaceModelId?: string | undefined;
            huggingFaceInferenceProvider?: string | undefined;
            chutesApiKey?: string | undefined;
            litellmBaseUrl?: string | undefined;
            litellmApiKey?: string | undefined;
            litellmModelId?: string | undefined;
            litellmUsePromptCache?: boolean | undefined;
            cerebrasApiKey?: string | undefined;
            sambaNovaApiKey?: string | undefined;
            zaiApiKey?: string | undefined;
            zaiApiLine?: "china" | "international" | undefined;
            fireworksApiKey?: string | undefined;
            ioIntelligenceModelId?: string | undefined;
            ioIntelligenceApiKey?: string | undefined;
            mode?: string | undefined;
            language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
            customInstructions?: string | undefined;
            customModes?: {
                name: string;
                groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                    description?: string | undefined;
                    fileRegex?: string | undefined;
                }])[];
                slug: string;
                roleDefinition: string;
                description?: string | undefined;
                source?: "global" | "project" | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            }[] | undefined;
            currentApiConfigName?: string | undefined;
            listApiConfigMeta?: {
                id: string;
                name: string;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                modelId?: string | undefined;
            }[] | undefined;
            pinnedApiConfigs?: Record<string, boolean> | undefined;
            lastShownAnnouncementId?: string | undefined;
            taskHistory?: {
                number: number;
                id: string;
                task: string;
                ts: number;
                totalCost: number;
                tokensIn: number;
                tokensOut: number;
                mode?: string | undefined;
                agentId?: string | undefined;
                cacheWrites?: number | undefined;
                cacheReads?: number | undefined;
                size?: number | undefined;
                workspace?: string | undefined;
                terminalNo?: number | undefined;
                source?: "agent" | "user" | undefined;
            }[] | undefined;
            condensingApiConfigId?: string | undefined;
            customCondensingPrompt?: string | undefined;
            autoApprovalEnabled?: boolean | undefined;
            alwaysAllowReadOnly?: boolean | undefined;
            alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
            alwaysAllowWrite?: boolean | undefined;
            alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
            alwaysAllowWriteProtected?: boolean | undefined;
            writeDelayMs?: number | undefined;
            alwaysAllowBrowser?: boolean | undefined;
            alwaysApproveResubmit?: boolean | undefined;
            requestDelaySeconds?: number | undefined;
            alwaysAllowMcp?: boolean | undefined;
            alwaysAllowModeSwitch?: boolean | undefined;
            alwaysAllowSubtasks?: boolean | undefined;
            alwaysAllowExecute?: boolean | undefined;
            alwaysAllowFollowupQuestions?: boolean | undefined;
            followupAutoApproveTimeoutMs?: number | undefined;
            alwaysAllowUpdateTodoList?: boolean | undefined;
            allowedCommands?: string[] | undefined;
            deniedCommands?: string[] | undefined;
            commandExecutionTimeout?: number | undefined;
            commandTimeoutAllowlist?: string[] | undefined;
            preventCompletionWithOpenTodos?: boolean | undefined;
            allowedMaxRequests?: number | null | undefined;
            allowedMaxCost?: number | null | undefined;
            autoCondenseContext?: boolean | undefined;
            autoCondenseContextPercent?: number | undefined;
            maxConcurrentFileReads?: number | undefined;
            includeDiagnosticMessages?: boolean | undefined;
            maxDiagnosticMessages?: number | undefined;
            browserToolEnabled?: boolean | undefined;
            browserViewportSize?: string | undefined;
            screenshotQuality?: number | undefined;
            remoteBrowserEnabled?: boolean | undefined;
            remoteBrowserHost?: string | undefined;
            cachedChromeHostUrl?: string | undefined;
            enableCheckpoints?: boolean | undefined;
            ttsEnabled?: boolean | undefined;
            ttsSpeed?: number | undefined;
            soundEnabled?: boolean | undefined;
            soundVolume?: number | undefined;
            maxOpenTabsContext?: number | undefined;
            maxWorkspaceFiles?: number | undefined;
            showRooIgnoredFiles?: boolean | undefined;
            maxReadFileLine?: number | undefined;
            maxImageFileSize?: number | undefined;
            maxTotalImageSize?: number | undefined;
            terminalOutputLineLimit?: number | undefined;
            terminalOutputCharacterLimit?: number | undefined;
            terminalShellIntegrationTimeout?: number | undefined;
            terminalShellIntegrationDisabled?: boolean | undefined;
            terminalCommandDelay?: number | undefined;
            terminalPowershellCounter?: boolean | undefined;
            terminalZshClearEolMark?: boolean | undefined;
            terminalZshOhMy?: boolean | undefined;
            terminalZshP10k?: boolean | undefined;
            terminalZdotdir?: boolean | undefined;
            terminalCompressProgressBar?: boolean | undefined;
            diagnosticsEnabled?: boolean | undefined;
            experiments?: {
                powerSteering?: boolean | undefined;
                multiFileApplyDiff?: boolean | undefined;
                preventFocusDisruption?: boolean | undefined;
                assistantMessageParser?: boolean | undefined;
            } | undefined;
            codebaseIndexModels?: {
                openai?: Record<string, {
                    dimension: number;
                }> | undefined;
                ollama?: Record<string, {
                    dimension: number;
                }> | undefined;
                "openai-compatible"?: Record<string, {
                    dimension: number;
                }> | undefined;
                gemini?: Record<string, {
                    dimension: number;
                }> | undefined;
                mistral?: Record<string, {
                    dimension: number;
                }> | undefined;
            } | undefined;
            codebaseIndexConfig?: {
                codebaseIndexEnabled?: boolean | undefined;
                codebaseIndexQdrantUrl?: string | undefined;
                codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                codebaseIndexEmbedderBaseUrl?: string | undefined;
                codebaseIndexEmbedderModelId?: string | undefined;
                codebaseIndexEmbedderModelDimension?: number | undefined;
                codebaseIndexSearchMinScore?: number | undefined;
                codebaseIndexSearchMaxResults?: number | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
            } | undefined;
            telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
            mcpEnabled?: boolean | undefined;
            enableMcpServerCreation?: boolean | undefined;
            remoteControlEnabled?: boolean | undefined;
            modeApiConfigs?: Record<string, string> | undefined;
            customModePrompts?: Record<string, {
                description?: string | undefined;
                roleDefinition?: string | undefined;
                whenToUse?: string | undefined;
                customInstructions?: string | undefined;
            } | undefined> | undefined;
            customSupportPrompts?: Record<string, string | undefined> | undefined;
            enhancementApiConfigId?: string | undefined;
            includeTaskHistoryInEnhance?: boolean | undefined;
            historyPreviewCollapsed?: boolean | undefined;
            profileThresholds?: Record<string, number> | undefined;
            hasOpenedModeSelector?: boolean | undefined;
            lastModeExportPath?: string | undefined;
            lastModeImportPath?: string | undefined;
            imContacts?: {
                friends?: {
                    id: number;
                    online: boolean;
                    nickName: string;
                    headImage: string;
                    deleted: boolean;
                    onlineWeb: boolean;
                    onlineApp: boolean;
                }[] | undefined;
                groups?: {
                    id: number;
                    name: string;
                    headImage: string;
                    ownerId: number;
                    headImageThumb: string;
                    notice: string;
                    remarkNickName: string;
                    showNickName: string;
                    showGroupName: string;
                    remarkGroupName: string;
                    dissolve: boolean;
                    quit: boolean;
                    isBanned: boolean;
                    reason: string;
                }[] | undefined;
                lastUpdated?: number | undefined;
            } | undefined;
            agentA2AMode?: {
                enabled: boolean;
                serverPort: number;
                serverUrl: string;
                agentId: string;
                agentName: string;
                isDebugMode?: boolean | undefined;
            } | null | undefined;
        };
        images?: string[] | undefined;
        newTab?: boolean | undefined;
    };
    commandName: TaskCommandName.StartNewTask;
}>, z.ZodObject<{
    commandName: z.ZodLiteral<TaskCommandName.CancelTask>;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
    commandName: TaskCommandName.CancelTask;
}, {
    data: string;
    commandName: TaskCommandName.CancelTask;
}>, z.ZodObject<{
    commandName: z.ZodLiteral<TaskCommandName.CloseTask>;
    data: z.ZodString;
}, "strip", z.ZodTypeAny, {
    data: string;
    commandName: TaskCommandName.CloseTask;
}, {
    data: string;
    commandName: TaskCommandName.CloseTask;
}>]>;
type TaskCommand = z.infer<typeof taskCommandSchema>;
/**
 * IpcMessage
 */
declare const ipcMessageSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<IpcMessageType.Ack>;
    origin: z.ZodLiteral<IpcOrigin.Server>;
    data: z.ZodObject<{
        clientId: z.ZodString;
        pid: z.ZodNumber;
        ppid: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        clientId: string;
        pid: number;
        ppid: number;
    }, {
        clientId: string;
        pid: number;
        ppid: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: IpcMessageType.Ack;
    data: {
        clientId: string;
        pid: number;
        ppid: number;
    };
    origin: IpcOrigin.Server;
}, {
    type: IpcMessageType.Ack;
    data: {
        clientId: string;
        pid: number;
        ppid: number;
    };
    origin: IpcOrigin.Server;
}>, z.ZodObject<{
    type: z.ZodLiteral<IpcMessageType.TaskCommand>;
    origin: z.ZodLiteral<IpcOrigin.Client>;
    clientId: z.ZodString;
    data: z.ZodDiscriminatedUnion<"commandName", [z.ZodObject<{
        commandName: z.ZodLiteral<TaskCommandName.StartNewTask>;
        data: z.ZodObject<{
            configuration: z.ZodObject<{
                codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
                codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
                codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
                codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
                codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
                codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
                codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
                includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
                todoListEnabled: z.ZodOptional<z.ZodBoolean>;
                modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
                enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
                reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
                modelMaxTokens: z.ZodOptional<z.ZodNumber>;
                modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
                verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                apiModelId: z.ZodOptional<z.ZodString>;
                ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
                ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
                fireworksApiKey: z.ZodOptional<z.ZodString>;
                zaiApiKey: z.ZodOptional<z.ZodString>;
                zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
                sambaNovaApiKey: z.ZodOptional<z.ZodString>;
                cerebrasApiKey: z.ZodOptional<z.ZodString>;
                litellmBaseUrl: z.ZodOptional<z.ZodString>;
                litellmApiKey: z.ZodOptional<z.ZodString>;
                litellmModelId: z.ZodOptional<z.ZodString>;
                litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
                chutesApiKey: z.ZodOptional<z.ZodString>;
                huggingFaceApiKey: z.ZodOptional<z.ZodString>;
                huggingFaceModelId: z.ZodOptional<z.ZodString>;
                huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
                groqApiKey: z.ZodOptional<z.ZodString>;
                xaiApiKey: z.ZodOptional<z.ZodString>;
                fakeAi: z.ZodOptional<z.ZodUnknown>;
                requestyBaseUrl: z.ZodOptional<z.ZodString>;
                requestyApiKey: z.ZodOptional<z.ZodString>;
                requestyModelId: z.ZodOptional<z.ZodString>;
                unboundApiKey: z.ZodOptional<z.ZodString>;
                unboundModelId: z.ZodOptional<z.ZodString>;
                moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
                moonshotApiKey: z.ZodOptional<z.ZodString>;
                doubaoBaseUrl: z.ZodOptional<z.ZodString>;
                doubaoApiKey: z.ZodOptional<z.ZodString>;
                deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
                deepSeekApiKey: z.ZodOptional<z.ZodString>;
                mistralApiKey: z.ZodOptional<z.ZodString>;
                mistralCodestralUrl: z.ZodOptional<z.ZodString>;
                openAiNativeApiKey: z.ZodOptional<z.ZodString>;
                openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
                geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
                geminiCliProjectId: z.ZodOptional<z.ZodString>;
                geminiApiKey: z.ZodOptional<z.ZodString>;
                googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
                enableUrlContext: z.ZodOptional<z.ZodBoolean>;
                enableGrounding: z.ZodOptional<z.ZodBoolean>;
                lmStudioModelId: z.ZodOptional<z.ZodString>;
                lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
                lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
                lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
                vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
                    vendor: z.ZodOptional<z.ZodString>;
                    family: z.ZodOptional<z.ZodString>;
                    version: z.ZodOptional<z.ZodString>;
                    id: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                }, {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                }>>;
                ollamaModelId: z.ZodOptional<z.ZodString>;
                ollamaBaseUrl: z.ZodOptional<z.ZodString>;
                openAiBaseUrl: z.ZodOptional<z.ZodString>;
                openAiApiKey: z.ZodOptional<z.ZodString>;
                openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
                openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
                openAiModelId: z.ZodOptional<z.ZodString>;
                openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                    contextWindow: z.ZodNumber;
                    supportsImages: z.ZodOptional<z.ZodBoolean>;
                    supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
                    supportsPromptCache: z.ZodBoolean;
                    supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
                    supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
                    requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
                    supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
                    supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
                    inputPrice: z.ZodOptional<z.ZodNumber>;
                    outputPrice: z.ZodOptional<z.ZodNumber>;
                    cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                    cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
                    description: z.ZodOptional<z.ZodString>;
                    modelType: z.ZodOptional<z.ZodString>;
                    reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
                    minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
                    maxCachePoints: z.ZodOptional<z.ZodNumber>;
                    cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                    tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        contextWindow: z.ZodNumber;
                        inputPrice: z.ZodOptional<z.ZodNumber>;
                        outputPrice: z.ZodOptional<z.ZodNumber>;
                        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }, {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                }, {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                }>>>;
                openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
                azureApiVersion: z.ZodOptional<z.ZodString>;
                openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
                openAiHostHeader: z.ZodOptional<z.ZodString>;
                openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                vertexKeyFile: z.ZodOptional<z.ZodString>;
                vertexJsonCredentials: z.ZodOptional<z.ZodString>;
                vertexProjectId: z.ZodOptional<z.ZodString>;
                vertexRegion: z.ZodOptional<z.ZodString>;
                awsAccessKey: z.ZodOptional<z.ZodString>;
                awsSecretKey: z.ZodOptional<z.ZodString>;
                awsSessionToken: z.ZodOptional<z.ZodString>;
                awsRegion: z.ZodOptional<z.ZodString>;
                awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
                awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
                awsProfile: z.ZodOptional<z.ZodString>;
                awsUseProfile: z.ZodOptional<z.ZodBoolean>;
                awsApiKey: z.ZodOptional<z.ZodString>;
                awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
                awsCustomArn: z.ZodOptional<z.ZodString>;
                awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
                awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
                awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
                openRouterApiKey: z.ZodOptional<z.ZodString>;
                openRouterModelId: z.ZodOptional<z.ZodString>;
                openRouterBaseUrl: z.ZodOptional<z.ZodString>;
                openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
                openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
                glamaModelId: z.ZodOptional<z.ZodString>;
                glamaApiKey: z.ZodOptional<z.ZodString>;
                claudeCodePath: z.ZodOptional<z.ZodString>;
                claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
                apiKey: z.ZodOptional<z.ZodString>;
                anthropicBaseUrl: z.ZodOptional<z.ZodString>;
                anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
                anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
                apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
            } & {
                currentApiConfigName: z.ZodOptional<z.ZodString>;
                listApiConfigMeta: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
                    modelId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }, {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }>, "many">>;
                pinnedApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodBoolean>>;
                lastShownAnnouncementId: z.ZodOptional<z.ZodString>;
                customInstructions: z.ZodOptional<z.ZodString>;
                taskHistory: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    ts: z.ZodNumber;
                    task: z.ZodString;
                    tokensIn: z.ZodNumber;
                    tokensOut: z.ZodNumber;
                    cacheWrites: z.ZodOptional<z.ZodNumber>;
                    cacheReads: z.ZodOptional<z.ZodNumber>;
                    totalCost: z.ZodNumber;
                    size: z.ZodOptional<z.ZodNumber>;
                    workspace: z.ZodOptional<z.ZodString>;
                    mode: z.ZodOptional<z.ZodString>;
                    terminalNo: z.ZodOptional<z.ZodNumber>;
                    source: z.ZodOptional<z.ZodEnum<["user", "agent"]>>;
                    agentId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }, {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }>, "many">>;
                condensingApiConfigId: z.ZodOptional<z.ZodString>;
                customCondensingPrompt: z.ZodOptional<z.ZodString>;
                autoApprovalEnabled: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowReadOnly: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowReadOnlyOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowWrite: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowWriteOutsideWorkspace: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowWriteProtected: z.ZodOptional<z.ZodBoolean>;
                writeDelayMs: z.ZodOptional<z.ZodNumber>;
                alwaysAllowBrowser: z.ZodOptional<z.ZodBoolean>;
                alwaysApproveResubmit: z.ZodOptional<z.ZodBoolean>;
                requestDelaySeconds: z.ZodOptional<z.ZodNumber>;
                alwaysAllowMcp: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowModeSwitch: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowSubtasks: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowExecute: z.ZodOptional<z.ZodBoolean>;
                alwaysAllowFollowupQuestions: z.ZodOptional<z.ZodBoolean>;
                followupAutoApproveTimeoutMs: z.ZodOptional<z.ZodNumber>;
                alwaysAllowUpdateTodoList: z.ZodOptional<z.ZodBoolean>;
                allowedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                deniedCommands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                commandExecutionTimeout: z.ZodOptional<z.ZodNumber>;
                commandTimeoutAllowlist: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                preventCompletionWithOpenTodos: z.ZodOptional<z.ZodBoolean>;
                allowedMaxRequests: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                allowedMaxCost: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
                autoCondenseContext: z.ZodOptional<z.ZodBoolean>;
                autoCondenseContextPercent: z.ZodOptional<z.ZodNumber>;
                maxConcurrentFileReads: z.ZodOptional<z.ZodNumber>;
                includeDiagnosticMessages: z.ZodOptional<z.ZodBoolean>;
                maxDiagnosticMessages: z.ZodOptional<z.ZodNumber>;
                browserToolEnabled: z.ZodOptional<z.ZodBoolean>;
                browserViewportSize: z.ZodOptional<z.ZodString>;
                screenshotQuality: z.ZodOptional<z.ZodNumber>;
                remoteBrowserEnabled: z.ZodOptional<z.ZodBoolean>;
                remoteBrowserHost: z.ZodOptional<z.ZodString>;
                cachedChromeHostUrl: z.ZodOptional<z.ZodString>;
                enableCheckpoints: z.ZodOptional<z.ZodBoolean>;
                ttsEnabled: z.ZodOptional<z.ZodBoolean>;
                ttsSpeed: z.ZodOptional<z.ZodNumber>;
                soundEnabled: z.ZodOptional<z.ZodBoolean>;
                soundVolume: z.ZodOptional<z.ZodNumber>;
                maxOpenTabsContext: z.ZodOptional<z.ZodNumber>;
                maxWorkspaceFiles: z.ZodOptional<z.ZodNumber>;
                showRooIgnoredFiles: z.ZodOptional<z.ZodBoolean>;
                maxReadFileLine: z.ZodOptional<z.ZodNumber>;
                maxImageFileSize: z.ZodOptional<z.ZodNumber>;
                maxTotalImageSize: z.ZodOptional<z.ZodNumber>;
                terminalOutputLineLimit: z.ZodOptional<z.ZodNumber>;
                terminalOutputCharacterLimit: z.ZodOptional<z.ZodNumber>;
                terminalShellIntegrationTimeout: z.ZodOptional<z.ZodNumber>;
                terminalShellIntegrationDisabled: z.ZodOptional<z.ZodBoolean>;
                terminalCommandDelay: z.ZodOptional<z.ZodNumber>;
                terminalPowershellCounter: z.ZodOptional<z.ZodBoolean>;
                terminalZshClearEolMark: z.ZodOptional<z.ZodBoolean>;
                terminalZshOhMy: z.ZodOptional<z.ZodBoolean>;
                terminalZshP10k: z.ZodOptional<z.ZodBoolean>;
                terminalZdotdir: z.ZodOptional<z.ZodBoolean>;
                terminalCompressProgressBar: z.ZodOptional<z.ZodBoolean>;
                diagnosticsEnabled: z.ZodOptional<z.ZodBoolean>;
                rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
                diffEnabled: z.ZodOptional<z.ZodBoolean>;
                fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
                experiments: z.ZodOptional<z.ZodObject<{
                    powerSteering: z.ZodOptional<z.ZodBoolean>;
                    multiFileApplyDiff: z.ZodOptional<z.ZodBoolean>;
                    preventFocusDisruption: z.ZodOptional<z.ZodBoolean>;
                    assistantMessageParser: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                }, {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                }>>;
                codebaseIndexModels: z.ZodOptional<z.ZodObject<{
                    openai: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        dimension: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        dimension: number;
                    }, {
                        dimension: number;
                    }>>>;
                    ollama: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        dimension: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        dimension: number;
                    }, {
                        dimension: number;
                    }>>>;
                    "openai-compatible": z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        dimension: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        dimension: number;
                    }, {
                        dimension: number;
                    }>>>;
                    gemini: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        dimension: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        dimension: number;
                    }, {
                        dimension: number;
                    }>>>;
                    mistral: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                        dimension: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        dimension: number;
                    }, {
                        dimension: number;
                    }>>>;
                }, "strip", z.ZodTypeAny, {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                }, {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                }>>;
                codebaseIndexConfig: z.ZodOptional<z.ZodObject<{
                    codebaseIndexEnabled: z.ZodOptional<z.ZodBoolean>;
                    codebaseIndexQdrantUrl: z.ZodOptional<z.ZodString>;
                    codebaseIndexEmbedderProvider: z.ZodOptional<z.ZodEnum<["openai", "ollama", "openai-compatible", "gemini", "mistral"]>>;
                    codebaseIndexEmbedderBaseUrl: z.ZodOptional<z.ZodString>;
                    codebaseIndexEmbedderModelId: z.ZodOptional<z.ZodString>;
                    codebaseIndexEmbedderModelDimension: z.ZodOptional<z.ZodNumber>;
                    codebaseIndexSearchMinScore: z.ZodOptional<z.ZodNumber>;
                    codebaseIndexSearchMaxResults: z.ZodOptional<z.ZodNumber>;
                    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
                    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                }, {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                }>>;
                language: z.ZodOptional<z.ZodEnum<["ca", "de", "en", "es", "fr", "hi", "id", "it", "ja", "ko", "nl", "pl", "pt-BR", "ru", "tr", "vi", "zh-CN", "zh-TW"]>>;
                telemetrySetting: z.ZodOptional<z.ZodEnum<["unset", "enabled", "disabled"]>>;
                mcpEnabled: z.ZodOptional<z.ZodBoolean>;
                enableMcpServerCreation: z.ZodOptional<z.ZodBoolean>;
                remoteControlEnabled: z.ZodOptional<z.ZodBoolean>;
                mode: z.ZodOptional<z.ZodString>;
                modeApiConfigs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                customModes: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    slug: z.ZodString;
                    name: z.ZodString;
                    roleDefinition: z.ZodString;
                    whenToUse: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    customInstructions: z.ZodOptional<z.ZodString>;
                    groups: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
                        fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
                        description: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }, {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }>], null>]>, "many">, ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[], ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[]>;
                    source: z.ZodOptional<z.ZodEnum<["global", "project"]>>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }, {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }>, "many">>;
                customModePrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodObject<{
                    roleDefinition: z.ZodOptional<z.ZodString>;
                    whenToUse: z.ZodOptional<z.ZodString>;
                    description: z.ZodOptional<z.ZodString>;
                    customInstructions: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }>>>>;
                customSupportPrompts: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodString>>>;
                enhancementApiConfigId: z.ZodOptional<z.ZodString>;
                includeTaskHistoryInEnhance: z.ZodOptional<z.ZodBoolean>;
                historyPreviewCollapsed: z.ZodOptional<z.ZodBoolean>;
                profileThresholds: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
                hasOpenedModeSelector: z.ZodOptional<z.ZodBoolean>;
                lastModeExportPath: z.ZodOptional<z.ZodString>;
                lastModeImportPath: z.ZodOptional<z.ZodString>;
                imContacts: z.ZodOptional<z.ZodObject<{
                    friends: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        nickName: z.ZodString;
                        headImage: z.ZodString;
                        deleted: z.ZodBoolean;
                        online: z.ZodBoolean;
                        onlineWeb: z.ZodBoolean;
                        onlineApp: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }, {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }>, "many">>;
                    groups: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        id: z.ZodNumber;
                        name: z.ZodString;
                        ownerId: z.ZodNumber;
                        headImage: z.ZodString;
                        headImageThumb: z.ZodString;
                        notice: z.ZodString;
                        remarkNickName: z.ZodString;
                        showNickName: z.ZodString;
                        showGroupName: z.ZodString;
                        remarkGroupName: z.ZodString;
                        dissolve: z.ZodBoolean;
                        quit: z.ZodBoolean;
                        isBanned: z.ZodBoolean;
                        reason: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }, {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }>, "many">>;
                    lastUpdated: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                }, {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                }>>;
                agentA2AMode: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                    enabled: z.ZodBoolean;
                    agentId: z.ZodString;
                    agentName: z.ZodString;
                    serverUrl: z.ZodString;
                    serverPort: z.ZodNumber;
                    isDebugMode: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                }, {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                }>>>;
            }, "strip", z.ZodTypeAny, {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            }, {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            }>;
            text: z.ZodString;
            images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            newTab: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            configuration: {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            };
            images?: string[] | undefined;
            newTab?: boolean | undefined;
        }, {
            text: string;
            configuration: {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            };
            images?: string[] | undefined;
            newTab?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        data: {
            text: string;
            configuration: {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            };
            images?: string[] | undefined;
            newTab?: boolean | undefined;
        };
        commandName: TaskCommandName.StartNewTask;
    }, {
        data: {
            text: string;
            configuration: {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            };
            images?: string[] | undefined;
            newTab?: boolean | undefined;
        };
        commandName: TaskCommandName.StartNewTask;
    }>, z.ZodObject<{
        commandName: z.ZodLiteral<TaskCommandName.CancelTask>;
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
        commandName: TaskCommandName.CancelTask;
    }, {
        data: string;
        commandName: TaskCommandName.CancelTask;
    }>, z.ZodObject<{
        commandName: z.ZodLiteral<TaskCommandName.CloseTask>;
        data: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        data: string;
        commandName: TaskCommandName.CloseTask;
    }, {
        data: string;
        commandName: TaskCommandName.CloseTask;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: IpcMessageType.TaskCommand;
    data: {
        data: {
            text: string;
            configuration: {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            };
            images?: string[] | undefined;
            newTab?: boolean | undefined;
        };
        commandName: TaskCommandName.StartNewTask;
    } | {
        data: string;
        commandName: TaskCommandName.CancelTask;
    } | {
        data: string;
        commandName: TaskCommandName.CloseTask;
    };
    clientId: string;
    origin: IpcOrigin.Client;
}, {
    type: IpcMessageType.TaskCommand;
    data: {
        data: {
            text: string;
            configuration: {
                reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
                codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                codeIndexOpenAiKey?: string | undefined;
                codeIndexQdrantApiKey?: string | undefined;
                codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
                codebaseIndexGeminiApiKey?: string | undefined;
                codebaseIndexMistralApiKey?: string | undefined;
                apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                includeMaxTokens?: boolean | undefined;
                diffEnabled?: boolean | undefined;
                todoListEnabled?: boolean | undefined;
                fuzzyMatchThreshold?: number | undefined;
                modelTemperature?: number | null | undefined;
                rateLimitSeconds?: number | undefined;
                consecutiveMistakeLimit?: number | undefined;
                enableReasoningEffort?: boolean | undefined;
                modelMaxTokens?: number | undefined;
                modelMaxThinkingTokens?: number | undefined;
                verbosity?: "low" | "medium" | "high" | undefined;
                apiModelId?: string | undefined;
                apiKey?: string | undefined;
                anthropicBaseUrl?: string | undefined;
                anthropicUseAuthToken?: boolean | undefined;
                anthropicBeta1MContext?: boolean | undefined;
                claudeCodePath?: string | undefined;
                claudeCodeMaxOutputTokens?: number | undefined;
                glamaModelId?: string | undefined;
                glamaApiKey?: string | undefined;
                openRouterApiKey?: string | undefined;
                openRouterModelId?: string | undefined;
                openRouterBaseUrl?: string | undefined;
                openRouterSpecificProvider?: string | undefined;
                openRouterUseMiddleOutTransform?: boolean | undefined;
                awsAccessKey?: string | undefined;
                awsSecretKey?: string | undefined;
                awsSessionToken?: string | undefined;
                awsRegion?: string | undefined;
                awsUseCrossRegionInference?: boolean | undefined;
                awsUsePromptCache?: boolean | undefined;
                awsProfile?: string | undefined;
                awsUseProfile?: boolean | undefined;
                awsApiKey?: string | undefined;
                awsUseApiKey?: boolean | undefined;
                awsCustomArn?: string | undefined;
                awsModelContextWindow?: number | undefined;
                awsBedrockEndpointEnabled?: boolean | undefined;
                awsBedrockEndpoint?: string | undefined;
                vertexKeyFile?: string | undefined;
                vertexJsonCredentials?: string | undefined;
                vertexProjectId?: string | undefined;
                vertexRegion?: string | undefined;
                openAiBaseUrl?: string | undefined;
                openAiApiKey?: string | undefined;
                openAiLegacyFormat?: boolean | undefined;
                openAiR1FormatEnabled?: boolean | undefined;
                openAiModelId?: string | undefined;
                openAiCustomModelInfo?: {
                    contextWindow: number;
                    supportsPromptCache: boolean;
                    maxTokens?: number | null | undefined;
                    maxThinkingTokens?: number | null | undefined;
                    supportsImages?: boolean | undefined;
                    supportsComputerUse?: boolean | undefined;
                    supportsVerbosity?: boolean | undefined;
                    supportsReasoningBudget?: boolean | undefined;
                    requiredReasoningBudget?: boolean | undefined;
                    supportsReasoningEffort?: boolean | undefined;
                    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
                    inputPrice?: number | undefined;
                    outputPrice?: number | undefined;
                    cacheWritesPrice?: number | undefined;
                    cacheReadsPrice?: number | undefined;
                    description?: string | undefined;
                    modelType?: string | undefined;
                    reasoningEffort?: "low" | "medium" | "high" | undefined;
                    minTokensPerCachePoint?: number | undefined;
                    maxCachePoints?: number | undefined;
                    cachableFields?: string[] | undefined;
                    tiers?: {
                        contextWindow: number;
                        inputPrice?: number | undefined;
                        outputPrice?: number | undefined;
                        cacheWritesPrice?: number | undefined;
                        cacheReadsPrice?: number | undefined;
                    }[] | undefined;
                } | null | undefined;
                openAiUseAzure?: boolean | undefined;
                azureApiVersion?: string | undefined;
                openAiStreamingEnabled?: boolean | undefined;
                openAiHostHeader?: string | undefined;
                openAiHeaders?: Record<string, string> | undefined;
                ollamaModelId?: string | undefined;
                ollamaBaseUrl?: string | undefined;
                vsCodeLmModelSelector?: {
                    id?: string | undefined;
                    vendor?: string | undefined;
                    family?: string | undefined;
                    version?: string | undefined;
                } | undefined;
                lmStudioModelId?: string | undefined;
                lmStudioBaseUrl?: string | undefined;
                lmStudioDraftModelId?: string | undefined;
                lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
                geminiApiKey?: string | undefined;
                googleGeminiBaseUrl?: string | undefined;
                enableUrlContext?: boolean | undefined;
                enableGrounding?: boolean | undefined;
                geminiCliOAuthPath?: string | undefined;
                geminiCliProjectId?: string | undefined;
                openAiNativeApiKey?: string | undefined;
                openAiNativeBaseUrl?: string | undefined;
                mistralApiKey?: string | undefined;
                mistralCodestralUrl?: string | undefined;
                deepSeekBaseUrl?: string | undefined;
                deepSeekApiKey?: string | undefined;
                doubaoBaseUrl?: string | undefined;
                doubaoApiKey?: string | undefined;
                moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
                moonshotApiKey?: string | undefined;
                unboundApiKey?: string | undefined;
                unboundModelId?: string | undefined;
                requestyBaseUrl?: string | undefined;
                requestyApiKey?: string | undefined;
                requestyModelId?: string | undefined;
                fakeAi?: unknown;
                xaiApiKey?: string | undefined;
                groqApiKey?: string | undefined;
                huggingFaceApiKey?: string | undefined;
                huggingFaceModelId?: string | undefined;
                huggingFaceInferenceProvider?: string | undefined;
                chutesApiKey?: string | undefined;
                litellmBaseUrl?: string | undefined;
                litellmApiKey?: string | undefined;
                litellmModelId?: string | undefined;
                litellmUsePromptCache?: boolean | undefined;
                cerebrasApiKey?: string | undefined;
                sambaNovaApiKey?: string | undefined;
                zaiApiKey?: string | undefined;
                zaiApiLine?: "china" | "international" | undefined;
                fireworksApiKey?: string | undefined;
                ioIntelligenceModelId?: string | undefined;
                ioIntelligenceApiKey?: string | undefined;
                mode?: string | undefined;
                language?: "id" | "ca" | "de" | "en" | "es" | "fr" | "hi" | "it" | "ja" | "ko" | "nl" | "pl" | "pt-BR" | "ru" | "tr" | "vi" | "zh-CN" | "zh-TW" | undefined;
                customInstructions?: string | undefined;
                customModes?: {
                    name: string;
                    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
                        description?: string | undefined;
                        fileRegex?: string | undefined;
                    }])[];
                    slug: string;
                    roleDefinition: string;
                    description?: string | undefined;
                    source?: "global" | "project" | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                }[] | undefined;
                currentApiConfigName?: string | undefined;
                listApiConfigMeta?: {
                    id: string;
                    name: string;
                    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
                    modelId?: string | undefined;
                }[] | undefined;
                pinnedApiConfigs?: Record<string, boolean> | undefined;
                lastShownAnnouncementId?: string | undefined;
                taskHistory?: {
                    number: number;
                    id: string;
                    task: string;
                    ts: number;
                    totalCost: number;
                    tokensIn: number;
                    tokensOut: number;
                    mode?: string | undefined;
                    agentId?: string | undefined;
                    cacheWrites?: number | undefined;
                    cacheReads?: number | undefined;
                    size?: number | undefined;
                    workspace?: string | undefined;
                    terminalNo?: number | undefined;
                    source?: "agent" | "user" | undefined;
                }[] | undefined;
                condensingApiConfigId?: string | undefined;
                customCondensingPrompt?: string | undefined;
                autoApprovalEnabled?: boolean | undefined;
                alwaysAllowReadOnly?: boolean | undefined;
                alwaysAllowReadOnlyOutsideWorkspace?: boolean | undefined;
                alwaysAllowWrite?: boolean | undefined;
                alwaysAllowWriteOutsideWorkspace?: boolean | undefined;
                alwaysAllowWriteProtected?: boolean | undefined;
                writeDelayMs?: number | undefined;
                alwaysAllowBrowser?: boolean | undefined;
                alwaysApproveResubmit?: boolean | undefined;
                requestDelaySeconds?: number | undefined;
                alwaysAllowMcp?: boolean | undefined;
                alwaysAllowModeSwitch?: boolean | undefined;
                alwaysAllowSubtasks?: boolean | undefined;
                alwaysAllowExecute?: boolean | undefined;
                alwaysAllowFollowupQuestions?: boolean | undefined;
                followupAutoApproveTimeoutMs?: number | undefined;
                alwaysAllowUpdateTodoList?: boolean | undefined;
                allowedCommands?: string[] | undefined;
                deniedCommands?: string[] | undefined;
                commandExecutionTimeout?: number | undefined;
                commandTimeoutAllowlist?: string[] | undefined;
                preventCompletionWithOpenTodos?: boolean | undefined;
                allowedMaxRequests?: number | null | undefined;
                allowedMaxCost?: number | null | undefined;
                autoCondenseContext?: boolean | undefined;
                autoCondenseContextPercent?: number | undefined;
                maxConcurrentFileReads?: number | undefined;
                includeDiagnosticMessages?: boolean | undefined;
                maxDiagnosticMessages?: number | undefined;
                browserToolEnabled?: boolean | undefined;
                browserViewportSize?: string | undefined;
                screenshotQuality?: number | undefined;
                remoteBrowserEnabled?: boolean | undefined;
                remoteBrowserHost?: string | undefined;
                cachedChromeHostUrl?: string | undefined;
                enableCheckpoints?: boolean | undefined;
                ttsEnabled?: boolean | undefined;
                ttsSpeed?: number | undefined;
                soundEnabled?: boolean | undefined;
                soundVolume?: number | undefined;
                maxOpenTabsContext?: number | undefined;
                maxWorkspaceFiles?: number | undefined;
                showRooIgnoredFiles?: boolean | undefined;
                maxReadFileLine?: number | undefined;
                maxImageFileSize?: number | undefined;
                maxTotalImageSize?: number | undefined;
                terminalOutputLineLimit?: number | undefined;
                terminalOutputCharacterLimit?: number | undefined;
                terminalShellIntegrationTimeout?: number | undefined;
                terminalShellIntegrationDisabled?: boolean | undefined;
                terminalCommandDelay?: number | undefined;
                terminalPowershellCounter?: boolean | undefined;
                terminalZshClearEolMark?: boolean | undefined;
                terminalZshOhMy?: boolean | undefined;
                terminalZshP10k?: boolean | undefined;
                terminalZdotdir?: boolean | undefined;
                terminalCompressProgressBar?: boolean | undefined;
                diagnosticsEnabled?: boolean | undefined;
                experiments?: {
                    powerSteering?: boolean | undefined;
                    multiFileApplyDiff?: boolean | undefined;
                    preventFocusDisruption?: boolean | undefined;
                    assistantMessageParser?: boolean | undefined;
                } | undefined;
                codebaseIndexModels?: {
                    openai?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    ollama?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    "openai-compatible"?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    gemini?: Record<string, {
                        dimension: number;
                    }> | undefined;
                    mistral?: Record<string, {
                        dimension: number;
                    }> | undefined;
                } | undefined;
                codebaseIndexConfig?: {
                    codebaseIndexEnabled?: boolean | undefined;
                    codebaseIndexQdrantUrl?: string | undefined;
                    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
                    codebaseIndexEmbedderBaseUrl?: string | undefined;
                    codebaseIndexEmbedderModelId?: string | undefined;
                    codebaseIndexEmbedderModelDimension?: number | undefined;
                    codebaseIndexSearchMinScore?: number | undefined;
                    codebaseIndexSearchMaxResults?: number | undefined;
                    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
                    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
                } | undefined;
                telemetrySetting?: "enabled" | "unset" | "disabled" | undefined;
                mcpEnabled?: boolean | undefined;
                enableMcpServerCreation?: boolean | undefined;
                remoteControlEnabled?: boolean | undefined;
                modeApiConfigs?: Record<string, string> | undefined;
                customModePrompts?: Record<string, {
                    description?: string | undefined;
                    roleDefinition?: string | undefined;
                    whenToUse?: string | undefined;
                    customInstructions?: string | undefined;
                } | undefined> | undefined;
                customSupportPrompts?: Record<string, string | undefined> | undefined;
                enhancementApiConfigId?: string | undefined;
                includeTaskHistoryInEnhance?: boolean | undefined;
                historyPreviewCollapsed?: boolean | undefined;
                profileThresholds?: Record<string, number> | undefined;
                hasOpenedModeSelector?: boolean | undefined;
                lastModeExportPath?: string | undefined;
                lastModeImportPath?: string | undefined;
                imContacts?: {
                    friends?: {
                        id: number;
                        online: boolean;
                        nickName: string;
                        headImage: string;
                        deleted: boolean;
                        onlineWeb: boolean;
                        onlineApp: boolean;
                    }[] | undefined;
                    groups?: {
                        id: number;
                        name: string;
                        headImage: string;
                        ownerId: number;
                        headImageThumb: string;
                        notice: string;
                        remarkNickName: string;
                        showNickName: string;
                        showGroupName: string;
                        remarkGroupName: string;
                        dissolve: boolean;
                        quit: boolean;
                        isBanned: boolean;
                        reason: string;
                    }[] | undefined;
                    lastUpdated?: number | undefined;
                } | undefined;
                agentA2AMode?: {
                    enabled: boolean;
                    serverPort: number;
                    serverUrl: string;
                    agentId: string;
                    agentName: string;
                    isDebugMode?: boolean | undefined;
                } | null | undefined;
            };
            images?: string[] | undefined;
            newTab?: boolean | undefined;
        };
        commandName: TaskCommandName.StartNewTask;
    } | {
        data: string;
        commandName: TaskCommandName.CancelTask;
    } | {
        data: string;
        commandName: TaskCommandName.CloseTask;
    };
    clientId: string;
    origin: IpcOrigin.Client;
}>, z.ZodObject<{
    type: z.ZodLiteral<IpcMessageType.TaskEvent>;
    origin: z.ZodLiteral<IpcOrigin.Server>;
    relayClientId: z.ZodOptional<z.ZodString>;
    data: z.ZodDiscriminatedUnion<"eventName", [z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskCreated>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskCreated;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskCreated;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskStarted>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskStarted;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskStarted;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskCompleted>;
        payload: z.ZodTuple<[z.ZodString, z.ZodObject<{
            totalTokensIn: z.ZodNumber;
            totalTokensOut: z.ZodNumber;
            totalCacheWrites: z.ZodOptional<z.ZodNumber>;
            totalCacheReads: z.ZodOptional<z.ZodNumber>;
            totalCost: z.ZodNumber;
            contextTokens: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }>, z.ZodRecord<z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodObject<{
            attempts: z.ZodNumber;
            failures: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            attempts: number;
            failures: number;
        }, {
            attempts: number;
            failures: number;
        }>>, z.ZodObject<{
            isSubtask: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            isSubtask: boolean;
        }, {
            isSubtask: boolean;
        }>], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskCompleted;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
            attempts: number;
            failures: number;
        }>>, {
            isSubtask: boolean;
        }];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskCompleted;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
            attempts: number;
            failures: number;
        }>>, {
            isSubtask: boolean;
        }];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskAborted>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskAborted;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskAborted;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskFocused>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskFocused;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskFocused;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskUnfocused>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskUnfocused;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskUnfocused;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskActive>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskActive;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskActive;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskIdle>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskIdle;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskIdle;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskPaused>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskPaused;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskPaused;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskUnpaused>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskUnpaused;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskUnpaused;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskSpawned>;
        payload: z.ZodTuple<[z.ZodString, z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskSpawned;
        payload: [string, string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskSpawned;
        payload: [string, string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.Message>;
        payload: z.ZodTuple<[z.ZodObject<{
            taskId: z.ZodString;
            action: z.ZodUnion<[z.ZodLiteral<"created">, z.ZodLiteral<"updated">]>;
            message: z.ZodObject<{
                ts: z.ZodNumber;
                type: z.ZodUnion<[z.ZodLiteral<"ask">, z.ZodLiteral<"say">]>;
                ask: z.ZodOptional<z.ZodEnum<["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"]>>;
                say: z.ZodOptional<z.ZodEnum<["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"]>>;
                text: z.ZodOptional<z.ZodString>;
                images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                partial: z.ZodOptional<z.ZodBoolean>;
                reasoning: z.ZodOptional<z.ZodString>;
                conversationHistoryIndex: z.ZodOptional<z.ZodNumber>;
                checkpoint: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                progressStatus: z.ZodOptional<z.ZodObject<{
                    icon: z.ZodOptional<z.ZodString>;
                    text: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    text?: string | undefined;
                    icon?: string | undefined;
                }, {
                    text?: string | undefined;
                    icon?: string | undefined;
                }>>;
                contextCondense: z.ZodOptional<z.ZodObject<{
                    cost: z.ZodNumber;
                    prevContextTokens: z.ZodNumber;
                    newContextTokens: z.ZodNumber;
                    summary: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                }, {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                }>>;
                isProtected: z.ZodOptional<z.ZodBoolean>;
                apiProtocol: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"openai">, z.ZodLiteral<"anthropic">]>>;
                metadata: z.ZodOptional<z.ZodObject<{
                    gpt5: z.ZodOptional<z.ZodObject<{
                        previous_response_id: z.ZodOptional<z.ZodString>;
                        instructions: z.ZodOptional<z.ZodString>;
                        reasoning_summary: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    }, {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    }>>;
                    taskId: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                }, {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            }, {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            message: {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            };
            taskId: string;
            action: "created" | "updated";
        }, {
            message: {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            };
            taskId: string;
            action: "created" | "updated";
        }>], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.Message;
        payload: [{
            message: {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            };
            taskId: string;
            action: "created" | "updated";
        }];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.Message;
        payload: [{
            message: {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            };
            taskId: string;
            action: "created" | "updated";
        }];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskModeSwitched>;
        payload: z.ZodTuple<[z.ZodString, z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskModeSwitched;
        payload: [string, string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskModeSwitched;
        payload: [string, string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskAskResponded>;
        payload: z.ZodTuple<[z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskAskResponded;
        payload: [string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskAskResponded;
        payload: [string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskToolFailed>;
        payload: z.ZodTuple<[z.ZodString, z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodString], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskToolFailed;
        payload: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskToolFailed;
        payload: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.TaskTokenUsageUpdated>;
        payload: z.ZodTuple<[z.ZodString, z.ZodObject<{
            totalTokensIn: z.ZodNumber;
            totalTokensOut: z.ZodNumber;
            totalCacheWrites: z.ZodOptional<z.ZodNumber>;
            totalCacheReads: z.ZodOptional<z.ZodNumber>;
            totalCost: z.ZodNumber;
            contextTokens: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }>], null>;
        taskId: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        eventName: RooCodeEventName.TaskTokenUsageUpdated;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }];
        taskId?: number | undefined;
    }, {
        eventName: RooCodeEventName.TaskTokenUsageUpdated;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }];
        taskId?: number | undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.EvalPass>;
        payload: z.ZodUndefined;
        taskId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        taskId: number;
        eventName: RooCodeEventName.EvalPass;
        payload?: undefined;
    }, {
        taskId: number;
        eventName: RooCodeEventName.EvalPass;
        payload?: undefined;
    }>, z.ZodObject<{
        eventName: z.ZodLiteral<RooCodeEventName.EvalFail>;
        payload: z.ZodUndefined;
        taskId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        taskId: number;
        eventName: RooCodeEventName.EvalFail;
        payload?: undefined;
    }, {
        taskId: number;
        eventName: RooCodeEventName.EvalFail;
        payload?: undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: IpcMessageType.TaskEvent;
    data: {
        eventName: RooCodeEventName.TaskCreated;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskStarted;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskCompleted;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
            attempts: number;
            failures: number;
        }>>, {
            isSubtask: boolean;
        }];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskAborted;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskFocused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskUnfocused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskActive;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskIdle;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskPaused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskUnpaused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskSpawned;
        payload: [string, string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.Message;
        payload: [{
            message: {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            };
            taskId: string;
            action: "created" | "updated";
        }];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskModeSwitched;
        payload: [string, string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskAskResponded;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskToolFailed;
        payload: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskTokenUsageUpdated;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }];
        taskId?: number | undefined;
    } | {
        taskId: number;
        eventName: RooCodeEventName.EvalPass;
        payload?: undefined;
    } | {
        taskId: number;
        eventName: RooCodeEventName.EvalFail;
        payload?: undefined;
    };
    origin: IpcOrigin.Server;
    relayClientId?: string | undefined;
}, {
    type: IpcMessageType.TaskEvent;
    data: {
        eventName: RooCodeEventName.TaskCreated;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskStarted;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskCompleted;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }, Partial<Record<"browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", {
            attempts: number;
            failures: number;
        }>>, {
            isSubtask: boolean;
        }];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskAborted;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskFocused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskUnfocused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskActive;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskIdle;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskPaused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskUnpaused;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskSpawned;
        payload: [string, string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.Message;
        payload: [{
            message: {
                type: "ask" | "say";
                ts: number;
                reasoning?: string | undefined;
                partial?: boolean | undefined;
                metadata?: {
                    taskId?: string | undefined;
                    gpt5?: {
                        previous_response_id?: string | undefined;
                        instructions?: string | undefined;
                        reasoning_summary?: string | undefined;
                    } | undefined;
                } | undefined;
                text?: string | undefined;
                ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
                say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
                images?: string[] | undefined;
                conversationHistoryIndex?: number | undefined;
                checkpoint?: Record<string, unknown> | undefined;
                progressStatus?: {
                    text?: string | undefined;
                    icon?: string | undefined;
                } | undefined;
                contextCondense?: {
                    cost: number;
                    prevContextTokens: number;
                    newContextTokens: number;
                    summary: string;
                } | undefined;
                isProtected?: boolean | undefined;
                apiProtocol?: "openai" | "anthropic" | undefined;
            };
            taskId: string;
            action: "created" | "updated";
        }];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskModeSwitched;
        payload: [string, string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskAskResponded;
        payload: [string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskToolFailed;
        payload: [string, "browser_action" | "execute_command" | "read_file" | "write_to_file" | "apply_diff" | "insert_content" | "search_and_replace" | "search_files" | "list_files" | "list_code_definition_names" | "use_mcp_tool" | "access_mcp_resource" | "ask_followup_question" | "attempt_completion" | "switch_mode" | "new_task" | "fetch_instructions" | "codebase_search" | "update_todo_list", string];
        taskId?: number | undefined;
    } | {
        eventName: RooCodeEventName.TaskTokenUsageUpdated;
        payload: [string, {
            totalTokensIn: number;
            totalTokensOut: number;
            totalCost: number;
            contextTokens: number;
            totalCacheWrites?: number | undefined;
            totalCacheReads?: number | undefined;
        }];
        taskId?: number | undefined;
    } | {
        taskId: number;
        eventName: RooCodeEventName.EvalPass;
        payload?: undefined;
    } | {
        taskId: number;
        eventName: RooCodeEventName.EvalFail;
        payload?: undefined;
    };
    origin: IpcOrigin.Server;
    relayClientId?: string | undefined;
}>]>;
type IpcMessage = z.infer<typeof ipcMessageSchema>;
/**
 * IpcClientEvents
 */
type IpcClientEvents = {
    [IpcMessageType.Connect]: [];
    [IpcMessageType.Disconnect]: [];
    [IpcMessageType.Ack]: [data: Ack];
    [IpcMessageType.TaskCommand]: [data: TaskCommand];
    [IpcMessageType.TaskEvent]: [data: TaskEvent];
};
/**
 * IpcServerEvents
 */
type IpcServerEvents = {
    [IpcMessageType.Connect]: [clientId: string];
    [IpcMessageType.Disconnect]: [clientId: string];
    [IpcMessageType.TaskCommand]: [clientId: string, data: TaskCommand];
    [IpcMessageType.TaskEvent]: [relayClientId: string | undefined, data: TaskEvent];
};

type RooCodeAPIEvents = RooCodeEvents;
interface RooCodeAPI extends EventEmitter<RooCodeAPIEvents> {
    /**
     * Starts a new task with an optional initial message and images.
     * @param task Optional initial task message.
     * @param images Optional array of image data URIs (e.g., "data:image/webp;base64,...").
     * @returns The ID of the new task.
     */
    startNewTask({ configuration, text, images, newTab, }: {
        configuration?: RooCodeSettings;
        text?: string;
        images?: string[];
        newTab?: boolean;
    }): Promise<string>;
    /**
     * Resumes a task with the given ID.
     * @param taskId The ID of the task to resume.
     * @throws Error if the task is not found in the task history.
     */
    resumeTask(taskId: string): Promise<void>;
    /**
     * Checks if a task with the given ID is in the task history.
     * @param taskId The ID of the task to check.
     * @returns True if the task is in the task history, false otherwise.
     */
    isTaskInHistory(taskId: string): Promise<boolean>;
    /**
     * Returns the current task stack.
     * @returns An array of task IDs.
     */
    getCurrentTaskStack(): string[];
    /**
     * Clears the current task.
     */
    clearCurrentTask(lastMessage?: string): Promise<void>;
    /**
     * Cancels the current task.
     */
    cancelCurrentTask(): Promise<void>;
    /**
     * Sends a message to the current task.
     * @param message Optional message to send.
     * @param images Optional array of image data URIs (e.g., "data:image/webp;base64,...").
     */
    sendMessage(message?: string, images?: string[]): Promise<void>;
    /**
     * Simulates pressing the primary button in the chat interface.
     */
    pressPrimaryButton(): Promise<void>;
    /**
     * Simulates pressing the secondary button in the chat interface.
     */
    pressSecondaryButton(): Promise<void>;
    /**
     * Returns true if the API is ready to use.
     */
    isReady(): boolean;
    /**
     * Returns the current configuration.
     * @returns The current configuration.
     */
    getConfiguration(): RooCodeSettings;
    /**
     * Sets the configuration for the current task.
     * @param values An object containing key-value pairs to set.
     */
    setConfiguration(values: RooCodeSettings): Promise<void>;
    /**
     * Returns a list of all configured profile names
     * @returns Array of profile names
     */
    getProfiles(): string[];
    /**
     * Returns the profile entry for a given name
     * @param name The name of the profile
     * @returns The profile entry, or undefined if the profile does not exist
     */
    getProfileEntry(name: string): ProviderSettingsEntry | undefined;
    /**
     * Creates a new API configuration profile
     * @param name The name of the profile
     * @param profile The profile to create; defaults to an empty object
     * @param activate Whether to activate the profile after creation; defaults to true
     * @returns The ID of the created profile
     * @throws Error if the profile already exists
     */
    createProfile(name: string, profile?: ProviderSettings, activate?: boolean): Promise<string>;
    /**
     * Updates an existing API configuration profile
     * @param name The name of the profile
     * @param profile The profile to update
     * @param activate Whether to activate the profile after update; defaults to true
     * @returns The ID of the updated profile
     * @throws Error if the profile does not exist
     */
    updateProfile(name: string, profile: ProviderSettings, activate?: boolean): Promise<string | undefined>;
    /**
     * Creates a new API configuration profile or updates an existing one
     * @param name The name of the profile
     * @param profile The profile to create or update; defaults to an empty object
     * @param activate Whether to activate the profile after upsert; defaults to true
     * @returns The ID of the upserted profile
     */
    upsertProfile(name: string, profile: ProviderSettings, activate?: boolean): Promise<string | undefined>;
    /**
     * Deletes a profile by name
     * @param name The name of the profile to delete
     * @throws Error if the profile does not exist
     */
    deleteProfile(name: string): Promise<void>;
    /**
     * Returns the name of the currently active profile
     * @returns The profile name, or undefined if no profile is active
     */
    getActiveProfile(): string | undefined;
    /**
     * Changes the active API configuration profile
     * @param name The name of the profile to activate
     * @throws Error if the profile does not exist
     */
    setActiveProfile(name: string): Promise<string | undefined>;
}
interface RooCodeIpcServer extends EventEmitter<IpcServerEvents> {
    listen(): void;
    broadcast(message: IpcMessage): void;
    send(client: string | Socket, message: IpcMessage): void;
    get socketPath(): string;
    get isListening(): boolean;
}

/**
 * CloudUserInfo
 */
interface CloudUserInfo {
    id?: string;
    name?: string;
    email?: string;
    picture?: string;
    organizationId?: string;
    organizationName?: string;
    organizationRole?: string;
    organizationImageUrl?: string;
    extensionBridgeEnabled?: boolean;
}
/**
 * CloudOrganization Types
 */
interface CloudOrganization {
    id: string;
    name: string;
    slug?: string;
    image_url?: string;
    has_image?: boolean;
    created_at?: number;
    updated_at?: number;
}
interface CloudOrganizationMembership {
    id: string;
    organization: CloudOrganization;
    role: string;
    permissions?: string[];
    created_at?: number;
    updated_at?: number;
}
/**
 * OrganizationAllowList
 */
declare const organizationAllowListSchema: z.ZodObject<{
    allowAll: z.ZodBoolean;
    providers: z.ZodRecord<z.ZodString, z.ZodObject<{
        allowAll: z.ZodBoolean;
        models: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        allowAll: boolean;
        models?: string[] | undefined;
    }, {
        allowAll: boolean;
        models?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    allowAll: boolean;
    providers: Record<string, {
        allowAll: boolean;
        models?: string[] | undefined;
    }>;
}, {
    allowAll: boolean;
    providers: Record<string, {
        allowAll: boolean;
        models?: string[] | undefined;
    }>;
}>;
type OrganizationAllowList = z.infer<typeof organizationAllowListSchema>;
/**
 * OrganizationDefaultSettings
 */
declare const organizationDefaultSettingsSchema: z.ZodObject<{
    fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
    enableCheckpoints: z.ZodOptional<z.ZodBoolean>;
    showRooIgnoredFiles: z.ZodOptional<z.ZodBoolean>;
    terminalShellIntegrationDisabled: z.ZodOptional<z.ZodBoolean>;
    terminalZshClearEolMark: z.ZodOptional<z.ZodBoolean>;
    terminalCompressProgressBar: z.ZodOptional<z.ZodBoolean>;
} & {
    maxOpenTabsContext: z.ZodOptional<z.ZodNumber>;
    maxReadFileLine: z.ZodOptional<z.ZodNumber>;
    maxWorkspaceFiles: z.ZodOptional<z.ZodNumber>;
    terminalCommandDelay: z.ZodOptional<z.ZodNumber>;
    terminalOutputLineLimit: z.ZodOptional<z.ZodNumber>;
    terminalShellIntegrationTimeout: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    fuzzyMatchThreshold?: number | undefined;
    enableCheckpoints?: boolean | undefined;
    maxOpenTabsContext?: number | undefined;
    maxWorkspaceFiles?: number | undefined;
    showRooIgnoredFiles?: boolean | undefined;
    maxReadFileLine?: number | undefined;
    terminalOutputLineLimit?: number | undefined;
    terminalShellIntegrationTimeout?: number | undefined;
    terminalShellIntegrationDisabled?: boolean | undefined;
    terminalCommandDelay?: number | undefined;
    terminalZshClearEolMark?: boolean | undefined;
    terminalCompressProgressBar?: boolean | undefined;
}, {
    fuzzyMatchThreshold?: number | undefined;
    enableCheckpoints?: boolean | undefined;
    maxOpenTabsContext?: number | undefined;
    maxWorkspaceFiles?: number | undefined;
    showRooIgnoredFiles?: boolean | undefined;
    maxReadFileLine?: number | undefined;
    terminalOutputLineLimit?: number | undefined;
    terminalShellIntegrationTimeout?: number | undefined;
    terminalShellIntegrationDisabled?: boolean | undefined;
    terminalCommandDelay?: number | undefined;
    terminalZshClearEolMark?: boolean | undefined;
    terminalCompressProgressBar?: boolean | undefined;
}>;
type OrganizationDefaultSettings = z.infer<typeof organizationDefaultSettingsSchema>;
/**
 * OrganizationCloudSettings
 */
declare const organizationCloudSettingsSchema: z.ZodObject<{
    recordTaskMessages: z.ZodOptional<z.ZodBoolean>;
    enableTaskSharing: z.ZodOptional<z.ZodBoolean>;
    taskShareExpirationDays: z.ZodOptional<z.ZodNumber>;
    allowMembersViewAllTasks: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    recordTaskMessages?: boolean | undefined;
    enableTaskSharing?: boolean | undefined;
    taskShareExpirationDays?: number | undefined;
    allowMembersViewAllTasks?: boolean | undefined;
}, {
    recordTaskMessages?: boolean | undefined;
    enableTaskSharing?: boolean | undefined;
    taskShareExpirationDays?: number | undefined;
    allowMembersViewAllTasks?: boolean | undefined;
}>;
type OrganizationCloudSettings = z.infer<typeof organizationCloudSettingsSchema>;
/**
 * Organization Settings
 */
declare const organizationSettingsSchema: z.ZodObject<{
    version: z.ZodNumber;
    cloudSettings: z.ZodOptional<z.ZodObject<{
        recordTaskMessages: z.ZodOptional<z.ZodBoolean>;
        enableTaskSharing: z.ZodOptional<z.ZodBoolean>;
        taskShareExpirationDays: z.ZodOptional<z.ZodNumber>;
        allowMembersViewAllTasks: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        recordTaskMessages?: boolean | undefined;
        enableTaskSharing?: boolean | undefined;
        taskShareExpirationDays?: number | undefined;
        allowMembersViewAllTasks?: boolean | undefined;
    }, {
        recordTaskMessages?: boolean | undefined;
        enableTaskSharing?: boolean | undefined;
        taskShareExpirationDays?: number | undefined;
        allowMembersViewAllTasks?: boolean | undefined;
    }>>;
    defaultSettings: z.ZodObject<{
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        enableCheckpoints: z.ZodOptional<z.ZodBoolean>;
        showRooIgnoredFiles: z.ZodOptional<z.ZodBoolean>;
        terminalShellIntegrationDisabled: z.ZodOptional<z.ZodBoolean>;
        terminalZshClearEolMark: z.ZodOptional<z.ZodBoolean>;
        terminalCompressProgressBar: z.ZodOptional<z.ZodBoolean>;
    } & {
        maxOpenTabsContext: z.ZodOptional<z.ZodNumber>;
        maxReadFileLine: z.ZodOptional<z.ZodNumber>;
        maxWorkspaceFiles: z.ZodOptional<z.ZodNumber>;
        terminalCommandDelay: z.ZodOptional<z.ZodNumber>;
        terminalOutputLineLimit: z.ZodOptional<z.ZodNumber>;
        terminalShellIntegrationTimeout: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        fuzzyMatchThreshold?: number | undefined;
        enableCheckpoints?: boolean | undefined;
        maxOpenTabsContext?: number | undefined;
        maxWorkspaceFiles?: number | undefined;
        showRooIgnoredFiles?: boolean | undefined;
        maxReadFileLine?: number | undefined;
        terminalOutputLineLimit?: number | undefined;
        terminalShellIntegrationTimeout?: number | undefined;
        terminalShellIntegrationDisabled?: boolean | undefined;
        terminalCommandDelay?: number | undefined;
        terminalZshClearEolMark?: boolean | undefined;
        terminalCompressProgressBar?: boolean | undefined;
    }, {
        fuzzyMatchThreshold?: number | undefined;
        enableCheckpoints?: boolean | undefined;
        maxOpenTabsContext?: number | undefined;
        maxWorkspaceFiles?: number | undefined;
        showRooIgnoredFiles?: boolean | undefined;
        maxReadFileLine?: number | undefined;
        terminalOutputLineLimit?: number | undefined;
        terminalShellIntegrationTimeout?: number | undefined;
        terminalShellIntegrationDisabled?: boolean | undefined;
        terminalCommandDelay?: number | undefined;
        terminalZshClearEolMark?: boolean | undefined;
        terminalCompressProgressBar?: boolean | undefined;
    }>;
    allowList: z.ZodObject<{
        allowAll: z.ZodBoolean;
        providers: z.ZodRecord<z.ZodString, z.ZodObject<{
            allowAll: z.ZodBoolean;
            models: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            allowAll: boolean;
            models?: string[] | undefined;
        }, {
            allowAll: boolean;
            models?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        allowAll: boolean;
        providers: Record<string, {
            allowAll: boolean;
            models?: string[] | undefined;
        }>;
    }, {
        allowAll: boolean;
        providers: Record<string, {
            allowAll: boolean;
            models?: string[] | undefined;
        }>;
    }>;
    hiddenMcps: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    hideMarketplaceMcps: z.ZodOptional<z.ZodBoolean>;
    mcps: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        author: z.ZodOptional<z.ZodString>;
        authorUrl: z.ZodOptional<z.ZodString>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    } & {
        url: z.ZodString;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            content: z.ZodString;
            parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                key: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                key: string;
                optional: boolean;
                placeholder?: string | undefined;
            }, {
                name: string;
                key: string;
                placeholder?: string | undefined;
                optional?: boolean | undefined;
            }>, "many">>;
            prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            content: string;
            parameters?: {
                name: string;
                key: string;
                optional: boolean;
                placeholder?: string | undefined;
            }[] | undefined;
            prerequisites?: string[] | undefined;
        }, {
            name: string;
            content: string;
            parameters?: {
                name: string;
                key: string;
                placeholder?: string | undefined;
                optional?: boolean | undefined;
            }[] | undefined;
            prerequisites?: string[] | undefined;
        }>, "many">]>;
        parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            key: z.ZodString;
            placeholder: z.ZodOptional<z.ZodString>;
            optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }, {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        description: string;
        id: string;
        name: string;
        url: string;
        content: string | {
            name: string;
            content: string;
            parameters?: {
                name: string;
                key: string;
                optional: boolean;
                placeholder?: string | undefined;
            }[] | undefined;
            prerequisites?: string[] | undefined;
        }[];
        tags?: string[] | undefined;
        parameters?: {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
        author?: string | undefined;
        authorUrl?: string | undefined;
    }, {
        description: string;
        id: string;
        name: string;
        url: string;
        content: string | {
            name: string;
            content: string;
            parameters?: {
                name: string;
                key: string;
                placeholder?: string | undefined;
                optional?: boolean | undefined;
            }[] | undefined;
            prerequisites?: string[] | undefined;
        }[];
        tags?: string[] | undefined;
        parameters?: {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
        author?: string | undefined;
        authorUrl?: string | undefined;
    }>, "many">>;
    providerProfiles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodIntersection<z.ZodDiscriminatedUnion<"apiProvider", [z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        apiKey: z.ZodOptional<z.ZodString>;
        anthropicBaseUrl: z.ZodOptional<z.ZodString>;
        anthropicUseAuthToken: z.ZodOptional<z.ZodBoolean>;
        anthropicBeta1MContext: z.ZodOptional<z.ZodBoolean>;
    } & {
        apiProvider: z.ZodLiteral<"anthropic">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "anthropic";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
    }, {
        apiProvider: "anthropic";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        claudeCodePath: z.ZodOptional<z.ZodString>;
        claudeCodeMaxOutputTokens: z.ZodOptional<z.ZodNumber>;
    } & {
        apiProvider: z.ZodLiteral<"claude-code">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "claude-code";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
    }, {
        apiProvider: "claude-code";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        glamaModelId: z.ZodOptional<z.ZodString>;
        glamaApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"glama">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "glama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
    }, {
        apiProvider: "glama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        openRouterApiKey: z.ZodOptional<z.ZodString>;
        openRouterModelId: z.ZodOptional<z.ZodString>;
        openRouterBaseUrl: z.ZodOptional<z.ZodString>;
        openRouterSpecificProvider: z.ZodOptional<z.ZodString>;
        openRouterUseMiddleOutTransform: z.ZodOptional<z.ZodBoolean>;
    } & {
        apiProvider: z.ZodLiteral<"openrouter">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "openrouter";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
    }, {
        apiProvider: "openrouter";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        awsAccessKey: z.ZodOptional<z.ZodString>;
        awsSecretKey: z.ZodOptional<z.ZodString>;
        awsSessionToken: z.ZodOptional<z.ZodString>;
        awsRegion: z.ZodOptional<z.ZodString>;
        awsUseCrossRegionInference: z.ZodOptional<z.ZodBoolean>;
        awsUsePromptCache: z.ZodOptional<z.ZodBoolean>;
        awsProfile: z.ZodOptional<z.ZodString>;
        awsUseProfile: z.ZodOptional<z.ZodBoolean>;
        awsApiKey: z.ZodOptional<z.ZodString>;
        awsUseApiKey: z.ZodOptional<z.ZodBoolean>;
        awsCustomArn: z.ZodOptional<z.ZodString>;
        awsModelContextWindow: z.ZodOptional<z.ZodNumber>;
        awsBedrockEndpointEnabled: z.ZodOptional<z.ZodBoolean>;
        awsBedrockEndpoint: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"bedrock">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "bedrock";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
    }, {
        apiProvider: "bedrock";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        vertexKeyFile: z.ZodOptional<z.ZodString>;
        vertexJsonCredentials: z.ZodOptional<z.ZodString>;
        vertexProjectId: z.ZodOptional<z.ZodString>;
        vertexRegion: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"vertex">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "vertex";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
    }, {
        apiProvider: "vertex";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        openAiBaseUrl: z.ZodOptional<z.ZodString>;
        openAiApiKey: z.ZodOptional<z.ZodString>;
        openAiLegacyFormat: z.ZodOptional<z.ZodBoolean>;
        openAiR1FormatEnabled: z.ZodOptional<z.ZodBoolean>;
        openAiModelId: z.ZodOptional<z.ZodString>;
        openAiCustomModelInfo: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            contextWindow: z.ZodNumber;
            supportsImages: z.ZodOptional<z.ZodBoolean>;
            supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
            supportsPromptCache: z.ZodBoolean;
            supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
            supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
            requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
            supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
            supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
            inputPrice: z.ZodOptional<z.ZodNumber>;
            outputPrice: z.ZodOptional<z.ZodNumber>;
            cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
            cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
            description: z.ZodOptional<z.ZodString>;
            modelType: z.ZodOptional<z.ZodString>;
            reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
            minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
            maxCachePoints: z.ZodOptional<z.ZodNumber>;
            cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
                contextWindow: z.ZodNumber;
                inputPrice: z.ZodOptional<z.ZodNumber>;
                outputPrice: z.ZodOptional<z.ZodNumber>;
                cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
                cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }, {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        }, {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        }>>>;
        openAiUseAzure: z.ZodOptional<z.ZodBoolean>;
        azureApiVersion: z.ZodOptional<z.ZodString>;
        openAiStreamingEnabled: z.ZodOptional<z.ZodBoolean>;
        openAiHostHeader: z.ZodOptional<z.ZodString>;
        openAiHeaders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    } & {
        apiProvider: z.ZodLiteral<"openai">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "openai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
    }, {
        apiProvider: "openai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        ollamaModelId: z.ZodOptional<z.ZodString>;
        ollamaBaseUrl: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"ollama">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "ollama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
    }, {
        apiProvider: "ollama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        vsCodeLmModelSelector: z.ZodOptional<z.ZodObject<{
            vendor: z.ZodOptional<z.ZodString>;
            family: z.ZodOptional<z.ZodString>;
            version: z.ZodOptional<z.ZodString>;
            id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        }, {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        }>>;
    } & {
        apiProvider: z.ZodLiteral<"vscode-lm">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "vscode-lm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
    }, {
        apiProvider: "vscode-lm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        lmStudioModelId: z.ZodOptional<z.ZodString>;
        lmStudioBaseUrl: z.ZodOptional<z.ZodString>;
        lmStudioDraftModelId: z.ZodOptional<z.ZodString>;
        lmStudioSpeculativeDecodingEnabled: z.ZodOptional<z.ZodBoolean>;
    } & {
        apiProvider: z.ZodLiteral<"lmstudio">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "lmstudio";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    }, {
        apiProvider: "lmstudio";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        geminiApiKey: z.ZodOptional<z.ZodString>;
        googleGeminiBaseUrl: z.ZodOptional<z.ZodString>;
        enableUrlContext: z.ZodOptional<z.ZodBoolean>;
        enableGrounding: z.ZodOptional<z.ZodBoolean>;
    } & {
        apiProvider: z.ZodLiteral<"gemini">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "gemini";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
    }, {
        apiProvider: "gemini";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        geminiCliOAuthPath: z.ZodOptional<z.ZodString>;
        geminiCliProjectId: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"gemini-cli">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "gemini-cli";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
    }, {
        apiProvider: "gemini-cli";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        openAiNativeApiKey: z.ZodOptional<z.ZodString>;
        openAiNativeBaseUrl: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"openai-native">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "openai-native";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
    }, {
        apiProvider: "openai-native";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        mistralApiKey: z.ZodOptional<z.ZodString>;
        mistralCodestralUrl: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"mistral">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "mistral";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
    }, {
        apiProvider: "mistral";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        deepSeekBaseUrl: z.ZodOptional<z.ZodString>;
        deepSeekApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"deepseek">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "deepseek";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
    }, {
        apiProvider: "deepseek";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        doubaoBaseUrl: z.ZodOptional<z.ZodString>;
        doubaoApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"doubao">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "doubao";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
    }, {
        apiProvider: "doubao";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        moonshotBaseUrl: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"https://api.moonshot.ai/v1">, z.ZodLiteral<"https://api.moonshot.cn/v1">]>>;
        moonshotApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"moonshot">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "moonshot";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
    }, {
        apiProvider: "moonshot";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        unboundApiKey: z.ZodOptional<z.ZodString>;
        unboundModelId: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"unbound">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "unbound";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
    }, {
        apiProvider: "unbound";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        requestyBaseUrl: z.ZodOptional<z.ZodString>;
        requestyApiKey: z.ZodOptional<z.ZodString>;
        requestyModelId: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"requesty">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "requesty";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
    }, {
        apiProvider: "requesty";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiProvider: z.ZodLiteral<"human-relay">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "human-relay";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
    }, {
        apiProvider: "human-relay";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        fakeAi: z.ZodOptional<z.ZodUnknown>;
    } & {
        apiProvider: z.ZodLiteral<"fake-ai">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "fake-ai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        fakeAi?: unknown;
    }, {
        apiProvider: "fake-ai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        fakeAi?: unknown;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        xaiApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"xai">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "xai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        xaiApiKey?: string | undefined;
    }, {
        apiProvider: "xai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        xaiApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        groqApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"groq">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "groq";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        groqApiKey?: string | undefined;
    }, {
        apiProvider: "groq";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        groqApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        huggingFaceApiKey: z.ZodOptional<z.ZodString>;
        huggingFaceModelId: z.ZodOptional<z.ZodString>;
        huggingFaceInferenceProvider: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"huggingface">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "huggingface";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
    }, {
        apiProvider: "huggingface";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        chutesApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"chutes">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "chutes";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        chutesApiKey?: string | undefined;
    }, {
        apiProvider: "chutes";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        chutesApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        litellmBaseUrl: z.ZodOptional<z.ZodString>;
        litellmApiKey: z.ZodOptional<z.ZodString>;
        litellmModelId: z.ZodOptional<z.ZodString>;
        litellmUsePromptCache: z.ZodOptional<z.ZodBoolean>;
    } & {
        apiProvider: z.ZodLiteral<"litellm">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "litellm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
    }, {
        apiProvider: "litellm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        cerebrasApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"cerebras">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "cerebras";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        cerebrasApiKey?: string | undefined;
    }, {
        apiProvider: "cerebras";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        cerebrasApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        sambaNovaApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"sambanova">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "sambanova";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        sambaNovaApiKey?: string | undefined;
    }, {
        apiProvider: "sambanova";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        sambaNovaApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        zaiApiKey: z.ZodOptional<z.ZodString>;
        zaiApiLine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"china">, z.ZodLiteral<"international">]>>;
    } & {
        apiProvider: z.ZodLiteral<"zai">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "zai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
    }, {
        apiProvider: "zai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        fireworksApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"fireworks">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "fireworks";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        fireworksApiKey?: string | undefined;
    }, {
        apiProvider: "fireworks";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        fireworksApiKey?: string | undefined;
    }>, z.ZodObject<{
        includeMaxTokens: z.ZodOptional<z.ZodBoolean>;
        diffEnabled: z.ZodOptional<z.ZodBoolean>;
        todoListEnabled: z.ZodOptional<z.ZodBoolean>;
        fuzzyMatchThreshold: z.ZodOptional<z.ZodNumber>;
        modelTemperature: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        rateLimitSeconds: z.ZodOptional<z.ZodNumber>;
        consecutiveMistakeLimit: z.ZodOptional<z.ZodNumber>;
        enableReasoningEffort: z.ZodOptional<z.ZodBoolean>;
        reasoningEffort: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["low", "medium", "high"]>, z.ZodLiteral<"minimal">]>>;
        modelMaxTokens: z.ZodOptional<z.ZodNumber>;
        modelMaxThinkingTokens: z.ZodOptional<z.ZodNumber>;
        verbosity: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    } & {
        apiModelId: z.ZodOptional<z.ZodString>;
    } & {
        ioIntelligenceModelId: z.ZodOptional<z.ZodString>;
        ioIntelligenceApiKey: z.ZodOptional<z.ZodString>;
    } & {
        apiProvider: z.ZodLiteral<"io-intelligence">;
    }, "strip", z.ZodTypeAny, {
        apiProvider: "io-intelligence";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
    }, {
        apiProvider: "io-intelligence";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
    }>, z.ZodObject<{
        apiProvider: z.ZodUndefined;
    }, "strip", z.ZodTypeAny, {
        apiProvider?: undefined;
    }, {
        apiProvider?: undefined;
    }>]>, z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
    }, {
        id?: string | undefined;
    }>>>>;
}, "strip", z.ZodTypeAny, {
    version: number;
    defaultSettings: {
        fuzzyMatchThreshold?: number | undefined;
        enableCheckpoints?: boolean | undefined;
        maxOpenTabsContext?: number | undefined;
        maxWorkspaceFiles?: number | undefined;
        showRooIgnoredFiles?: boolean | undefined;
        maxReadFileLine?: number | undefined;
        terminalOutputLineLimit?: number | undefined;
        terminalShellIntegrationTimeout?: number | undefined;
        terminalShellIntegrationDisabled?: boolean | undefined;
        terminalCommandDelay?: number | undefined;
        terminalZshClearEolMark?: boolean | undefined;
        terminalCompressProgressBar?: boolean | undefined;
    };
    allowList: {
        allowAll: boolean;
        providers: Record<string, {
            allowAll: boolean;
            models?: string[] | undefined;
        }>;
    };
    cloudSettings?: {
        recordTaskMessages?: boolean | undefined;
        enableTaskSharing?: boolean | undefined;
        taskShareExpirationDays?: number | undefined;
        allowMembersViewAllTasks?: boolean | undefined;
    } | undefined;
    hiddenMcps?: string[] | undefined;
    hideMarketplaceMcps?: boolean | undefined;
    mcps?: {
        description: string;
        id: string;
        name: string;
        url: string;
        content: string | {
            name: string;
            content: string;
            parameters?: {
                name: string;
                key: string;
                optional: boolean;
                placeholder?: string | undefined;
            }[] | undefined;
            prerequisites?: string[] | undefined;
        }[];
        tags?: string[] | undefined;
        parameters?: {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
        author?: string | undefined;
        authorUrl?: string | undefined;
    }[] | undefined;
    providerProfiles?: Record<string, ({
        apiProvider?: undefined;
    } | {
        apiProvider: "anthropic";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
    } | {
        apiProvider: "claude-code";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
    } | {
        apiProvider: "glama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
    } | {
        apiProvider: "openrouter";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
    } | {
        apiProvider: "bedrock";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
    } | {
        apiProvider: "vertex";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
    } | {
        apiProvider: "openai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
    } | {
        apiProvider: "ollama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
    } | {
        apiProvider: "vscode-lm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
    } | {
        apiProvider: "lmstudio";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    } | {
        apiProvider: "gemini";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
    } | {
        apiProvider: "gemini-cli";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
    } | {
        apiProvider: "openai-native";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
    } | {
        apiProvider: "mistral";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
    } | {
        apiProvider: "deepseek";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
    } | {
        apiProvider: "doubao";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
    } | {
        apiProvider: "moonshot";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
    } | {
        apiProvider: "unbound";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
    } | {
        apiProvider: "requesty";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
    } | {
        apiProvider: "human-relay";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
    } | {
        apiProvider: "fake-ai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        fakeAi?: unknown;
    } | {
        apiProvider: "xai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        xaiApiKey?: string | undefined;
    } | {
        apiProvider: "groq";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        groqApiKey?: string | undefined;
    } | {
        apiProvider: "huggingface";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
    } | {
        apiProvider: "chutes";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        chutesApiKey?: string | undefined;
    } | {
        apiProvider: "litellm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
    } | {
        apiProvider: "cerebras";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        cerebrasApiKey?: string | undefined;
    } | {
        apiProvider: "sambanova";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        sambaNovaApiKey?: string | undefined;
    } | {
        apiProvider: "zai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
    } | {
        apiProvider: "fireworks";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        fireworksApiKey?: string | undefined;
    } | {
        apiProvider: "io-intelligence";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
    }) & {
        id?: string | undefined;
    }> | undefined;
}, {
    version: number;
    defaultSettings: {
        fuzzyMatchThreshold?: number | undefined;
        enableCheckpoints?: boolean | undefined;
        maxOpenTabsContext?: number | undefined;
        maxWorkspaceFiles?: number | undefined;
        showRooIgnoredFiles?: boolean | undefined;
        maxReadFileLine?: number | undefined;
        terminalOutputLineLimit?: number | undefined;
        terminalShellIntegrationTimeout?: number | undefined;
        terminalShellIntegrationDisabled?: boolean | undefined;
        terminalCommandDelay?: number | undefined;
        terminalZshClearEolMark?: boolean | undefined;
        terminalCompressProgressBar?: boolean | undefined;
    };
    allowList: {
        allowAll: boolean;
        providers: Record<string, {
            allowAll: boolean;
            models?: string[] | undefined;
        }>;
    };
    cloudSettings?: {
        recordTaskMessages?: boolean | undefined;
        enableTaskSharing?: boolean | undefined;
        taskShareExpirationDays?: number | undefined;
        allowMembersViewAllTasks?: boolean | undefined;
    } | undefined;
    hiddenMcps?: string[] | undefined;
    hideMarketplaceMcps?: boolean | undefined;
    mcps?: {
        description: string;
        id: string;
        name: string;
        url: string;
        content: string | {
            name: string;
            content: string;
            parameters?: {
                name: string;
                key: string;
                placeholder?: string | undefined;
                optional?: boolean | undefined;
            }[] | undefined;
            prerequisites?: string[] | undefined;
        }[];
        tags?: string[] | undefined;
        parameters?: {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
        author?: string | undefined;
        authorUrl?: string | undefined;
    }[] | undefined;
    providerProfiles?: Record<string, ({
        apiProvider?: undefined;
    } | {
        apiProvider: "anthropic";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        apiKey?: string | undefined;
        anthropicBaseUrl?: string | undefined;
        anthropicUseAuthToken?: boolean | undefined;
        anthropicBeta1MContext?: boolean | undefined;
    } | {
        apiProvider: "claude-code";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        claudeCodePath?: string | undefined;
        claudeCodeMaxOutputTokens?: number | undefined;
    } | {
        apiProvider: "glama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        glamaModelId?: string | undefined;
        glamaApiKey?: string | undefined;
    } | {
        apiProvider: "openrouter";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openRouterApiKey?: string | undefined;
        openRouterModelId?: string | undefined;
        openRouterBaseUrl?: string | undefined;
        openRouterSpecificProvider?: string | undefined;
        openRouterUseMiddleOutTransform?: boolean | undefined;
    } | {
        apiProvider: "bedrock";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        awsAccessKey?: string | undefined;
        awsSecretKey?: string | undefined;
        awsSessionToken?: string | undefined;
        awsRegion?: string | undefined;
        awsUseCrossRegionInference?: boolean | undefined;
        awsUsePromptCache?: boolean | undefined;
        awsProfile?: string | undefined;
        awsUseProfile?: boolean | undefined;
        awsApiKey?: string | undefined;
        awsUseApiKey?: boolean | undefined;
        awsCustomArn?: string | undefined;
        awsModelContextWindow?: number | undefined;
        awsBedrockEndpointEnabled?: boolean | undefined;
        awsBedrockEndpoint?: string | undefined;
    } | {
        apiProvider: "vertex";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        vertexKeyFile?: string | undefined;
        vertexJsonCredentials?: string | undefined;
        vertexProjectId?: string | undefined;
        vertexRegion?: string | undefined;
    } | {
        apiProvider: "openai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        openAiBaseUrl?: string | undefined;
        openAiApiKey?: string | undefined;
        openAiLegacyFormat?: boolean | undefined;
        openAiR1FormatEnabled?: boolean | undefined;
        openAiModelId?: string | undefined;
        openAiCustomModelInfo?: {
            contextWindow: number;
            supportsPromptCache: boolean;
            maxTokens?: number | null | undefined;
            maxThinkingTokens?: number | null | undefined;
            supportsImages?: boolean | undefined;
            supportsComputerUse?: boolean | undefined;
            supportsVerbosity?: boolean | undefined;
            supportsReasoningBudget?: boolean | undefined;
            requiredReasoningBudget?: boolean | undefined;
            supportsReasoningEffort?: boolean | undefined;
            supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
            inputPrice?: number | undefined;
            outputPrice?: number | undefined;
            cacheWritesPrice?: number | undefined;
            cacheReadsPrice?: number | undefined;
            description?: string | undefined;
            modelType?: string | undefined;
            reasoningEffort?: "low" | "medium" | "high" | undefined;
            minTokensPerCachePoint?: number | undefined;
            maxCachePoints?: number | undefined;
            cachableFields?: string[] | undefined;
            tiers?: {
                contextWindow: number;
                inputPrice?: number | undefined;
                outputPrice?: number | undefined;
                cacheWritesPrice?: number | undefined;
                cacheReadsPrice?: number | undefined;
            }[] | undefined;
        } | null | undefined;
        openAiUseAzure?: boolean | undefined;
        azureApiVersion?: string | undefined;
        openAiStreamingEnabled?: boolean | undefined;
        openAiHostHeader?: string | undefined;
        openAiHeaders?: Record<string, string> | undefined;
    } | {
        apiProvider: "ollama";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        ollamaModelId?: string | undefined;
        ollamaBaseUrl?: string | undefined;
    } | {
        apiProvider: "vscode-lm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        vsCodeLmModelSelector?: {
            id?: string | undefined;
            vendor?: string | undefined;
            family?: string | undefined;
            version?: string | undefined;
        } | undefined;
    } | {
        apiProvider: "lmstudio";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        lmStudioModelId?: string | undefined;
        lmStudioBaseUrl?: string | undefined;
        lmStudioDraftModelId?: string | undefined;
        lmStudioSpeculativeDecodingEnabled?: boolean | undefined;
    } | {
        apiProvider: "gemini";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiApiKey?: string | undefined;
        googleGeminiBaseUrl?: string | undefined;
        enableUrlContext?: boolean | undefined;
        enableGrounding?: boolean | undefined;
    } | {
        apiProvider: "gemini-cli";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        geminiCliOAuthPath?: string | undefined;
        geminiCliProjectId?: string | undefined;
    } | {
        apiProvider: "openai-native";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        openAiNativeApiKey?: string | undefined;
        openAiNativeBaseUrl?: string | undefined;
    } | {
        apiProvider: "mistral";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        mistralApiKey?: string | undefined;
        mistralCodestralUrl?: string | undefined;
    } | {
        apiProvider: "deepseek";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        deepSeekBaseUrl?: string | undefined;
        deepSeekApiKey?: string | undefined;
    } | {
        apiProvider: "doubao";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        doubaoBaseUrl?: string | undefined;
        doubaoApiKey?: string | undefined;
    } | {
        apiProvider: "moonshot";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        moonshotBaseUrl?: "https://api.moonshot.ai/v1" | "https://api.moonshot.cn/v1" | undefined;
        moonshotApiKey?: string | undefined;
    } | {
        apiProvider: "unbound";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        unboundApiKey?: string | undefined;
        unboundModelId?: string | undefined;
    } | {
        apiProvider: "requesty";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        requestyBaseUrl?: string | undefined;
        requestyApiKey?: string | undefined;
        requestyModelId?: string | undefined;
    } | {
        apiProvider: "human-relay";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
    } | {
        apiProvider: "fake-ai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        fakeAi?: unknown;
    } | {
        apiProvider: "xai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        xaiApiKey?: string | undefined;
    } | {
        apiProvider: "groq";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        groqApiKey?: string | undefined;
    } | {
        apiProvider: "huggingface";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        huggingFaceApiKey?: string | undefined;
        huggingFaceModelId?: string | undefined;
        huggingFaceInferenceProvider?: string | undefined;
    } | {
        apiProvider: "chutes";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        chutesApiKey?: string | undefined;
    } | {
        apiProvider: "litellm";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        litellmBaseUrl?: string | undefined;
        litellmApiKey?: string | undefined;
        litellmModelId?: string | undefined;
        litellmUsePromptCache?: boolean | undefined;
    } | {
        apiProvider: "cerebras";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        cerebrasApiKey?: string | undefined;
    } | {
        apiProvider: "sambanova";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        sambaNovaApiKey?: string | undefined;
    } | {
        apiProvider: "zai";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        zaiApiKey?: string | undefined;
        zaiApiLine?: "china" | "international" | undefined;
    } | {
        apiProvider: "fireworks";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        fireworksApiKey?: string | undefined;
    } | {
        apiProvider: "io-intelligence";
        reasoningEffort?: "low" | "medium" | "high" | "minimal" | undefined;
        includeMaxTokens?: boolean | undefined;
        diffEnabled?: boolean | undefined;
        todoListEnabled?: boolean | undefined;
        fuzzyMatchThreshold?: number | undefined;
        modelTemperature?: number | null | undefined;
        rateLimitSeconds?: number | undefined;
        consecutiveMistakeLimit?: number | undefined;
        enableReasoningEffort?: boolean | undefined;
        modelMaxTokens?: number | undefined;
        modelMaxThinkingTokens?: number | undefined;
        verbosity?: "low" | "medium" | "high" | undefined;
        apiModelId?: string | undefined;
        ioIntelligenceModelId?: string | undefined;
        ioIntelligenceApiKey?: string | undefined;
    }) & {
        id?: string | undefined;
    }> | undefined;
}>;
type OrganizationSettings = z.infer<typeof organizationSettingsSchema>;
/**
 * Constants
 */
declare const ORGANIZATION_ALLOW_ALL: OrganizationAllowList;
declare const ORGANIZATION_DEFAULT: OrganizationSettings;
/**
 * Share Types
 */
declare const shareResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    shareUrl: z.ZodOptional<z.ZodString>;
    error: z.ZodOptional<z.ZodString>;
    isNewShare: z.ZodOptional<z.ZodBoolean>;
    manageUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    error?: string | undefined;
    shareUrl?: string | undefined;
    isNewShare?: boolean | undefined;
    manageUrl?: string | undefined;
}, {
    success: boolean;
    error?: string | undefined;
    shareUrl?: string | undefined;
    isNewShare?: boolean | undefined;
    manageUrl?: string | undefined;
}>;
type ShareResponse = z.infer<typeof shareResponseSchema>;

/**
 * Codebase Index Constants
 */
declare const CODEBASE_INDEX_DEFAULTS: {
    readonly MIN_SEARCH_RESULTS: 10;
    readonly MAX_SEARCH_RESULTS: 200;
    readonly DEFAULT_SEARCH_RESULTS: 50;
    readonly SEARCH_RESULTS_STEP: 10;
    readonly MIN_SEARCH_SCORE: 0;
    readonly MAX_SEARCH_SCORE: 1;
    readonly DEFAULT_SEARCH_MIN_SCORE: 0.4;
    readonly SEARCH_SCORE_STEP: 0.05;
};
/**
 * CodebaseIndexConfig
 */
declare const codebaseIndexConfigSchema: z.ZodObject<{
    codebaseIndexEnabled: z.ZodOptional<z.ZodBoolean>;
    codebaseIndexQdrantUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexEmbedderProvider: z.ZodOptional<z.ZodEnum<["openai", "ollama", "openai-compatible", "gemini", "mistral"]>>;
    codebaseIndexEmbedderBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexEmbedderModelId: z.ZodOptional<z.ZodString>;
    codebaseIndexEmbedderModelDimension: z.ZodOptional<z.ZodNumber>;
    codebaseIndexSearchMinScore: z.ZodOptional<z.ZodNumber>;
    codebaseIndexSearchMaxResults: z.ZodOptional<z.ZodNumber>;
    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    codebaseIndexEnabled?: boolean | undefined;
    codebaseIndexQdrantUrl?: string | undefined;
    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
    codebaseIndexEmbedderBaseUrl?: string | undefined;
    codebaseIndexEmbedderModelId?: string | undefined;
    codebaseIndexEmbedderModelDimension?: number | undefined;
    codebaseIndexSearchMinScore?: number | undefined;
    codebaseIndexSearchMaxResults?: number | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
}, {
    codebaseIndexEnabled?: boolean | undefined;
    codebaseIndexQdrantUrl?: string | undefined;
    codebaseIndexEmbedderProvider?: "openai" | "ollama" | "openai-compatible" | "gemini" | "mistral" | undefined;
    codebaseIndexEmbedderBaseUrl?: string | undefined;
    codebaseIndexEmbedderModelId?: string | undefined;
    codebaseIndexEmbedderModelDimension?: number | undefined;
    codebaseIndexSearchMinScore?: number | undefined;
    codebaseIndexSearchMaxResults?: number | undefined;
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
}>;
type CodebaseIndexConfig = z.infer<typeof codebaseIndexConfigSchema>;
/**
 * CodebaseIndexModels
 */
declare const codebaseIndexModelsSchema: z.ZodObject<{
    openai: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        dimension: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dimension: number;
    }, {
        dimension: number;
    }>>>;
    ollama: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        dimension: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dimension: number;
    }, {
        dimension: number;
    }>>>;
    "openai-compatible": z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        dimension: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dimension: number;
    }, {
        dimension: number;
    }>>>;
    gemini: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        dimension: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dimension: number;
    }, {
        dimension: number;
    }>>>;
    mistral: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        dimension: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        dimension: number;
    }, {
        dimension: number;
    }>>>;
}, "strip", z.ZodTypeAny, {
    openai?: Record<string, {
        dimension: number;
    }> | undefined;
    ollama?: Record<string, {
        dimension: number;
    }> | undefined;
    "openai-compatible"?: Record<string, {
        dimension: number;
    }> | undefined;
    gemini?: Record<string, {
        dimension: number;
    }> | undefined;
    mistral?: Record<string, {
        dimension: number;
    }> | undefined;
}, {
    openai?: Record<string, {
        dimension: number;
    }> | undefined;
    ollama?: Record<string, {
        dimension: number;
    }> | undefined;
    "openai-compatible"?: Record<string, {
        dimension: number;
    }> | undefined;
    gemini?: Record<string, {
        dimension: number;
    }> | undefined;
    mistral?: Record<string, {
        dimension: number;
    }> | undefined;
}>;
type CodebaseIndexModels = z.infer<typeof codebaseIndexModelsSchema>;
/**
 * CdebaseIndexProvider
 */
declare const codebaseIndexProviderSchema: z.ZodObject<{
    codeIndexOpenAiKey: z.ZodOptional<z.ZodString>;
    codeIndexQdrantApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleBaseUrl: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexOpenAiCompatibleModelDimension: z.ZodOptional<z.ZodNumber>;
    codebaseIndexGeminiApiKey: z.ZodOptional<z.ZodString>;
    codebaseIndexMistralApiKey: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
}, {
    codebaseIndexOpenAiCompatibleBaseUrl?: string | undefined;
    codebaseIndexOpenAiCompatibleModelDimension?: number | undefined;
    codeIndexOpenAiKey?: string | undefined;
    codeIndexQdrantApiKey?: string | undefined;
    codebaseIndexOpenAiCompatibleApiKey?: string | undefined;
    codebaseIndexGeminiApiKey?: string | undefined;
    codebaseIndexMistralApiKey?: string | undefined;
}>;
type CodebaseIndexProvider = z.infer<typeof codebaseIndexProviderSchema>;

/**
 * ExperimentId
 */
declare const experimentIds: readonly ["powerSteering", "multiFileApplyDiff", "preventFocusDisruption", "assistantMessageParser"];
declare const experimentIdsSchema: z.ZodEnum<["powerSteering", "multiFileApplyDiff", "preventFocusDisruption", "assistantMessageParser"]>;
type ExperimentId = z.infer<typeof experimentIdsSchema>;
/**
 * Experiments
 */
declare const experimentsSchema: z.ZodObject<{
    powerSteering: z.ZodOptional<z.ZodBoolean>;
    multiFileApplyDiff: z.ZodOptional<z.ZodBoolean>;
    preventFocusDisruption: z.ZodOptional<z.ZodBoolean>;
    assistantMessageParser: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    powerSteering?: boolean | undefined;
    multiFileApplyDiff?: boolean | undefined;
    preventFocusDisruption?: boolean | undefined;
    assistantMessageParser?: boolean | undefined;
}, {
    powerSteering?: boolean | undefined;
    multiFileApplyDiff?: boolean | undefined;
    preventFocusDisruption?: boolean | undefined;
    assistantMessageParser?: boolean | undefined;
}>;
type Experiments = z.infer<typeof experimentsSchema>;

/**
 * Interface for follow-up data structure used in follow-up questions
 * This represents the data structure for follow-up questions that the LLM can ask
 * to gather more information needed to complete a task.
 */
interface FollowUpData {
    /** The question being asked by the LLM */
    question?: string;
    /** Array of suggested answers that the user can select */
    suggest?: Array<SuggestionItem>;
}
/**
 * Interface for a suggestion item with optional mode switching
 */
interface SuggestionItem {
    /** The text of the suggestion */
    answer: string;
    /** Optional mode to switch to when selecting this suggestion */
    mode?: string;
}
/**
 * Zod schema for SuggestionItem
 */
declare const suggestionItemSchema: z.ZodObject<{
    answer: z.ZodString;
    mode: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    answer: string;
    mode?: string | undefined;
}, {
    answer: string;
    mode?: string | undefined;
}>;
/**
 * Zod schema for FollowUpData
 */
declare const followUpDataSchema: z.ZodObject<{
    question: z.ZodOptional<z.ZodString>;
    suggest: z.ZodOptional<z.ZodArray<z.ZodObject<{
        answer: z.ZodString;
        mode: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        answer: string;
        mode?: string | undefined;
    }, {
        answer: string;
        mode?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    question?: string | undefined;
    suggest?: {
        answer: string;
        mode?: string | undefined;
    }[] | undefined;
}, {
    question?: string | undefined;
    suggest?: {
        answer: string;
        mode?: string | undefined;
    }[] | undefined;
}>;
type FollowUpDataType = z.infer<typeof followUpDataSchema>;

/**
 * HistoryItem
 */
declare const historyItemSchema: z.ZodObject<{
    id: z.ZodString;
    number: z.ZodNumber;
    ts: z.ZodNumber;
    task: z.ZodString;
    tokensIn: z.ZodNumber;
    tokensOut: z.ZodNumber;
    cacheWrites: z.ZodOptional<z.ZodNumber>;
    cacheReads: z.ZodOptional<z.ZodNumber>;
    totalCost: z.ZodNumber;
    size: z.ZodOptional<z.ZodNumber>;
    workspace: z.ZodOptional<z.ZodString>;
    mode: z.ZodOptional<z.ZodString>;
    terminalNo: z.ZodOptional<z.ZodNumber>;
    source: z.ZodOptional<z.ZodEnum<["user", "agent"]>>;
    agentId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    number: number;
    id: string;
    task: string;
    ts: number;
    totalCost: number;
    tokensIn: number;
    tokensOut: number;
    mode?: string | undefined;
    agentId?: string | undefined;
    cacheWrites?: number | undefined;
    cacheReads?: number | undefined;
    size?: number | undefined;
    workspace?: string | undefined;
    terminalNo?: number | undefined;
    source?: "agent" | "user" | undefined;
}, {
    number: number;
    id: string;
    task: string;
    ts: number;
    totalCost: number;
    tokensIn: number;
    tokensOut: number;
    mode?: string | undefined;
    agentId?: string | undefined;
    cacheWrites?: number | undefined;
    cacheReads?: number | undefined;
    size?: number | undefined;
    workspace?: string | undefined;
    terminalNo?: number | undefined;
    source?: "agent" | "user" | undefined;
}>;
type HistoryItem = z.infer<typeof historyItemSchema>;

/**
 * Schema for MCP parameter definitions
 */
declare const mcpParameterSchema: z.ZodObject<{
    name: z.ZodString;
    key: z.ZodString;
    placeholder: z.ZodOptional<z.ZodString>;
    optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    key: string;
    optional: boolean;
    placeholder?: string | undefined;
}, {
    name: string;
    key: string;
    placeholder?: string | undefined;
    optional?: boolean | undefined;
}>;
type McpParameter = z.infer<typeof mcpParameterSchema>;
/**
 * Schema for MCP installation method with name
 */
declare const mcpInstallationMethodSchema: z.ZodObject<{
    name: z.ZodString;
    content: z.ZodString;
    parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        key: z.ZodString;
        placeholder: z.ZodOptional<z.ZodString>;
        optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        key: string;
        optional: boolean;
        placeholder?: string | undefined;
    }, {
        name: string;
        key: string;
        placeholder?: string | undefined;
        optional?: boolean | undefined;
    }>, "many">>;
    prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    content: string;
    parameters?: {
        name: string;
        key: string;
        optional: boolean;
        placeholder?: string | undefined;
    }[] | undefined;
    prerequisites?: string[] | undefined;
}, {
    name: string;
    content: string;
    parameters?: {
        name: string;
        key: string;
        placeholder?: string | undefined;
        optional?: boolean | undefined;
    }[] | undefined;
    prerequisites?: string[] | undefined;
}>;
type McpInstallationMethod = z.infer<typeof mcpInstallationMethodSchema>;
/**
 * Component type validation
 */
declare const marketplaceItemTypeSchema: z.ZodEnum<["mode", "mcp"]>;
type MarketplaceItemType = z.infer<typeof marketplaceItemTypeSchema>;
/**
 * Type-specific schemas for YAML parsing (without type field, added programmatically)
 */
declare const modeMarketplaceItemSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    author: z.ZodOptional<z.ZodString>;
    authorUrl: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
} & {
    content: z.ZodString;
}, "strip", z.ZodTypeAny, {
    description: string;
    id: string;
    name: string;
    content: string;
    tags?: string[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}, {
    description: string;
    id: string;
    name: string;
    content: string;
    tags?: string[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}>;
type ModeMarketplaceItem = z.infer<typeof modeMarketplaceItemSchema>;
declare const mcpMarketplaceItemSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    author: z.ZodOptional<z.ZodString>;
    authorUrl: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
} & {
    url: z.ZodString;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        content: z.ZodString;
        parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            key: z.ZodString;
            placeholder: z.ZodOptional<z.ZodString>;
            optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }, {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }>, "many">>;
        prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }, {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }>, "many">]>;
    parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        key: z.ZodString;
        placeholder: z.ZodOptional<z.ZodString>;
        optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        key: string;
        optional: boolean;
        placeholder?: string | undefined;
    }, {
        name: string;
        key: string;
        placeholder?: string | undefined;
        optional?: boolean | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    description: string;
    id: string;
    name: string;
    url: string;
    content: string | {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }[];
    tags?: string[] | undefined;
    parameters?: {
        name: string;
        key: string;
        optional: boolean;
        placeholder?: string | undefined;
    }[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}, {
    description: string;
    id: string;
    name: string;
    url: string;
    content: string | {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }[];
    tags?: string[] | undefined;
    parameters?: {
        name: string;
        key: string;
        placeholder?: string | undefined;
        optional?: boolean | undefined;
    }[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}>;
type McpMarketplaceItem = z.infer<typeof mcpMarketplaceItemSchema>;
/**
 * Unified marketplace item schema using discriminated union
 */
declare const marketplaceItemSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    author: z.ZodOptional<z.ZodString>;
    authorUrl: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
} & {
    content: z.ZodString;
} & {
    type: z.ZodLiteral<"mode">;
}, "strip", z.ZodTypeAny, {
    type: "mode";
    description: string;
    id: string;
    name: string;
    content: string;
    tags?: string[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}, {
    type: "mode";
    description: string;
    id: string;
    name: string;
    content: string;
    tags?: string[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    author: z.ZodOptional<z.ZodString>;
    authorUrl: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
} & {
    url: z.ZodString;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        content: z.ZodString;
        parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            key: z.ZodString;
            placeholder: z.ZodOptional<z.ZodString>;
            optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }, {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }>, "many">>;
        prerequisites: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }, {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }>, "many">]>;
    parameters: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        key: z.ZodString;
        placeholder: z.ZodOptional<z.ZodString>;
        optional: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        key: string;
        optional: boolean;
        placeholder?: string | undefined;
    }, {
        name: string;
        key: string;
        placeholder?: string | undefined;
        optional?: boolean | undefined;
    }>, "many">>;
} & {
    type: z.ZodLiteral<"mcp">;
}, "strip", z.ZodTypeAny, {
    type: "mcp";
    description: string;
    id: string;
    name: string;
    url: string;
    content: string | {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            optional: boolean;
            placeholder?: string | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }[];
    tags?: string[] | undefined;
    parameters?: {
        name: string;
        key: string;
        optional: boolean;
        placeholder?: string | undefined;
    }[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}, {
    type: "mcp";
    description: string;
    id: string;
    name: string;
    url: string;
    content: string | {
        name: string;
        content: string;
        parameters?: {
            name: string;
            key: string;
            placeholder?: string | undefined;
            optional?: boolean | undefined;
        }[] | undefined;
        prerequisites?: string[] | undefined;
    }[];
    tags?: string[] | undefined;
    parameters?: {
        name: string;
        key: string;
        placeholder?: string | undefined;
        optional?: boolean | undefined;
    }[] | undefined;
    prerequisites?: string[] | undefined;
    author?: string | undefined;
    authorUrl?: string | undefined;
}>]>;
type MarketplaceItem = z.infer<typeof marketplaceItemSchema>;
/**
 * Installation options for marketplace items
 */
declare const installMarketplaceItemOptionsSchema: z.ZodObject<{
    target: z.ZodDefault<z.ZodOptional<z.ZodEnum<["global", "project"]>>>;
    parameters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    target: "global" | "project";
    parameters?: Record<string, any> | undefined;
}, {
    parameters?: Record<string, any> | undefined;
    target?: "global" | "project" | undefined;
}>;
type InstallMarketplaceItemOptions = z.infer<typeof installMarketplaceItemOptionsSchema>;

/**
 * McpExecutionStatus
 */
declare const mcpExecutionStatusSchema: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"started">;
    serverName: z.ZodString;
    toolName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "started";
    executionId: string;
    serverName: string;
    toolName: string;
}, {
    status: "started";
    executionId: string;
    serverName: string;
    toolName: string;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"output">;
    response: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "output";
    executionId: string;
    response: string;
}, {
    status: "output";
    executionId: string;
    response: string;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"completed">;
    response: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: "completed";
    executionId: string;
    response?: string | undefined;
}, {
    status: "completed";
    executionId: string;
    response?: string | undefined;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"error">;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: "error";
    executionId: string;
    error?: string | undefined;
}, {
    status: "error";
    executionId: string;
    error?: string | undefined;
}>]>;
type McpExecutionStatus = z.infer<typeof mcpExecutionStatusSchema>;

/**
 * ClineAsk
 */
/**
 * Array of possible ask types that the LLM can use to request user interaction or approval.
 * These represent different scenarios where the assistant needs user input to proceed.
 *
 * @constant
 * @readonly
 *
 * Ask type descriptions:
 * - `followup`: LLM asks a clarifying question to gather more information needed to complete the task
 * - `command`: Permission to execute a terminal/shell command
 * - `command_output`: Permission to read the output from a previously executed command
 * - `completion_result`: Task has been completed, awaiting user feedback or a new task
 * - `tool`: Permission to use a tool for file operations (read, write, search, etc.)
 * - `api_req_failed`: API request failed, asking user whether to retry
 * - `resume_task`: Confirmation needed to resume a previously paused task
 * - `resume_completed_task`: Confirmation needed to resume a task that was already marked as completed
 * - `mistake_limit_reached`: Too many errors encountered, needs user guidance on how to proceed
 * - `browser_action_launch`: Permission to open or interact with a browser
 * - `use_mcp_server`: Permission to use Model Context Protocol (MCP) server functionality
 * - `auto_approval_max_req_reached`: Auto-approval limit has been reached, manual approval required
 */
declare const clineAsks: readonly ["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"];
declare const clineAskSchema: z.ZodEnum<["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"]>;
type ClineAsk = z.infer<typeof clineAskSchema>;
/**
 * BlockingAsk
 */
declare const blockingAsks: ClineAsk[];
type BlockingAsk = (typeof blockingAsks)[number];
declare function isBlockingAsk(ask: ClineAsk): ask is BlockingAsk;
/**
 * ClineSay
 */
/**
 * Array of possible say types that represent different kinds of messages the assistant can send.
 * These are used to categorize and handle various types of communication from the LLM to the user.
 *
 * @constant
 * @readonly
 *
 * Say type descriptions:
 * - `error`: General error message
 * - `api_req_started`: Indicates an API request has been initiated
 * - `api_req_finished`: Indicates an API request has completed successfully
 * - `api_req_retried`: Indicates an API request is being retried after a failure
 * - `api_req_retry_delayed`: Indicates an API request retry has been delayed
 * - `api_req_deleted`: Indicates an API request has been deleted/cancelled
 * - `text`: General text message or assistant response
 * - `reasoning`: Assistant's reasoning or thought process (often hidden from user)
 * - `completion_result`: Final result of task completion
 * - `user_feedback`: Message containing user feedback
 * - `user_feedback_diff`: Diff-formatted feedback from user showing requested changes
 * - `command_output`: Output from an executed command
 * - `shell_integration_warning`: Warning about shell integration issues or limitations
 * - `browser_action`: Action performed in the browser
 * - `browser_action_result`: Result of a browser action
 * - `mcp_server_request_started`: MCP server request has been initiated
 * - `mcp_server_response`: Response received from MCP server
 * - `subtask_result`: Result of a completed subtask
 * - `checkpoint_saved`: Indicates a checkpoint has been saved
 * - `rooignore_error`: Error related to .rooignore file processing
 * - `diff_error`: Error occurred while applying a diff/patch
 * - `condense_context`: Context condensation/summarization has started
 * - `condense_context_error`: Error occurred during context condensation
 * - `codebase_search_result`: Results from searching the codebase
 */
declare const clineSays: readonly ["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"];
declare const clineSaySchema: z.ZodEnum<["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"]>;
type ClineSay = z.infer<typeof clineSaySchema>;
/**
 * ToolProgressStatus
 */
declare const toolProgressStatusSchema: z.ZodObject<{
    icon: z.ZodOptional<z.ZodString>;
    text: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    text?: string | undefined;
    icon?: string | undefined;
}, {
    text?: string | undefined;
    icon?: string | undefined;
}>;
type ToolProgressStatus = z.infer<typeof toolProgressStatusSchema>;
/**
 * ContextCondense
 */
declare const contextCondenseSchema: z.ZodObject<{
    cost: z.ZodNumber;
    prevContextTokens: z.ZodNumber;
    newContextTokens: z.ZodNumber;
    summary: z.ZodString;
}, "strip", z.ZodTypeAny, {
    cost: number;
    prevContextTokens: number;
    newContextTokens: number;
    summary: string;
}, {
    cost: number;
    prevContextTokens: number;
    newContextTokens: number;
    summary: string;
}>;
type ContextCondense = z.infer<typeof contextCondenseSchema>;
/**
 * ClineMessage
 */
declare const clineMessageSchema: z.ZodObject<{
    ts: z.ZodNumber;
    type: z.ZodUnion<[z.ZodLiteral<"ask">, z.ZodLiteral<"say">]>;
    ask: z.ZodOptional<z.ZodEnum<["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"]>>;
    say: z.ZodOptional<z.ZodEnum<["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"]>>;
    text: z.ZodOptional<z.ZodString>;
    images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    partial: z.ZodOptional<z.ZodBoolean>;
    reasoning: z.ZodOptional<z.ZodString>;
    conversationHistoryIndex: z.ZodOptional<z.ZodNumber>;
    checkpoint: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    progressStatus: z.ZodOptional<z.ZodObject<{
        icon: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        text?: string | undefined;
        icon?: string | undefined;
    }, {
        text?: string | undefined;
        icon?: string | undefined;
    }>>;
    contextCondense: z.ZodOptional<z.ZodObject<{
        cost: z.ZodNumber;
        prevContextTokens: z.ZodNumber;
        newContextTokens: z.ZodNumber;
        summary: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cost: number;
        prevContextTokens: number;
        newContextTokens: number;
        summary: string;
    }, {
        cost: number;
        prevContextTokens: number;
        newContextTokens: number;
        summary: string;
    }>>;
    isProtected: z.ZodOptional<z.ZodBoolean>;
    apiProtocol: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"openai">, z.ZodLiteral<"anthropic">]>>;
    metadata: z.ZodOptional<z.ZodObject<{
        gpt5: z.ZodOptional<z.ZodObject<{
            previous_response_id: z.ZodOptional<z.ZodString>;
            instructions: z.ZodOptional<z.ZodString>;
            reasoning_summary: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            previous_response_id?: string | undefined;
            instructions?: string | undefined;
            reasoning_summary?: string | undefined;
        }, {
            previous_response_id?: string | undefined;
            instructions?: string | undefined;
            reasoning_summary?: string | undefined;
        }>>;
        taskId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        taskId?: string | undefined;
        gpt5?: {
            previous_response_id?: string | undefined;
            instructions?: string | undefined;
            reasoning_summary?: string | undefined;
        } | undefined;
    }, {
        taskId?: string | undefined;
        gpt5?: {
            previous_response_id?: string | undefined;
            instructions?: string | undefined;
            reasoning_summary?: string | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "ask" | "say";
    ts: number;
    reasoning?: string | undefined;
    partial?: boolean | undefined;
    metadata?: {
        taskId?: string | undefined;
        gpt5?: {
            previous_response_id?: string | undefined;
            instructions?: string | undefined;
            reasoning_summary?: string | undefined;
        } | undefined;
    } | undefined;
    text?: string | undefined;
    ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
    say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
    images?: string[] | undefined;
    conversationHistoryIndex?: number | undefined;
    checkpoint?: Record<string, unknown> | undefined;
    progressStatus?: {
        text?: string | undefined;
        icon?: string | undefined;
    } | undefined;
    contextCondense?: {
        cost: number;
        prevContextTokens: number;
        newContextTokens: number;
        summary: string;
    } | undefined;
    isProtected?: boolean | undefined;
    apiProtocol?: "openai" | "anthropic" | undefined;
}, {
    type: "ask" | "say";
    ts: number;
    reasoning?: string | undefined;
    partial?: boolean | undefined;
    metadata?: {
        taskId?: string | undefined;
        gpt5?: {
            previous_response_id?: string | undefined;
            instructions?: string | undefined;
            reasoning_summary?: string | undefined;
        } | undefined;
    } | undefined;
    text?: string | undefined;
    ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
    say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
    images?: string[] | undefined;
    conversationHistoryIndex?: number | undefined;
    checkpoint?: Record<string, unknown> | undefined;
    progressStatus?: {
        text?: string | undefined;
        icon?: string | undefined;
    } | undefined;
    contextCondense?: {
        cost: number;
        prevContextTokens: number;
        newContextTokens: number;
        summary: string;
    } | undefined;
    isProtected?: boolean | undefined;
    apiProtocol?: "openai" | "anthropic" | undefined;
}>;
type ClineMessage = z.infer<typeof clineMessageSchema>;
/**
 * TokenUsage
 */
declare const tokenUsageSchema: z.ZodObject<{
    totalTokensIn: z.ZodNumber;
    totalTokensOut: z.ZodNumber;
    totalCacheWrites: z.ZodOptional<z.ZodNumber>;
    totalCacheReads: z.ZodOptional<z.ZodNumber>;
    totalCost: z.ZodNumber;
    contextTokens: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    totalTokensIn: number;
    totalTokensOut: number;
    totalCost: number;
    contextTokens: number;
    totalCacheWrites?: number | undefined;
    totalCacheReads?: number | undefined;
}, {
    totalTokensIn: number;
    totalTokensOut: number;
    totalCost: number;
    contextTokens: number;
    totalCacheWrites?: number | undefined;
    totalCacheReads?: number | undefined;
}>;
type TokenUsage = z.infer<typeof tokenUsageSchema>;
/**
 * QueuedMessage
 */
/**
 * Represents a message that is queued to be sent when sending is enabled
 */
interface QueuedMessage {
    /** Unique identifier for the queued message */
    id: string;
    /** The text content of the message */
    text: string;
    /** Array of image data URLs attached to the message */
    images: string[];
}

/**
 * GroupOptions
 */
declare const groupOptionsSchema: z.ZodObject<{
    fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    fileRegex?: string | undefined;
}, {
    description?: string | undefined;
    fileRegex?: string | undefined;
}>;
type GroupOptions = z.infer<typeof groupOptionsSchema>;
/**
 * GroupEntry
 */
declare const groupEntrySchema: z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
    fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    fileRegex?: string | undefined;
}, {
    description?: string | undefined;
    fileRegex?: string | undefined;
}>], null>]>;
type GroupEntry = z.infer<typeof groupEntrySchema>;
declare const modeConfigSchema: z.ZodObject<{
    slug: z.ZodString;
    name: z.ZodString;
    roleDefinition: z.ZodString;
    whenToUse: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    customInstructions: z.ZodOptional<z.ZodString>;
    groups: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
        fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
        description: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        description?: string | undefined;
        fileRegex?: string | undefined;
    }, {
        description?: string | undefined;
        fileRegex?: string | undefined;
    }>], null>]>, "many">, ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
        description?: string | undefined;
        fileRegex?: string | undefined;
    }])[], ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
        description?: string | undefined;
        fileRegex?: string | undefined;
    }])[]>;
    source: z.ZodOptional<z.ZodEnum<["global", "project"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
        description?: string | undefined;
        fileRegex?: string | undefined;
    }])[];
    slug: string;
    roleDefinition: string;
    description?: string | undefined;
    source?: "global" | "project" | undefined;
    whenToUse?: string | undefined;
    customInstructions?: string | undefined;
}, {
    name: string;
    groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
        description?: string | undefined;
        fileRegex?: string | undefined;
    }])[];
    slug: string;
    roleDefinition: string;
    description?: string | undefined;
    source?: "global" | "project" | undefined;
    whenToUse?: string | undefined;
    customInstructions?: string | undefined;
}>;
type ModeConfig = z.infer<typeof modeConfigSchema>;
/**
 * CustomModesSettings
 */
declare const customModesSettingsSchema: z.ZodObject<{
    customModes: z.ZodEffects<z.ZodArray<z.ZodObject<{
        slug: z.ZodString;
        name: z.ZodString;
        roleDefinition: z.ZodString;
        whenToUse: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        customInstructions: z.ZodOptional<z.ZodString>;
        groups: z.ZodEffects<z.ZodArray<z.ZodUnion<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodTuple<[z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>, z.ZodObject<{
            fileRegex: z.ZodEffects<z.ZodOptional<z.ZodString>, string | undefined, string | undefined>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }, {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }>], null>]>, "many">, ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[], ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[]>;
        source: z.ZodOptional<z.ZodEnum<["global", "project"]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }>, "many">, {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[], {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[]>;
}, "strip", z.ZodTypeAny, {
    customModes: {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[];
}, {
    customModes: {
        name: string;
        groups: ("read" | "command" | "edit" | "browser" | "mcp" | "modes" | ["read" | "command" | "edit" | "browser" | "mcp" | "modes", {
            description?: string | undefined;
            fileRegex?: string | undefined;
        }])[];
        slug: string;
        roleDefinition: string;
        description?: string | undefined;
        source?: "global" | "project" | undefined;
        whenToUse?: string | undefined;
        customInstructions?: string | undefined;
    }[];
}>;
type CustomModesSettings = z.infer<typeof customModesSettingsSchema>;
/**
 * PromptComponent
 */
declare const promptComponentSchema: z.ZodObject<{
    roleDefinition: z.ZodOptional<z.ZodString>;
    whenToUse: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    customInstructions: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    roleDefinition?: string | undefined;
    whenToUse?: string | undefined;
    customInstructions?: string | undefined;
}, {
    description?: string | undefined;
    roleDefinition?: string | undefined;
    whenToUse?: string | undefined;
    customInstructions?: string | undefined;
}>;
type PromptComponent = z.infer<typeof promptComponentSchema>;
/**
 * CustomModePrompts
 */
declare const customModePromptsSchema: z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodObject<{
    roleDefinition: z.ZodOptional<z.ZodString>;
    whenToUse: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    customInstructions: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    roleDefinition?: string | undefined;
    whenToUse?: string | undefined;
    customInstructions?: string | undefined;
}, {
    description?: string | undefined;
    roleDefinition?: string | undefined;
    whenToUse?: string | undefined;
    customInstructions?: string | undefined;
}>>>;
type CustomModePrompts = z.infer<typeof customModePromptsSchema>;
/**
 * CustomSupportPrompts
 */
declare const customSupportPromptsSchema: z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodString>>;
type CustomSupportPrompts = z.infer<typeof customSupportPromptsSchema>;
/**
 * DEFAULT_MODES
 */
declare const DEFAULT_MODES: readonly ModeConfig[];

/**
 * ReasoningEffort
 */
declare const reasoningEfforts: readonly ["low", "medium", "high"];
declare const reasoningEffortsSchema: z.ZodEnum<["low", "medium", "high"]>;
type ReasoningEffort = z.infer<typeof reasoningEffortsSchema>;
/**
 * Verbosity
 */
declare const verbosityLevels: readonly ["low", "medium", "high"];
declare const verbosityLevelsSchema: z.ZodEnum<["low", "medium", "high"]>;
type VerbosityLevel = z.infer<typeof verbosityLevelsSchema>;
/**
 * ModelParameter
 */
declare const modelParameters: readonly ["max_tokens", "temperature", "reasoning", "include_reasoning"];
declare const modelParametersSchema: z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>;
type ModelParameter = z.infer<typeof modelParametersSchema>;
declare const isModelParameter: (value: string) => value is ModelParameter;
/**
 * ModelInfo
 */
declare const modelInfoSchema: z.ZodObject<{
    maxTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    maxThinkingTokens: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    contextWindow: z.ZodNumber;
    supportsImages: z.ZodOptional<z.ZodBoolean>;
    supportsComputerUse: z.ZodOptional<z.ZodBoolean>;
    supportsPromptCache: z.ZodBoolean;
    supportsVerbosity: z.ZodOptional<z.ZodBoolean>;
    supportsReasoningBudget: z.ZodOptional<z.ZodBoolean>;
    requiredReasoningBudget: z.ZodOptional<z.ZodBoolean>;
    supportsReasoningEffort: z.ZodOptional<z.ZodBoolean>;
    supportedParameters: z.ZodOptional<z.ZodArray<z.ZodEnum<["max_tokens", "temperature", "reasoning", "include_reasoning"]>, "many">>;
    inputPrice: z.ZodOptional<z.ZodNumber>;
    outputPrice: z.ZodOptional<z.ZodNumber>;
    cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
    cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
    description: z.ZodOptional<z.ZodString>;
    modelType: z.ZodOptional<z.ZodString>;
    reasoningEffort: z.ZodOptional<z.ZodEnum<["low", "medium", "high"]>>;
    minTokensPerCachePoint: z.ZodOptional<z.ZodNumber>;
    maxCachePoints: z.ZodOptional<z.ZodNumber>;
    cachableFields: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tiers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        contextWindow: z.ZodNumber;
        inputPrice: z.ZodOptional<z.ZodNumber>;
        outputPrice: z.ZodOptional<z.ZodNumber>;
        cacheWritesPrice: z.ZodOptional<z.ZodNumber>;
        cacheReadsPrice: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        contextWindow: number;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
    }, {
        contextWindow: number;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    contextWindow: number;
    supportsPromptCache: boolean;
    maxTokens?: number | null | undefined;
    maxThinkingTokens?: number | null | undefined;
    supportsImages?: boolean | undefined;
    supportsComputerUse?: boolean | undefined;
    supportsVerbosity?: boolean | undefined;
    supportsReasoningBudget?: boolean | undefined;
    requiredReasoningBudget?: boolean | undefined;
    supportsReasoningEffort?: boolean | undefined;
    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
    inputPrice?: number | undefined;
    outputPrice?: number | undefined;
    cacheWritesPrice?: number | undefined;
    cacheReadsPrice?: number | undefined;
    description?: string | undefined;
    modelType?: string | undefined;
    reasoningEffort?: "low" | "medium" | "high" | undefined;
    minTokensPerCachePoint?: number | undefined;
    maxCachePoints?: number | undefined;
    cachableFields?: string[] | undefined;
    tiers?: {
        contextWindow: number;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
    }[] | undefined;
}, {
    contextWindow: number;
    supportsPromptCache: boolean;
    maxTokens?: number | null | undefined;
    maxThinkingTokens?: number | null | undefined;
    supportsImages?: boolean | undefined;
    supportsComputerUse?: boolean | undefined;
    supportsVerbosity?: boolean | undefined;
    supportsReasoningBudget?: boolean | undefined;
    requiredReasoningBudget?: boolean | undefined;
    supportsReasoningEffort?: boolean | undefined;
    supportedParameters?: ("max_tokens" | "temperature" | "reasoning" | "include_reasoning")[] | undefined;
    inputPrice?: number | undefined;
    outputPrice?: number | undefined;
    cacheWritesPrice?: number | undefined;
    cacheReadsPrice?: number | undefined;
    description?: string | undefined;
    modelType?: string | undefined;
    reasoningEffort?: "low" | "medium" | "high" | undefined;
    minTokensPerCachePoint?: number | undefined;
    maxCachePoints?: number | undefined;
    cachableFields?: string[] | undefined;
    tiers?: {
        contextWindow: number;
        inputPrice?: number | undefined;
        outputPrice?: number | undefined;
        cacheWritesPrice?: number | undefined;
        cacheReadsPrice?: number | undefined;
    }[] | undefined;
}>;
type ModelInfo = z.infer<typeof modelInfoSchema>;

/**
 * Types related to task sharing functionality
 */
/**
 * Visibility options for sharing tasks
 */
type ShareVisibility = "organization" | "public";

/**
 * ToolGroup
 */
declare const toolGroups: readonly ["read", "edit", "browser", "command", "mcp", "modes"];
declare const toolGroupsSchema: z.ZodEnum<["read", "edit", "browser", "command", "mcp", "modes"]>;
type ToolGroup = z.infer<typeof toolGroupsSchema>;
/**
 * ToolName
 */
declare const toolNames: readonly ["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"];
declare const toolNamesSchema: z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>;
type ToolName = z.infer<typeof toolNamesSchema>;
/**
 * ToolUsage
 */
declare const toolUsageSchema: z.ZodRecord<z.ZodEnum<["execute_command", "read_file", "write_to_file", "apply_diff", "insert_content", "search_and_replace", "search_files", "list_files", "list_code_definition_names", "browser_action", "use_mcp_tool", "access_mcp_resource", "ask_followup_question", "attempt_completion", "switch_mode", "new_task", "fetch_instructions", "codebase_search", "update_todo_list"]>, z.ZodObject<{
    attempts: z.ZodNumber;
    failures: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    attempts: number;
    failures: number;
}, {
    attempts: number;
    failures: number;
}>>;
type ToolUsage = z.infer<typeof toolUsageSchema>;

/**
 * TaskProviderLike
 */
interface TaskProviderState {
    mode?: string;
}
interface TaskProviderLike {
    readonly cwd: string;
    getCurrentCline(): TaskLike | undefined;
    getCurrentTaskStack(): string[];
    initClineWithTask(text?: string, images?: string[], parentTask?: TaskLike): Promise<TaskLike>;
    cancelTask(): Promise<void>;
    clearTask(): Promise<void>;
    postStateToWebview(): Promise<void>;
    getState(): Promise<TaskProviderState>;
    postMessageToWebview(message: unknown): Promise<void>;
    on<K extends keyof TaskProviderEvents>(event: K, listener: (...args: TaskProviderEvents[K]) => void | Promise<void>): this;
    off<K extends keyof TaskProviderEvents>(event: K, listener: (...args: TaskProviderEvents[K]) => void | Promise<void>): this;
    context: {
        extension?: {
            packageJSON?: {
                version?: string;
            };
        };
    };
}
type TaskProviderEvents = {
    [RooCodeEventName.TaskCreated]: [task: TaskLike];
    [RooCodeEventName.TaskStarted]: [taskId: string];
    [RooCodeEventName.TaskCompleted]: [taskId: string, tokenUsage: TokenUsage, toolUsage: ToolUsage];
    [RooCodeEventName.TaskAborted]: [taskId: string];
    [RooCodeEventName.TaskFocused]: [taskId: string];
    [RooCodeEventName.TaskUnfocused]: [taskId: string];
    [RooCodeEventName.TaskActive]: [taskId: string];
    [RooCodeEventName.TaskIdle]: [taskId: string];
};
/**
 * TaskLike
 */
interface TaskLike {
    readonly taskId: string;
    readonly rootTask?: TaskLike;
    readonly blockingAsk?: BlockingAsk;
    on<K extends keyof TaskEvents>(event: K, listener: (...args: TaskEvents[K]) => void | Promise<void>): this;
    off<K extends keyof TaskEvents>(event: K, listener: (...args: TaskEvents[K]) => void | Promise<void>): this;
    setMessageResponse(text: string, images?: string[]): void;
    submitUserMessage(text: string, images?: string[]): void;
}
type TaskEvents = {
    [RooCodeEventName.TaskStarted]: [];
    [RooCodeEventName.TaskCompleted]: [taskId: string, tokenUsage: TokenUsage, toolUsage: ToolUsage];
    [RooCodeEventName.TaskAborted]: [];
    [RooCodeEventName.TaskFocused]: [];
    [RooCodeEventName.TaskUnfocused]: [];
    [RooCodeEventName.TaskActive]: [taskId: string];
    [RooCodeEventName.TaskIdle]: [taskId: string];
    [RooCodeEventName.TaskPaused]: [];
    [RooCodeEventName.TaskUnpaused]: [];
    [RooCodeEventName.TaskSpawned]: [taskId: string];
    [RooCodeEventName.Message]: [{
        action: "created" | "updated";
        message: ClineMessage;
    }];
    [RooCodeEventName.TaskModeSwitched]: [taskId: string, mode: string];
    [RooCodeEventName.TaskAskResponded]: [];
    [RooCodeEventName.TaskToolFailed]: [taskId: string, tool: ToolName, error: string];
    [RooCodeEventName.TaskTokenUsageUpdated]: [taskId: string, tokenUsage: TokenUsage];
};

/**
 * TodoStatus
 */
declare const todoStatusSchema: z.ZodEnum<["pending", "in_progress", "completed"]>;
type TodoStatus = z.infer<typeof todoStatusSchema>;
/**
 * TodoItem
 */
declare const todoItemSchema: z.ZodObject<{
    id: z.ZodString;
    content: z.ZodString;
    status: z.ZodEnum<["pending", "in_progress", "completed"]>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "in_progress" | "completed";
    id: string;
    content: string;
}, {
    status: "pending" | "in_progress" | "completed";
    id: string;
    content: string;
}>;
type TodoItem = z.infer<typeof todoItemSchema>;

/**
 * TelemetrySetting
 */
declare const telemetrySettings: readonly ["unset", "enabled", "disabled"];
declare const telemetrySettingsSchema: z.ZodEnum<["unset", "enabled", "disabled"]>;
type TelemetrySetting = z.infer<typeof telemetrySettingsSchema>;
/**
 * TelemetryEventName
 */
declare enum TelemetryEventName {
    TASK_CREATED = "Task Created",
    TASK_RESTARTED = "Task Reopened",
    TASK_COMPLETED = "Task Completed",
    TASK_MESSAGE = "Task Message",
    TASK_CONVERSATION_MESSAGE = "Conversation Message",
    LLM_COMPLETION = "LLM Completion",
    MODE_SWITCH = "Mode Switched",
    MODE_SELECTOR_OPENED = "Mode Selector Opened",
    TOOL_USED = "Tool Used",
    CHECKPOINT_CREATED = "Checkpoint Created",
    CHECKPOINT_RESTORED = "Checkpoint Restored",
    CHECKPOINT_DIFFED = "Checkpoint Diffed",
    TAB_SHOWN = "Tab Shown",
    MODE_SETTINGS_CHANGED = "Mode Setting Changed",
    CUSTOM_MODE_CREATED = "Custom Mode Created",
    CONTEXT_CONDENSED = "Context Condensed",
    SLIDING_WINDOW_TRUNCATION = "Sliding Window Truncation",
    CODE_ACTION_USED = "Code Action Used",
    PROMPT_ENHANCED = "Prompt Enhanced",
    TITLE_BUTTON_CLICKED = "Title Button Clicked",
    AUTHENTICATION_INITIATED = "Authentication Initiated",
    MARKETPLACE_ITEM_INSTALLED = "Marketplace Item Installed",
    MARKETPLACE_ITEM_REMOVED = "Marketplace Item Removed",
    MARKETPLACE_TAB_VIEWED = "Marketplace Tab Viewed",
    MARKETPLACE_INSTALL_BUTTON_CLICKED = "Marketplace Install Button Clicked",
    SHARE_BUTTON_CLICKED = "Share Button Clicked",
    SHARE_ORGANIZATION_CLICKED = "Share Organization Clicked",
    SHARE_PUBLIC_CLICKED = "Share Public Clicked",
    SHARE_CONNECT_TO_CLOUD_CLICKED = "Share Connect To Cloud Clicked",
    ACCOUNT_CONNECT_CLICKED = "Account Connect Clicked",
    ACCOUNT_CONNECT_SUCCESS = "Account Connect Success",
    ACCOUNT_LOGOUT_CLICKED = "Account Logout Clicked",
    ACCOUNT_LOGOUT_SUCCESS = "Account Logout Success",
    SCHEMA_VALIDATION_ERROR = "Schema Validation Error",
    DIFF_APPLICATION_ERROR = "Diff Application Error",
    SHELL_INTEGRATION_ERROR = "Shell Integration Error",
    CONSECUTIVE_MISTAKE_ERROR = "Consecutive Mistake Error",
    CODE_INDEX_ERROR = "Code Index Error"
}
/**
 * TelemetryProperties
 */
declare const appPropertiesSchema: z.ZodObject<{
    appName: z.ZodString;
    appVersion: z.ZodString;
    vscodeVersion: z.ZodString;
    platform: z.ZodString;
    editorName: z.ZodString;
    language: z.ZodString;
    mode: z.ZodString;
    cloudIsAuthenticated: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    platform: string;
    mode: string;
    appName: string;
    appVersion: string;
    vscodeVersion: string;
    editorName: string;
    language: string;
    cloudIsAuthenticated?: boolean | undefined;
}, {
    platform: string;
    mode: string;
    appName: string;
    appVersion: string;
    vscodeVersion: string;
    editorName: string;
    language: string;
    cloudIsAuthenticated?: boolean | undefined;
}>;
declare const taskPropertiesSchema: z.ZodObject<{
    taskId: z.ZodOptional<z.ZodString>;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
    modelId: z.ZodOptional<z.ZodString>;
    diffStrategy: z.ZodOptional<z.ZodString>;
    isSubtask: z.ZodOptional<z.ZodBoolean>;
    todos: z.ZodOptional<z.ZodObject<{
        total: z.ZodNumber;
        completed: z.ZodNumber;
        inProgress: z.ZodNumber;
        pending: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    }, {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    modelId?: string | undefined;
    taskId?: string | undefined;
    todos?: {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    } | undefined;
    isSubtask?: boolean | undefined;
    diffStrategy?: string | undefined;
}, {
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    modelId?: string | undefined;
    taskId?: string | undefined;
    todos?: {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    } | undefined;
    isSubtask?: boolean | undefined;
    diffStrategy?: string | undefined;
}>;
declare const gitPropertiesSchema: z.ZodObject<{
    repositoryUrl: z.ZodOptional<z.ZodString>;
    repositoryName: z.ZodOptional<z.ZodString>;
    defaultBranch: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    repositoryUrl?: string | undefined;
    repositoryName?: string | undefined;
    defaultBranch?: string | undefined;
}, {
    repositoryUrl?: string | undefined;
    repositoryName?: string | undefined;
    defaultBranch?: string | undefined;
}>;
declare const telemetryPropertiesSchema: z.ZodObject<{
    repositoryUrl: z.ZodOptional<z.ZodString>;
    repositoryName: z.ZodOptional<z.ZodString>;
    defaultBranch: z.ZodOptional<z.ZodString>;
    taskId: z.ZodOptional<z.ZodString>;
    apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
    modelId: z.ZodOptional<z.ZodString>;
    diffStrategy: z.ZodOptional<z.ZodString>;
    isSubtask: z.ZodOptional<z.ZodBoolean>;
    todos: z.ZodOptional<z.ZodObject<{
        total: z.ZodNumber;
        completed: z.ZodNumber;
        inProgress: z.ZodNumber;
        pending: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    }, {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    }>>;
    appName: z.ZodString;
    appVersion: z.ZodString;
    vscodeVersion: z.ZodString;
    platform: z.ZodString;
    editorName: z.ZodString;
    language: z.ZodString;
    mode: z.ZodString;
    cloudIsAuthenticated: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    platform: string;
    mode: string;
    appName: string;
    appVersion: string;
    vscodeVersion: string;
    editorName: string;
    language: string;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    modelId?: string | undefined;
    taskId?: string | undefined;
    todos?: {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    } | undefined;
    isSubtask?: boolean | undefined;
    cloudIsAuthenticated?: boolean | undefined;
    diffStrategy?: string | undefined;
    repositoryUrl?: string | undefined;
    repositoryName?: string | undefined;
    defaultBranch?: string | undefined;
}, {
    platform: string;
    mode: string;
    appName: string;
    appVersion: string;
    vscodeVersion: string;
    editorName: string;
    language: string;
    apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
    modelId?: string | undefined;
    taskId?: string | undefined;
    todos?: {
        pending: number;
        completed: number;
        total: number;
        inProgress: number;
    } | undefined;
    isSubtask?: boolean | undefined;
    cloudIsAuthenticated?: boolean | undefined;
    diffStrategy?: string | undefined;
    repositoryUrl?: string | undefined;
    repositoryName?: string | undefined;
    defaultBranch?: string | undefined;
}>;
type TelemetryProperties = z.infer<typeof telemetryPropertiesSchema>;
type GitProperties = z.infer<typeof gitPropertiesSchema>;
/**
 * TelemetryEvent
 */
type TelemetryEvent = {
    event: TelemetryEventName;
    properties?: Record<string, any>;
};
/**
 * RooCodeTelemetryEvent
 */
declare const rooCodeTelemetryEventSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodEnum<[TelemetryEventName.TASK_CREATED, TelemetryEventName.TASK_RESTARTED, TelemetryEventName.TASK_COMPLETED, TelemetryEventName.TASK_CONVERSATION_MESSAGE, TelemetryEventName.MODE_SWITCH, TelemetryEventName.MODE_SELECTOR_OPENED, TelemetryEventName.TOOL_USED, TelemetryEventName.CHECKPOINT_CREATED, TelemetryEventName.CHECKPOINT_RESTORED, TelemetryEventName.CHECKPOINT_DIFFED, TelemetryEventName.CODE_ACTION_USED, TelemetryEventName.PROMPT_ENHANCED, TelemetryEventName.TITLE_BUTTON_CLICKED, TelemetryEventName.AUTHENTICATION_INITIATED, TelemetryEventName.MARKETPLACE_ITEM_INSTALLED, TelemetryEventName.MARKETPLACE_ITEM_REMOVED, TelemetryEventName.MARKETPLACE_TAB_VIEWED, TelemetryEventName.MARKETPLACE_INSTALL_BUTTON_CLICKED, TelemetryEventName.SHARE_BUTTON_CLICKED, TelemetryEventName.SHARE_ORGANIZATION_CLICKED, TelemetryEventName.SHARE_PUBLIC_CLICKED, TelemetryEventName.SHARE_CONNECT_TO_CLOUD_CLICKED, TelemetryEventName.ACCOUNT_CONNECT_CLICKED, TelemetryEventName.ACCOUNT_CONNECT_SUCCESS, TelemetryEventName.ACCOUNT_LOGOUT_CLICKED, TelemetryEventName.ACCOUNT_LOGOUT_SUCCESS, TelemetryEventName.SCHEMA_VALIDATION_ERROR, TelemetryEventName.DIFF_APPLICATION_ERROR, TelemetryEventName.SHELL_INTEGRATION_ERROR, TelemetryEventName.CONSECUTIVE_MISTAKE_ERROR, TelemetryEventName.CODE_INDEX_ERROR, TelemetryEventName.CONTEXT_CONDENSED, TelemetryEventName.SLIDING_WINDOW_TRUNCATION, TelemetryEventName.TAB_SHOWN, TelemetryEventName.MODE_SETTINGS_CHANGED, TelemetryEventName.CUSTOM_MODE_CREATED]>;
    properties: z.ZodObject<{
        repositoryUrl: z.ZodOptional<z.ZodString>;
        repositoryName: z.ZodOptional<z.ZodString>;
        defaultBranch: z.ZodOptional<z.ZodString>;
        taskId: z.ZodOptional<z.ZodString>;
        apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        modelId: z.ZodOptional<z.ZodString>;
        diffStrategy: z.ZodOptional<z.ZodString>;
        isSubtask: z.ZodOptional<z.ZodBoolean>;
        todos: z.ZodOptional<z.ZodObject<{
            total: z.ZodNumber;
            completed: z.ZodNumber;
            inProgress: z.ZodNumber;
            pending: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        }, {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        }>>;
        appName: z.ZodString;
        appVersion: z.ZodString;
        vscodeVersion: z.ZodString;
        platform: z.ZodString;
        editorName: z.ZodString;
        language: z.ZodString;
        mode: z.ZodString;
        cloudIsAuthenticated: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    }, {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: TelemetryEventName.TASK_CREATED | TelemetryEventName.TASK_RESTARTED | TelemetryEventName.TASK_COMPLETED | TelemetryEventName.TASK_CONVERSATION_MESSAGE | TelemetryEventName.MODE_SWITCH | TelemetryEventName.MODE_SELECTOR_OPENED | TelemetryEventName.TOOL_USED | TelemetryEventName.CHECKPOINT_CREATED | TelemetryEventName.CHECKPOINT_RESTORED | TelemetryEventName.CHECKPOINT_DIFFED | TelemetryEventName.TAB_SHOWN | TelemetryEventName.MODE_SETTINGS_CHANGED | TelemetryEventName.CUSTOM_MODE_CREATED | TelemetryEventName.CONTEXT_CONDENSED | TelemetryEventName.SLIDING_WINDOW_TRUNCATION | TelemetryEventName.CODE_ACTION_USED | TelemetryEventName.PROMPT_ENHANCED | TelemetryEventName.TITLE_BUTTON_CLICKED | TelemetryEventName.AUTHENTICATION_INITIATED | TelemetryEventName.MARKETPLACE_ITEM_INSTALLED | TelemetryEventName.MARKETPLACE_ITEM_REMOVED | TelemetryEventName.MARKETPLACE_TAB_VIEWED | TelemetryEventName.MARKETPLACE_INSTALL_BUTTON_CLICKED | TelemetryEventName.SHARE_BUTTON_CLICKED | TelemetryEventName.SHARE_ORGANIZATION_CLICKED | TelemetryEventName.SHARE_PUBLIC_CLICKED | TelemetryEventName.SHARE_CONNECT_TO_CLOUD_CLICKED | TelemetryEventName.ACCOUNT_CONNECT_CLICKED | TelemetryEventName.ACCOUNT_CONNECT_SUCCESS | TelemetryEventName.ACCOUNT_LOGOUT_CLICKED | TelemetryEventName.ACCOUNT_LOGOUT_SUCCESS | TelemetryEventName.SCHEMA_VALIDATION_ERROR | TelemetryEventName.DIFF_APPLICATION_ERROR | TelemetryEventName.SHELL_INTEGRATION_ERROR | TelemetryEventName.CONSECUTIVE_MISTAKE_ERROR | TelemetryEventName.CODE_INDEX_ERROR;
    properties: {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    };
}, {
    type: TelemetryEventName.TASK_CREATED | TelemetryEventName.TASK_RESTARTED | TelemetryEventName.TASK_COMPLETED | TelemetryEventName.TASK_CONVERSATION_MESSAGE | TelemetryEventName.MODE_SWITCH | TelemetryEventName.MODE_SELECTOR_OPENED | TelemetryEventName.TOOL_USED | TelemetryEventName.CHECKPOINT_CREATED | TelemetryEventName.CHECKPOINT_RESTORED | TelemetryEventName.CHECKPOINT_DIFFED | TelemetryEventName.TAB_SHOWN | TelemetryEventName.MODE_SETTINGS_CHANGED | TelemetryEventName.CUSTOM_MODE_CREATED | TelemetryEventName.CONTEXT_CONDENSED | TelemetryEventName.SLIDING_WINDOW_TRUNCATION | TelemetryEventName.CODE_ACTION_USED | TelemetryEventName.PROMPT_ENHANCED | TelemetryEventName.TITLE_BUTTON_CLICKED | TelemetryEventName.AUTHENTICATION_INITIATED | TelemetryEventName.MARKETPLACE_ITEM_INSTALLED | TelemetryEventName.MARKETPLACE_ITEM_REMOVED | TelemetryEventName.MARKETPLACE_TAB_VIEWED | TelemetryEventName.MARKETPLACE_INSTALL_BUTTON_CLICKED | TelemetryEventName.SHARE_BUTTON_CLICKED | TelemetryEventName.SHARE_ORGANIZATION_CLICKED | TelemetryEventName.SHARE_PUBLIC_CLICKED | TelemetryEventName.SHARE_CONNECT_TO_CLOUD_CLICKED | TelemetryEventName.ACCOUNT_CONNECT_CLICKED | TelemetryEventName.ACCOUNT_CONNECT_SUCCESS | TelemetryEventName.ACCOUNT_LOGOUT_CLICKED | TelemetryEventName.ACCOUNT_LOGOUT_SUCCESS | TelemetryEventName.SCHEMA_VALIDATION_ERROR | TelemetryEventName.DIFF_APPLICATION_ERROR | TelemetryEventName.SHELL_INTEGRATION_ERROR | TelemetryEventName.CONSECUTIVE_MISTAKE_ERROR | TelemetryEventName.CODE_INDEX_ERROR;
    properties: {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<TelemetryEventName.TASK_MESSAGE>;
    properties: z.ZodObject<{
        taskId: z.ZodString;
        message: z.ZodObject<{
            ts: z.ZodNumber;
            type: z.ZodUnion<[z.ZodLiteral<"ask">, z.ZodLiteral<"say">]>;
            ask: z.ZodOptional<z.ZodEnum<["followup", "command", "command_output", "completion_result", "tool", "api_req_failed", "resume_task", "resume_completed_task", "mistake_limit_reached", "browser_action_launch", "use_mcp_server", "auto_approval_max_req_reached"]>>;
            say: z.ZodOptional<z.ZodEnum<["error", "api_req_started", "api_req_finished", "api_req_retried", "api_req_retry_delayed", "api_req_deleted", "text", "reasoning", "completion_result", "user_feedback", "user_feedback_diff", "command_output", "shell_integration_warning", "browser_action", "browser_action_result", "mcp_server_request_started", "mcp_server_response", "subtask_result", "checkpoint_saved", "rooignore_error", "diff_error", "condense_context", "condense_context_error", "codebase_search_result", "user_edit_todos"]>>;
            text: z.ZodOptional<z.ZodString>;
            images: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            partial: z.ZodOptional<z.ZodBoolean>;
            reasoning: z.ZodOptional<z.ZodString>;
            conversationHistoryIndex: z.ZodOptional<z.ZodNumber>;
            checkpoint: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            progressStatus: z.ZodOptional<z.ZodObject<{
                icon: z.ZodOptional<z.ZodString>;
                text: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                text?: string | undefined;
                icon?: string | undefined;
            }, {
                text?: string | undefined;
                icon?: string | undefined;
            }>>;
            contextCondense: z.ZodOptional<z.ZodObject<{
                cost: z.ZodNumber;
                prevContextTokens: z.ZodNumber;
                newContextTokens: z.ZodNumber;
                summary: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            }, {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            }>>;
            isProtected: z.ZodOptional<z.ZodBoolean>;
            apiProtocol: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"openai">, z.ZodLiteral<"anthropic">]>>;
            metadata: z.ZodOptional<z.ZodObject<{
                gpt5: z.ZodOptional<z.ZodObject<{
                    previous_response_id: z.ZodOptional<z.ZodString>;
                    instructions: z.ZodOptional<z.ZodString>;
                    reasoning_summary: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                }, {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                }>>;
                taskId: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            }, {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        }, {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        }>;
        repositoryUrl: z.ZodOptional<z.ZodString>;
        repositoryName: z.ZodOptional<z.ZodString>;
        defaultBranch: z.ZodOptional<z.ZodString>;
        apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        modelId: z.ZodOptional<z.ZodString>;
        diffStrategy: z.ZodOptional<z.ZodString>;
        isSubtask: z.ZodOptional<z.ZodBoolean>;
        todos: z.ZodOptional<z.ZodObject<{
            total: z.ZodNumber;
            completed: z.ZodNumber;
            inProgress: z.ZodNumber;
            pending: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        }, {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        }>>;
        appName: z.ZodString;
        appVersion: z.ZodString;
        vscodeVersion: z.ZodString;
        platform: z.ZodString;
        editorName: z.ZodString;
        language: z.ZodString;
        mode: z.ZodString;
        cloudIsAuthenticated: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    }, {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: TelemetryEventName.TASK_MESSAGE;
    properties: {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    };
}, {
    type: TelemetryEventName.TASK_MESSAGE;
    properties: {
        message: {
            type: "ask" | "say";
            ts: number;
            reasoning?: string | undefined;
            partial?: boolean | undefined;
            metadata?: {
                taskId?: string | undefined;
                gpt5?: {
                    previous_response_id?: string | undefined;
                    instructions?: string | undefined;
                    reasoning_summary?: string | undefined;
                } | undefined;
            } | undefined;
            text?: string | undefined;
            ask?: "followup" | "command" | "command_output" | "completion_result" | "tool" | "api_req_failed" | "resume_task" | "resume_completed_task" | "mistake_limit_reached" | "browser_action_launch" | "use_mcp_server" | "auto_approval_max_req_reached" | undefined;
            say?: "reasoning" | "error" | "command_output" | "completion_result" | "api_req_started" | "api_req_finished" | "api_req_retried" | "api_req_retry_delayed" | "api_req_deleted" | "text" | "user_feedback" | "user_feedback_diff" | "shell_integration_warning" | "browser_action" | "browser_action_result" | "mcp_server_request_started" | "mcp_server_response" | "subtask_result" | "checkpoint_saved" | "rooignore_error" | "diff_error" | "condense_context" | "condense_context_error" | "codebase_search_result" | "user_edit_todos" | undefined;
            images?: string[] | undefined;
            conversationHistoryIndex?: number | undefined;
            checkpoint?: Record<string, unknown> | undefined;
            progressStatus?: {
                text?: string | undefined;
                icon?: string | undefined;
            } | undefined;
            contextCondense?: {
                cost: number;
                prevContextTokens: number;
                newContextTokens: number;
                summary: string;
            } | undefined;
            isProtected?: boolean | undefined;
            apiProtocol?: "openai" | "anthropic" | undefined;
        };
        taskId: string;
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<TelemetryEventName.LLM_COMPLETION>;
    properties: z.ZodObject<{
        inputTokens: z.ZodNumber;
        outputTokens: z.ZodNumber;
        cacheReadTokens: z.ZodOptional<z.ZodNumber>;
        cacheWriteTokens: z.ZodOptional<z.ZodNumber>;
        cost: z.ZodOptional<z.ZodNumber>;
        repositoryUrl: z.ZodOptional<z.ZodString>;
        repositoryName: z.ZodOptional<z.ZodString>;
        defaultBranch: z.ZodOptional<z.ZodString>;
        taskId: z.ZodOptional<z.ZodString>;
        apiProvider: z.ZodOptional<z.ZodEnum<["anthropic", "claude-code", "glama", "openrouter", "bedrock", "vertex", "openai", "ollama", "vscode-lm", "lmstudio", "gemini", "gemini-cli", "openai-native", "mistral", "moonshot", "deepseek", "doubao", "unbound", "requesty", "human-relay", "fake-ai", "xai", "groq", "chutes", "litellm", "huggingface", "cerebras", "sambanova", "zai", "fireworks", "io-intelligence"]>>;
        modelId: z.ZodOptional<z.ZodString>;
        diffStrategy: z.ZodOptional<z.ZodString>;
        isSubtask: z.ZodOptional<z.ZodBoolean>;
        todos: z.ZodOptional<z.ZodObject<{
            total: z.ZodNumber;
            completed: z.ZodNumber;
            inProgress: z.ZodNumber;
            pending: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        }, {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        }>>;
        appName: z.ZodString;
        appVersion: z.ZodString;
        vscodeVersion: z.ZodString;
        platform: z.ZodString;
        editorName: z.ZodString;
        language: z.ZodString;
        mode: z.ZodString;
        cloudIsAuthenticated: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        inputTokens: number;
        outputTokens: number;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        cost?: number | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
        cacheReadTokens?: number | undefined;
        cacheWriteTokens?: number | undefined;
    }, {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        inputTokens: number;
        outputTokens: number;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        cost?: number | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
        cacheReadTokens?: number | undefined;
        cacheWriteTokens?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: TelemetryEventName.LLM_COMPLETION;
    properties: {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        inputTokens: number;
        outputTokens: number;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        cost?: number | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
        cacheReadTokens?: number | undefined;
        cacheWriteTokens?: number | undefined;
    };
}, {
    type: TelemetryEventName.LLM_COMPLETION;
    properties: {
        platform: string;
        mode: string;
        appName: string;
        appVersion: string;
        vscodeVersion: string;
        editorName: string;
        language: string;
        inputTokens: number;
        outputTokens: number;
        apiProvider?: "openai" | "ollama" | "gemini" | "mistral" | "anthropic" | "claude-code" | "glama" | "openrouter" | "bedrock" | "vertex" | "vscode-lm" | "lmstudio" | "gemini-cli" | "openai-native" | "moonshot" | "deepseek" | "doubao" | "unbound" | "requesty" | "human-relay" | "fake-ai" | "xai" | "groq" | "chutes" | "litellm" | "huggingface" | "cerebras" | "sambanova" | "zai" | "fireworks" | "io-intelligence" | undefined;
        modelId?: string | undefined;
        taskId?: string | undefined;
        todos?: {
            pending: number;
            completed: number;
            total: number;
            inProgress: number;
        } | undefined;
        cost?: number | undefined;
        isSubtask?: boolean | undefined;
        cloudIsAuthenticated?: boolean | undefined;
        diffStrategy?: string | undefined;
        repositoryUrl?: string | undefined;
        repositoryName?: string | undefined;
        defaultBranch?: string | undefined;
        cacheReadTokens?: number | undefined;
        cacheWriteTokens?: number | undefined;
    };
}>]>;
type RooCodeTelemetryEvent = z.infer<typeof rooCodeTelemetryEventSchema>;
/**
 * TelemetryEventSubscription
 */
type TelemetryEventSubscription = {
    type: "include";
    events: TelemetryEventName[];
} | {
    type: "exclude";
    events: TelemetryEventName[];
};
/**
 * TelemetryPropertiesProvider
 */
interface TelemetryPropertiesProvider {
    getTelemetryProperties(): Promise<TelemetryProperties>;
}
/**
 * TelemetryClient
 */
interface TelemetryClient {
    subscription?: TelemetryEventSubscription;
    setProvider(provider: TelemetryPropertiesProvider): void;
    capture(options: TelemetryEvent): Promise<void>;
    updateTelemetryState(didUserOptIn: boolean): void;
    isTelemetryEnabled(): boolean;
    shutdown(): Promise<void>;
}

/**
 * CommandExecutionStatus
 */
declare const commandExecutionStatusSchema: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"started">;
    pid: z.ZodOptional<z.ZodNumber>;
    command: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "started";
    command: string;
    executionId: string;
    pid?: number | undefined;
}, {
    status: "started";
    command: string;
    executionId: string;
    pid?: number | undefined;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"output">;
    output: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "output";
    executionId: string;
    output: string;
}, {
    status: "output";
    executionId: string;
    output: string;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"exited">;
    exitCode: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    status: "exited";
    executionId: string;
    exitCode?: number | undefined;
}, {
    status: "exited";
    executionId: string;
    exitCode?: number | undefined;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"fallback">;
}, "strip", z.ZodTypeAny, {
    status: "fallback";
    executionId: string;
}, {
    status: "fallback";
    executionId: string;
}>, z.ZodObject<{
    executionId: z.ZodString;
    status: z.ZodLiteral<"timeout">;
}, "strip", z.ZodTypeAny, {
    status: "timeout";
    executionId: string;
}, {
    status: "timeout";
    executionId: string;
}>]>;
type CommandExecutionStatus = z.infer<typeof commandExecutionStatusSchema>;

/**
 * CodeAction
 */
declare const codeActionIds: readonly ["explainCode", "fixCode", "improveCode", "addToContext", "newTask"];
type CodeActionId = (typeof codeActionIds)[number];
type CodeActionName = "EXPLAIN" | "FIX" | "IMPROVE" | "ADD_TO_CONTEXT" | "NEW_TASK";
/**
 * TerminalAction
 */
declare const terminalActionIds: readonly ["terminalAddToContext", "terminalFixCommand", "terminalExplainCommand"];
type TerminalActionId = (typeof terminalActionIds)[number];
type TerminalActionName = "ADD_TO_CONTEXT" | "FIX" | "EXPLAIN";
type TerminalActionPromptType = `TERMINAL_${TerminalActionName}`;
/**
 * Command
 */
declare const commandIds: readonly ["activationCompleted", "plusButtonClicked", "promptsButtonClicked", "mcpButtonClicked", "historyButtonClicked", "marketplaceButtonClicked", "popoutButtonClicked", "accountButtonClicked", "settingsButtonClicked", "agentsButtonClicked", "openInNewTab", "showHumanRelayDialog", "registerHumanRelayCallback", "unregisterHumanRelayCallback", "handleHumanRelayResponse", "newTask", "executeTask", "executeTaskWithMode", "setCustomStoragePath", "importSettings", "focusInput", "acceptInput", "focusPanel", "imPlatform.manageToken", "imPlatform.setToken", "imPlatform.clearToken", "debugResetAllProfiles", "autoConfigureProvider", "switchToDefaultConfig", "receiveUserInfo", "sendCloudPCNotification", "testSetTerminalNo"];
type CommandId = (typeof commandIds)[number];
/**
 * Language
 */
declare const languages: readonly ["ca", "de", "en", "es", "fr", "hi", "id", "it", "ja", "ko", "nl", "pl", "pt-BR", "ru", "tr", "vi", "zh-CN", "zh-TW"];
declare const languagesSchema: z.ZodEnum<["ca", "de", "en", "es", "fr", "hi", "id", "it", "ja", "ko", "nl", "pl", "pt-BR", "ru", "tr", "vi", "zh-CN", "zh-TW"]>;
type Language = z.infer<typeof languagesSchema>;
declare const isLanguage: (value: string) => value is Language;

type AnthropicModelId = keyof typeof anthropicModels;
declare const anthropicDefaultModelId: AnthropicModelId;
declare const anthropicModels: {
    readonly "claude-sonnet-4-20250514": {
        readonly maxTokens: 64000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly supportsReasoningBudget: true;
        readonly tiers: [{
            readonly contextWindow: 1000000;
            readonly inputPrice: 6;
            readonly outputPrice: 22.5;
            readonly cacheWritesPrice: 7.5;
            readonly cacheReadsPrice: 0.6;
        }];
    };
    readonly "claude-opus-4-1-20250805": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
        readonly supportsReasoningBudget: true;
    };
    readonly "claude-opus-4-20250514": {
        readonly maxTokens: 32000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
        readonly supportsReasoningBudget: true;
    };
    readonly "claude-3-7-sonnet-20250219:thinking": {
        readonly maxTokens: 128000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
    };
    readonly "claude-3-7-sonnet-20250219": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-sonnet-20241022": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-haiku-20241022": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1;
        readonly outputPrice: 5;
        readonly cacheWritesPrice: 1.25;
        readonly cacheReadsPrice: 0.1;
    };
    readonly "claude-3-opus-20240229": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
    };
    readonly "claude-3-haiku-20240307": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.25;
        readonly outputPrice: 1.25;
        readonly cacheWritesPrice: 0.3;
        readonly cacheReadsPrice: 0.03;
    };
};
declare const ANTHROPIC_DEFAULT_MAX_TOKENS = 8192;

type BedrockModelId = keyof typeof bedrockModels;
declare const bedrockDefaultModelId: BedrockModelId;
declare const bedrockDefaultPromptRouterModelId: BedrockModelId;
declare const bedrockModels: {
    readonly "amazon.nova-pro-v1:0": {
        readonly maxTokens: 5000;
        readonly contextWindow: 300000;
        readonly supportsImages: true;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.8;
        readonly outputPrice: 3.2;
        readonly cacheWritesPrice: 0.8;
        readonly cacheReadsPrice: 0.2;
        readonly minTokensPerCachePoint: 1;
        readonly maxCachePoints: 1;
        readonly cachableFields: ["system"];
    };
    readonly "amazon.nova-pro-latency-optimized-v1:0": {
        readonly maxTokens: 5000;
        readonly contextWindow: 300000;
        readonly supportsImages: true;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 1;
        readonly outputPrice: 4;
        readonly cacheWritesPrice: 1;
        readonly cacheReadsPrice: 0.25;
        readonly description: "Amazon Nova Pro with latency optimized inference";
    };
    readonly "amazon.nova-lite-v1:0": {
        readonly maxTokens: 5000;
        readonly contextWindow: 300000;
        readonly supportsImages: true;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.06;
        readonly outputPrice: 0.24;
        readonly cacheWritesPrice: 0.06;
        readonly cacheReadsPrice: 0.015;
        readonly minTokensPerCachePoint: 1;
        readonly maxCachePoints: 1;
        readonly cachableFields: ["system"];
    };
    readonly "amazon.nova-micro-v1:0": {
        readonly maxTokens: 5000;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.035;
        readonly outputPrice: 0.14;
        readonly cacheWritesPrice: 0.035;
        readonly cacheReadsPrice: 0.00875;
        readonly minTokensPerCachePoint: 1;
        readonly maxCachePoints: 1;
        readonly cachableFields: ["system"];
    };
    readonly "anthropic.claude-sonnet-4-20250514-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningBudget: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly minTokensPerCachePoint: 1024;
        readonly maxCachePoints: 4;
        readonly cachableFields: ["system", "messages", "tools"];
    };
    readonly "anthropic.claude-opus-4-1-20250805-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningBudget: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
        readonly minTokensPerCachePoint: 1024;
        readonly maxCachePoints: 4;
        readonly cachableFields: ["system", "messages", "tools"];
    };
    readonly "anthropic.claude-opus-4-20250514-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningBudget: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
        readonly minTokensPerCachePoint: 1024;
        readonly maxCachePoints: 4;
        readonly cachableFields: ["system", "messages", "tools"];
    };
    readonly "anthropic.claude-3-7-sonnet-20250219-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningBudget: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly minTokensPerCachePoint: 1024;
        readonly maxCachePoints: 4;
        readonly cachableFields: ["system", "messages", "tools"];
    };
    readonly "anthropic.claude-3-5-sonnet-20241022-v2:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly minTokensPerCachePoint: 1024;
        readonly maxCachePoints: 4;
        readonly cachableFields: ["system", "messages", "tools"];
    };
    readonly "anthropic.claude-3-5-haiku-20241022-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.8;
        readonly outputPrice: 4;
        readonly cacheWritesPrice: 1;
        readonly cacheReadsPrice: 0.08;
        readonly minTokensPerCachePoint: 2048;
        readonly maxCachePoints: 4;
        readonly cachableFields: ["system", "messages", "tools"];
    };
    readonly "anthropic.claude-3-5-sonnet-20240620-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
    };
    readonly "anthropic.claude-3-opus-20240229-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
    };
    readonly "anthropic.claude-3-sonnet-20240229-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
    };
    readonly "anthropic.claude-3-haiku-20240307-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.25;
        readonly outputPrice: 1.25;
    };
    readonly "anthropic.claude-2-1-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 100000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 8;
        readonly outputPrice: 24;
        readonly description: "Claude 2.1";
    };
    readonly "anthropic.claude-2-0-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 100000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 8;
        readonly outputPrice: 24;
        readonly description: "Claude 2.0";
    };
    readonly "anthropic.claude-instant-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 100000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.8;
        readonly outputPrice: 2.4;
        readonly description: "Claude Instant";
    };
    readonly "deepseek.r1-v1:0": {
        readonly maxTokens: 32768;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 1.35;
        readonly outputPrice: 5.4;
    };
    readonly "openai.gpt-oss-20b-1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.5;
        readonly outputPrice: 1.5;
        readonly description: "GPT-OSS 20B - Optimized for low latency and local/specialized use cases";
    };
    readonly "openai.gpt-oss-120b-1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2;
        readonly outputPrice: 6;
        readonly description: "GPT-OSS 120B - Production-ready, general-purpose, high-reasoning model";
    };
    readonly "meta.llama3-3-70b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.72;
        readonly outputPrice: 0.72;
        readonly description: "Llama 3.3 Instruct (70B)";
    };
    readonly "meta.llama3-2-90b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.72;
        readonly outputPrice: 0.72;
        readonly description: "Llama 3.2 Instruct (90B)";
    };
    readonly "meta.llama3-2-11b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.16;
        readonly outputPrice: 0.16;
        readonly description: "Llama 3.2 Instruct (11B)";
    };
    readonly "meta.llama3-2-3b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.15;
        readonly description: "Llama 3.2 Instruct (3B)";
    };
    readonly "meta.llama3-2-1b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.1;
        readonly description: "Llama 3.2 Instruct (1B)";
    };
    readonly "meta.llama3-1-405b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2.4;
        readonly outputPrice: 2.4;
        readonly description: "Llama 3.1 Instruct (405B)";
    };
    readonly "meta.llama3-1-70b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.72;
        readonly outputPrice: 0.72;
        readonly description: "Llama 3.1 Instruct (70B)";
    };
    readonly "meta.llama3-1-70b-instruct-latency-optimized-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.9;
        readonly outputPrice: 0.9;
        readonly description: "Llama 3.1 Instruct (70B) (w/ latency optimized inference)";
    };
    readonly "meta.llama3-1-8b-instruct-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 8000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.22;
        readonly outputPrice: 0.22;
        readonly description: "Llama 3.1 Instruct (8B)";
    };
    readonly "meta.llama3-70b-instruct-v1:0": {
        readonly maxTokens: 2048;
        readonly contextWindow: 8000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2.65;
        readonly outputPrice: 3.5;
    };
    readonly "meta.llama3-8b-instruct-v1:0": {
        readonly maxTokens: 2048;
        readonly contextWindow: 4000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.3;
        readonly outputPrice: 0.6;
    };
    readonly "amazon.titan-text-lite-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 8000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.2;
        readonly description: "Amazon Titan Text Lite";
    };
    readonly "amazon.titan-text-express-v1:0": {
        readonly maxTokens: 4096;
        readonly contextWindow: 8000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.2;
        readonly outputPrice: 0.6;
        readonly description: "Amazon Titan Text Express";
    };
    readonly "amazon.titan-text-embeddings-v1:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 8000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.1;
        readonly description: "Amazon Titan Text Embeddings";
    };
    readonly "amazon.titan-text-embeddings-v2:0": {
        readonly maxTokens: 8192;
        readonly contextWindow: 8000;
        readonly supportsImages: false;
        readonly supportsComputerUse: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.02;
        readonly description: "Amazon Titan Text Embeddings V2";
    };
};
declare const BEDROCK_DEFAULT_TEMPERATURE = 0.3;
declare const BEDROCK_MAX_TOKENS = 4096;
declare const BEDROCK_DEFAULT_CONTEXT = 128000;
declare const AWS_INFERENCE_PROFILE_MAPPING: Array<[string, string]>;
declare const BEDROCK_REGIONS: {
    value: string;
    label: string;
}[];

type CerebrasModelId = keyof typeof cerebrasModels;
declare const cerebrasDefaultModelId: CerebrasModelId;
declare const cerebrasModels: {
    readonly "qwen-3-coder-480b-free": {
        readonly maxTokens: 40000;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "SOTA coding model with ~2000 tokens/s ($0 free tier)\n\n• Use this if you don't have a Cerebras subscription\n• 64K context window\n• Rate limits: 150K TPM, 1M TPH/TPD, 10 RPM, 100 RPH/RPD\n\nUpgrade for higher limits: [https://cloud.cerebras.ai/?utm=roocode](https://cloud.cerebras.ai/?utm=roocode)";
    };
    readonly "qwen-3-coder-480b": {
        readonly maxTokens: 40000;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "SOTA coding model with ~2000 tokens/s ($50/$250 paid tiers)\n\n• Use this if you have a Cerebras subscription\n• 131K context window with higher rate limits";
    };
    readonly "qwen-3-235b-a22b-instruct-2507": {
        readonly maxTokens: 64000;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Intelligent model with ~1400 tokens/s";
    };
    readonly "llama-3.3-70b": {
        readonly maxTokens: 64000;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Powerful model with ~2600 tokens/s";
    };
    readonly "qwen-3-32b": {
        readonly maxTokens: 64000;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "SOTA coding performance with ~2500 tokens/s";
    };
    readonly "qwen-3-235b-a22b-thinking-2507": {
        readonly maxTokens: 40000;
        readonly contextWindow: 65000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "SOTA performance with ~1500 tokens/s";
        readonly supportsReasoningEffort: true;
    };
    readonly "gpt-oss-120b": {
        readonly maxTokens: 8000;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "OpenAI GPT OSS model with ~2800 tokens/s\n\n• 64K context window\n• Excels at efficient reasoning across science, math, and coding";
    };
};

type ChutesModelId = "deepseek-ai/DeepSeek-R1-0528" | "deepseek-ai/DeepSeek-R1" | "deepseek-ai/DeepSeek-V3" | "unsloth/Llama-3.3-70B-Instruct" | "chutesai/Llama-4-Scout-17B-16E-Instruct" | "unsloth/Mistral-Nemo-Instruct-2407" | "unsloth/gemma-3-12b-it" | "NousResearch/DeepHermes-3-Llama-3-8B-Preview" | "unsloth/gemma-3-4b-it" | "nvidia/Llama-3_3-Nemotron-Super-49B-v1" | "nvidia/Llama-3_1-Nemotron-Ultra-253B-v1" | "chutesai/Llama-4-Maverick-17B-128E-Instruct-FP8" | "deepseek-ai/DeepSeek-V3-Base" | "deepseek-ai/DeepSeek-R1-Zero" | "deepseek-ai/DeepSeek-V3-0324" | "Qwen/Qwen3-235B-A22B" | "Qwen/Qwen3-235B-A22B-Instruct-2507" | "Qwen/Qwen3-32B" | "Qwen/Qwen3-30B-A3B" | "Qwen/Qwen3-14B" | "Qwen/Qwen3-8B" | "Qwen/Qwen3-Coder-480B-A35B-Instruct-FP8" | "microsoft/MAI-DS-R1-FP8" | "tngtech/DeepSeek-R1T-Chimera" | "zai-org/GLM-4.5-Air" | "zai-org/GLM-4.5-FP8" | "moonshotai/Kimi-K2-Instruct-75k";
declare const chutesDefaultModelId: ChutesModelId;
declare const chutesModels: {
    readonly "deepseek-ai/DeepSeek-R1-0528": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "DeepSeek R1 0528 model.";
    };
    readonly "deepseek-ai/DeepSeek-R1": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "DeepSeek R1 model.";
    };
    readonly "deepseek-ai/DeepSeek-V3": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "DeepSeek V3 model.";
    };
    readonly "unsloth/Llama-3.3-70B-Instruct": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Unsloth Llama 3.3 70B Instruct model.";
    };
    readonly "chutesai/Llama-4-Scout-17B-16E-Instruct": {
        readonly maxTokens: 32768;
        readonly contextWindow: 512000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "ChutesAI Llama 4 Scout 17B Instruct model, 512K context.";
    };
    readonly "unsloth/Mistral-Nemo-Instruct-2407": {
        readonly maxTokens: 32768;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Unsloth Mistral Nemo Instruct model.";
    };
    readonly "unsloth/gemma-3-12b-it": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Unsloth Gemma 3 12B IT model.";
    };
    readonly "NousResearch/DeepHermes-3-Llama-3-8B-Preview": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Nous DeepHermes 3 Llama 3 8B Preview model.";
    };
    readonly "unsloth/gemma-3-4b-it": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Unsloth Gemma 3 4B IT model.";
    };
    readonly "nvidia/Llama-3_3-Nemotron-Super-49B-v1": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Nvidia Llama 3.3 Nemotron Super 49B model.";
    };
    readonly "nvidia/Llama-3_1-Nemotron-Ultra-253B-v1": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Nvidia Llama 3.1 Nemotron Ultra 253B model.";
    };
    readonly "chutesai/Llama-4-Maverick-17B-128E-Instruct-FP8": {
        readonly maxTokens: 32768;
        readonly contextWindow: 256000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "ChutesAI Llama 4 Maverick 17B Instruct FP8 model.";
    };
    readonly "deepseek-ai/DeepSeek-V3-Base": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "DeepSeek V3 Base model.";
    };
    readonly "deepseek-ai/DeepSeek-R1-Zero": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "DeepSeek R1 Zero model.";
    };
    readonly "deepseek-ai/DeepSeek-V3-0324": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "DeepSeek V3 (0324) model.";
    };
    readonly "Qwen/Qwen3-235B-A22B-Instruct-2507": {
        readonly maxTokens: 32768;
        readonly contextWindow: 262144;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 235B A22B Instruct 2507 model with 262K context window.";
    };
    readonly "Qwen/Qwen3-235B-A22B": {
        readonly maxTokens: 32768;
        readonly contextWindow: 40960;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 235B A22B model.";
    };
    readonly "Qwen/Qwen3-32B": {
        readonly maxTokens: 32768;
        readonly contextWindow: 40960;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 32B model.";
    };
    readonly "Qwen/Qwen3-30B-A3B": {
        readonly maxTokens: 32768;
        readonly contextWindow: 40960;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 30B A3B model.";
    };
    readonly "Qwen/Qwen3-14B": {
        readonly maxTokens: 32768;
        readonly contextWindow: 40960;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 14B model.";
    };
    readonly "Qwen/Qwen3-8B": {
        readonly maxTokens: 32768;
        readonly contextWindow: 40960;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 8B model.";
    };
    readonly "microsoft/MAI-DS-R1-FP8": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Microsoft MAI-DS-R1 FP8 model.";
    };
    readonly "tngtech/DeepSeek-R1T-Chimera": {
        readonly maxTokens: 32768;
        readonly contextWindow: 163840;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "TNGTech DeepSeek R1T Chimera model.";
    };
    readonly "zai-org/GLM-4.5-Air": {
        readonly maxTokens: 32768;
        readonly contextWindow: 151329;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "GLM-4.5-Air model with 151,329 token context window and 106B total parameters with 12B activated.";
    };
    readonly "zai-org/GLM-4.5-FP8": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "GLM-4.5-FP8 model with 128k token context window, optimized for agent-based applications with MoE architecture.";
    };
    readonly "Qwen/Qwen3-Coder-480B-A35B-Instruct-FP8": {
        readonly maxTokens: 32768;
        readonly contextWindow: 262144;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly description: "Qwen3 Coder 480B A35B Instruct FP8 model, optimized for coding tasks.";
    };
    readonly "moonshotai/Kimi-K2-Instruct-75k": {
        readonly maxTokens: 32768;
        readonly contextWindow: 75000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.1481;
        readonly outputPrice: 0.5926;
        readonly description: "Moonshot AI Kimi K2 Instruct model with 75k context window.";
    };
};

/**
 * Converts Claude model names from hyphen-date format to Vertex AI's @-date format.
 *
 * @param modelName - The original model name (e.g., "claude-sonnet-4-20250514")
 * @returns The converted model name for Vertex AI (e.g., "claude-sonnet-4@20250514")
 *
 * @example
 * convertModelNameForVertex("claude-sonnet-4-20250514") // returns "claude-sonnet-4@20250514"
 * convertModelNameForVertex("claude-model") // returns "claude-model" (no change)
 */
declare function convertModelNameForVertex(modelName: string): string;
type ClaudeCodeModelId = keyof typeof claudeCodeModels;
declare const claudeCodeDefaultModelId: ClaudeCodeModelId;
declare const CLAUDE_CODE_DEFAULT_MAX_OUTPUT_TOKENS = 16000;
/**
 * Gets the appropriate model ID based on whether Vertex AI is being used.
 *
 * @param baseModelId - The base Claude Code model ID
 * @param useVertex - Whether to format the model ID for Vertex AI (default: false)
 * @returns The model ID, potentially formatted for Vertex AI
 *
 * @example
 * getClaudeCodeModelId("claude-sonnet-4-20250514", true) // returns "claude-sonnet-4@20250514"
 * getClaudeCodeModelId("claude-sonnet-4-20250514", false) // returns "claude-sonnet-4-20250514"
 */
declare function getClaudeCodeModelId(baseModelId: ClaudeCodeModelId, useVertex?: boolean): string;
declare const claudeCodeModels: {
    readonly "claude-sonnet-4-20250514": {
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: false;
        readonly supportsReasoningBudget: false;
        readonly requiredReasoningBudget: false;
        readonly maxTokens: 64000;
        readonly contextWindow: 200000;
        readonly supportsComputerUse: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly tiers: [{
            readonly contextWindow: 1000000;
            readonly inputPrice: 6;
            readonly outputPrice: 22.5;
            readonly cacheWritesPrice: 7.5;
            readonly cacheReadsPrice: 0.6;
        }];
    };
    readonly "claude-opus-4-1-20250805": {
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: false;
        readonly supportsReasoningBudget: false;
        readonly requiredReasoningBudget: false;
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsComputerUse: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
    };
    readonly "claude-opus-4-20250514": {
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: false;
        readonly supportsReasoningBudget: false;
        readonly requiredReasoningBudget: false;
        readonly maxTokens: 32000;
        readonly contextWindow: 200000;
        readonly supportsComputerUse: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
    };
    readonly "claude-3-7-sonnet-20250219": {
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: false;
        readonly supportsReasoningBudget: false;
        readonly requiredReasoningBudget: false;
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsComputerUse: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-sonnet-20241022": {
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: false;
        readonly supportsReasoningBudget: false;
        readonly requiredReasoningBudget: false;
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsComputerUse: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-haiku-20241022": {
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: false;
        readonly supportsReasoningBudget: false;
        readonly requiredReasoningBudget: false;
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly inputPrice: 1;
        readonly outputPrice: 5;
        readonly cacheWritesPrice: 1.25;
        readonly cacheReadsPrice: 0.1;
    };
};

type DeepSeekModelId = keyof typeof deepSeekModels;
declare const deepSeekDefaultModelId: DeepSeekModelId;
declare const deepSeekModels: {
    readonly "deepseek-chat": {
        readonly maxTokens: 8192;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.27;
        readonly outputPrice: 1.1;
        readonly cacheWritesPrice: 0.27;
        readonly cacheReadsPrice: 0.07;
        readonly description: "DeepSeek-V3 achieves a significant breakthrough in inference speed over previous models. It tops the leaderboard among open-source models and rivals the most advanced closed-source models globally.";
    };
    readonly "deepseek-reasoner": {
        readonly maxTokens: 8192;
        readonly contextWindow: 64000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.55;
        readonly outputPrice: 2.19;
        readonly cacheWritesPrice: 0.55;
        readonly cacheReadsPrice: 0.14;
        readonly description: "DeepSeek-R1 achieves performance comparable to OpenAI-o1 across math, code, and reasoning tasks. Supports Chain of Thought reasoning with up to 32K tokens.";
    };
};
declare const DEEP_SEEK_DEFAULT_TEMPERATURE = 0.6;

type GeminiModelId = keyof typeof geminiModels;
declare const geminiDefaultModelId: GeminiModelId;
declare const geminiModels: {
    readonly "gemini-2.5-flash-preview-04-17:thinking": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 3.5;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
    };
    readonly "gemini-2.5-flash-preview-04-17": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
    };
    readonly "gemini-2.5-flash-preview-05-20:thinking": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 3.5;
        readonly cacheReadsPrice: 0.0375;
        readonly cacheWritesPrice: 1;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
    };
    readonly "gemini-2.5-flash-preview-05-20": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
        readonly cacheReadsPrice: 0.0375;
        readonly cacheWritesPrice: 1;
    };
    readonly "gemini-2.5-flash": {
        readonly maxTokens: 64000;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.3;
        readonly outputPrice: 2.5;
        readonly cacheReadsPrice: 0.075;
        readonly cacheWritesPrice: 1;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
    };
    readonly "gemini-2.5-pro-exp-03-25": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.5-pro-preview-03-25": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
        readonly cacheReadsPrice: 0.625;
        readonly cacheWritesPrice: 4.5;
        readonly tiers: [{
            readonly contextWindow: 200000;
            readonly inputPrice: 1.25;
            readonly outputPrice: 10;
            readonly cacheReadsPrice: 0.31;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 2.5;
            readonly outputPrice: 15;
            readonly cacheReadsPrice: 0.625;
        }];
    };
    readonly "gemini-2.5-pro-preview-05-06": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
        readonly cacheReadsPrice: 0.625;
        readonly cacheWritesPrice: 4.5;
        readonly tiers: [{
            readonly contextWindow: 200000;
            readonly inputPrice: 1.25;
            readonly outputPrice: 10;
            readonly cacheReadsPrice: 0.31;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 2.5;
            readonly outputPrice: 15;
            readonly cacheReadsPrice: 0.625;
        }];
    };
    readonly "gemini-2.5-pro-preview-06-05": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
        readonly cacheReadsPrice: 0.625;
        readonly cacheWritesPrice: 4.5;
        readonly maxThinkingTokens: 32768;
        readonly supportsReasoningBudget: true;
        readonly tiers: [{
            readonly contextWindow: 200000;
            readonly inputPrice: 1.25;
            readonly outputPrice: 10;
            readonly cacheReadsPrice: 0.31;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 2.5;
            readonly outputPrice: 15;
            readonly cacheReadsPrice: 0.625;
        }];
    };
    readonly "gemini-2.5-pro": {
        readonly maxTokens: 64000;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
        readonly cacheReadsPrice: 0.625;
        readonly cacheWritesPrice: 4.5;
        readonly maxThinkingTokens: 32768;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
        readonly tiers: [{
            readonly contextWindow: 200000;
            readonly inputPrice: 1.25;
            readonly outputPrice: 10;
            readonly cacheReadsPrice: 0.31;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 2.5;
            readonly outputPrice: 15;
            readonly cacheReadsPrice: 0.625;
        }];
    };
    readonly "gemini-2.0-flash-001": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.4;
        readonly cacheReadsPrice: 0.025;
        readonly cacheWritesPrice: 1;
    };
    readonly "gemini-2.0-flash-lite-preview-02-05": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.0-pro-exp-02-05": {
        readonly maxTokens: 8192;
        readonly contextWindow: 2097152;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.0-flash-thinking-exp-01-21": {
        readonly maxTokens: 65536;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.0-flash-thinking-exp-1219": {
        readonly maxTokens: 8192;
        readonly contextWindow: 32767;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.0-flash-exp": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-1.5-flash-002": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
        readonly cacheReadsPrice: 0.0375;
        readonly cacheWritesPrice: 1;
        readonly tiers: [{
            readonly contextWindow: 128000;
            readonly inputPrice: 0.075;
            readonly outputPrice: 0.3;
            readonly cacheReadsPrice: 0.01875;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 0.15;
            readonly outputPrice: 0.6;
            readonly cacheReadsPrice: 0.0375;
        }];
    };
    readonly "gemini-1.5-flash-exp-0827": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-1.5-flash-8b-exp-0827": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-1.5-pro-002": {
        readonly maxTokens: 8192;
        readonly contextWindow: 2097152;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-1.5-pro-exp-0827": {
        readonly maxTokens: 8192;
        readonly contextWindow: 2097152;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-exp-1206": {
        readonly maxTokens: 8192;
        readonly contextWindow: 2097152;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.5-flash-lite-preview-06-17": {
        readonly maxTokens: 64000;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.4;
        readonly cacheReadsPrice: 0.025;
        readonly cacheWritesPrice: 1;
        readonly supportsReasoningBudget: true;
        readonly maxThinkingTokens: 24576;
    };
    readonly "imagen-2": {
        readonly maxTokens: 0;
        readonly contextWindow: 0;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.02;
        readonly outputPrice: 0;
        readonly modelType: "image-generation";
        readonly description: "Google Imagen 3 via Gemini API for image generation";
    };
};

declare const glamaDefaultModelId = "anthropic/claude-3-7-sonnet";
declare const glamaDefaultModelInfo: ModelInfo;
declare const GLAMA_DEFAULT_TEMPERATURE = 0;

type GroqModelId = "llama-3.1-8b-instant" | "llama-3.3-70b-versatile" | "meta-llama/llama-4-scout-17b-16e-instruct" | "meta-llama/llama-4-maverick-17b-128e-instruct" | "mistral-saba-24b" | "qwen-qwq-32b" | "qwen/qwen3-32b" | "deepseek-r1-distill-llama-70b" | "moonshotai/kimi-k2-instruct" | "openai/gpt-oss-120b" | "openai/gpt-oss-20b";
declare const groqDefaultModelId: GroqModelId;
declare const groqModels: {
    readonly "llama-3.1-8b-instant": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.05;
        readonly outputPrice: 0.08;
        readonly description: "Meta Llama 3.1 8B Instant model, 128K context.";
    };
    readonly "llama-3.3-70b-versatile": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.59;
        readonly outputPrice: 0.79;
        readonly description: "Meta Llama 3.3 70B Versatile model, 128K context.";
    };
    readonly "meta-llama/llama-4-scout-17b-16e-instruct": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.11;
        readonly outputPrice: 0.34;
        readonly description: "Meta Llama 4 Scout 17B Instruct model, 128K context.";
    };
    readonly "meta-llama/llama-4-maverick-17b-128e-instruct": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.2;
        readonly outputPrice: 0.6;
        readonly description: "Meta Llama 4 Maverick 17B Instruct model, 128K context.";
    };
    readonly "mistral-saba-24b": {
        readonly maxTokens: 8192;
        readonly contextWindow: 32768;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.79;
        readonly outputPrice: 0.79;
        readonly description: "Mistral Saba 24B model, 32K context.";
    };
    readonly "qwen-qwq-32b": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.29;
        readonly outputPrice: 0.39;
        readonly description: "Alibaba Qwen QwQ 32B model, 128K context.";
    };
    readonly "qwen/qwen3-32b": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.29;
        readonly outputPrice: 0.59;
        readonly description: "Alibaba Qwen 3 32B model, 128K context.";
    };
    readonly "deepseek-r1-distill-llama-70b": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.75;
        readonly outputPrice: 0.99;
        readonly description: "DeepSeek R1 Distill Llama 70B model, 128K context.";
    };
    readonly "moonshotai/kimi-k2-instruct": {
        readonly maxTokens: 16384;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 1;
        readonly outputPrice: 3;
        readonly description: "Moonshot AI Kimi K2 Instruct 1T model, 128K context.";
    };
    readonly "openai/gpt-oss-120b": {
        readonly maxTokens: 32766;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.75;
        readonly description: "GPT-OSS 120B is OpenAI's flagship open source model, built on a Mixture-of-Experts (MoE) architecture with 20 billion parameters and 128 experts.";
    };
    readonly "openai/gpt-oss-20b": {
        readonly maxTokens: 32768;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.5;
        readonly description: "GPT-OSS 20B is OpenAI's flagship open source model, built on a Mixture-of-Experts (MoE) architecture with 20 billion parameters and 32 experts.";
    };
};

/**
 * HuggingFace provider constants
 */
declare const HUGGINGFACE_DEFAULT_MAX_TOKENS = 2048;
declare const HUGGINGFACE_MAX_TOKENS_FALLBACK = 8192;
declare const HUGGINGFACE_DEFAULT_CONTEXT_WINDOW = 128000;
declare const HUGGINGFACE_SLIDER_STEP = 256;
declare const HUGGINGFACE_SLIDER_MIN = 1;
declare const HUGGINGFACE_TEMPERATURE_MAX_VALUE = 2;
declare const HUGGINGFACE_API_URL = "https://router.huggingface.co/v1/models?collection=roocode";
declare const HUGGINGFACE_CACHE_DURATION: number;

type IOIntelligenceModelId = "deepseek-ai/DeepSeek-R1-0528" | "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8" | "Intel/Qwen3-Coder-480B-A35B-Instruct-int4-mixed-ar" | "openai/gpt-oss-120b";
declare const ioIntelligenceDefaultModelId: IOIntelligenceModelId;
declare const ioIntelligenceDefaultBaseUrl = "https://api.intelligence.io.solutions/api/v1";
declare const IO_INTELLIGENCE_CACHE_DURATION: number;
declare const ioIntelligenceModels: {
    readonly "deepseek-ai/DeepSeek-R1-0528": {
        readonly maxTokens: 8192;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly description: "DeepSeek R1 reasoning model";
    };
    readonly "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8": {
        readonly maxTokens: 8192;
        readonly contextWindow: 430000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly description: "Llama 4 Maverick 17B model";
    };
    readonly "Intel/Qwen3-Coder-480B-A35B-Instruct-int4-mixed-ar": {
        readonly maxTokens: 8192;
        readonly contextWindow: 106000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly description: "Qwen3 Coder 480B specialized for coding";
    };
    readonly "openai/gpt-oss-120b": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly description: "OpenAI GPT-OSS 120B model";
    };
};

declare const litellmDefaultModelId = "claude-3-7-sonnet-20250219";
declare const litellmDefaultModelInfo: ModelInfo;
declare const LITELLM_COMPUTER_USE_MODELS: Set<string>;

declare const LMSTUDIO_DEFAULT_TEMPERATURE = 0;
declare const lMStudioDefaultModelId = "mistralai/devstral-small-2505";
declare const lMStudioDefaultModelInfo: ModelInfo;

type MistralModelId = keyof typeof mistralModels;
declare const mistralDefaultModelId: MistralModelId;
declare const mistralModels: {
    readonly "magistral-medium-latest": {
        readonly maxTokens: 41000;
        readonly contextWindow: 41000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2;
        readonly outputPrice: 5;
    };
    readonly "devstral-medium-latest": {
        readonly maxTokens: 131000;
        readonly contextWindow: 131000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.4;
        readonly outputPrice: 2;
    };
    readonly "mistral-medium-latest": {
        readonly maxTokens: 131000;
        readonly contextWindow: 131000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.4;
        readonly outputPrice: 2;
    };
    readonly "codestral-latest": {
        readonly maxTokens: 256000;
        readonly contextWindow: 256000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.3;
        readonly outputPrice: 0.9;
    };
    readonly "mistral-large-latest": {
        readonly maxTokens: 131000;
        readonly contextWindow: 131000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2;
        readonly outputPrice: 6;
    };
    readonly "ministral-8b-latest": {
        readonly maxTokens: 131000;
        readonly contextWindow: 131000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.1;
    };
    readonly "ministral-3b-latest": {
        readonly maxTokens: 131000;
        readonly contextWindow: 131000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.04;
        readonly outputPrice: 0.04;
    };
    readonly "mistral-small-latest": {
        readonly maxTokens: 32000;
        readonly contextWindow: 32000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.2;
        readonly outputPrice: 0.6;
    };
    readonly "pixtral-large-latest": {
        readonly maxTokens: 131000;
        readonly contextWindow: 131000;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2;
        readonly outputPrice: 6;
    };
};
declare const MISTRAL_DEFAULT_TEMPERATURE = 0;

type MoonshotModelId = keyof typeof moonshotModels;
declare const moonshotDefaultModelId: MoonshotModelId;
declare const moonshotModels: {
    readonly "kimi-k2-0711-preview": {
        readonly maxTokens: 32000;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.6;
        readonly outputPrice: 2.5;
        readonly cacheWritesPrice: 0;
        readonly cacheReadsPrice: 0.15;
        readonly description: "Kimi K2 is a state-of-the-art mixture-of-experts (MoE) language model with 32 billion activated parameters and 1 trillion total parameters.";
    };
};
declare const MOONSHOT_DEFAULT_TEMPERATURE = 0.6;

declare const ollamaDefaultModelId = "devstral:24b";
declare const ollamaDefaultModelInfo: ModelInfo;

type OpenAiNativeModelId = keyof typeof openAiNativeModels;
declare const openAiNativeDefaultModelId: OpenAiNativeModelId;
declare const openAiNativeModels: {
    readonly "gpt-5-2025-08-07": {
        readonly maxTokens: 128000;
        readonly contextWindow: 400000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: true;
        readonly reasoningEffort: "medium";
        readonly inputPrice: 1.25;
        readonly outputPrice: 10;
        readonly cacheReadsPrice: 0.13;
        readonly description: "GPT-5: The best model for coding and agentic tasks across domains";
        readonly supportsVerbosity: true;
    };
    readonly "gpt-5-mini-2025-08-07": {
        readonly maxTokens: 128000;
        readonly contextWindow: 400000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: true;
        readonly reasoningEffort: "medium";
        readonly inputPrice: 0.25;
        readonly outputPrice: 2;
        readonly cacheReadsPrice: 0.03;
        readonly description: "GPT-5 Mini: A faster, more cost-efficient version of GPT-5 for well-defined tasks";
        readonly supportsVerbosity: true;
    };
    readonly "gpt-5-nano-2025-08-07": {
        readonly maxTokens: 128000;
        readonly contextWindow: 400000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly supportsReasoningEffort: true;
        readonly reasoningEffort: "medium";
        readonly inputPrice: 0.05;
        readonly outputPrice: 0.4;
        readonly cacheReadsPrice: 0.01;
        readonly description: "GPT-5 Nano: Fastest, most cost-efficient version of GPT-5";
        readonly supportsVerbosity: true;
    };
    readonly "gpt-4.1": {
        readonly maxTokens: 32768;
        readonly contextWindow: 1047576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2;
        readonly outputPrice: 8;
        readonly cacheReadsPrice: 0.5;
    };
    readonly "gpt-4.1-mini": {
        readonly maxTokens: 32768;
        readonly contextWindow: 1047576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.4;
        readonly outputPrice: 1.6;
        readonly cacheReadsPrice: 0.1;
    };
    readonly "gpt-4.1-nano": {
        readonly maxTokens: 32768;
        readonly contextWindow: 1047576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.4;
        readonly cacheReadsPrice: 0.025;
    };
    readonly o3: {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2;
        readonly outputPrice: 8;
        readonly cacheReadsPrice: 0.5;
        readonly supportsReasoningEffort: true;
        readonly reasoningEffort: "medium";
    };
    readonly "o3-high": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2;
        readonly outputPrice: 8;
        readonly cacheReadsPrice: 0.5;
        readonly reasoningEffort: "high";
    };
    readonly "o3-low": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2;
        readonly outputPrice: 8;
        readonly cacheReadsPrice: 0.5;
        readonly reasoningEffort: "low";
    };
    readonly "o4-mini": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.275;
        readonly supportsReasoningEffort: true;
        readonly reasoningEffort: "medium";
    };
    readonly "o4-mini-high": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.275;
        readonly reasoningEffort: "high";
    };
    readonly "o4-mini-low": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.275;
        readonly reasoningEffort: "low";
    };
    readonly "o3-mini": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.55;
        readonly supportsReasoningEffort: true;
        readonly reasoningEffort: "medium";
    };
    readonly "o3-mini-high": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.55;
        readonly reasoningEffort: "high";
    };
    readonly "o3-mini-low": {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.55;
        readonly reasoningEffort: "low";
    };
    readonly o1: {
        readonly maxTokens: 100000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 60;
        readonly cacheReadsPrice: 7.5;
    };
    readonly "o1-preview": {
        readonly maxTokens: 32768;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 60;
        readonly cacheReadsPrice: 7.5;
    };
    readonly "o1-mini": {
        readonly maxTokens: 65536;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1.1;
        readonly outputPrice: 4.4;
        readonly cacheReadsPrice: 0.55;
    };
    readonly "gpt-4.5-preview": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 75;
        readonly outputPrice: 150;
        readonly cacheReadsPrice: 37.5;
    };
    readonly "gpt-4o": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 10;
        readonly cacheReadsPrice: 1.25;
    };
    readonly "gpt-4o-mini": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
        readonly cacheReadsPrice: 0.075;
    };
    readonly "codex-mini-latest": {
        readonly maxTokens: 16384;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 1.5;
        readonly outputPrice: 6;
        readonly cacheReadsPrice: 0;
        readonly description: "Codex Mini: Cloud-based software engineering agent powered by codex-1, a version of o3 optimized for coding tasks. Trained with reinforcement learning to generate human-style code, adhere to instructions, and iteratively run tests.";
    };
};
declare const openAiModelInfoSaneDefaults: ModelInfo;
declare const azureOpenAiDefaultApiVersion = "2024-08-01-preview";
declare const OPENAI_NATIVE_DEFAULT_TEMPERATURE = 0;
declare const GPT5_DEFAULT_TEMPERATURE = 1;
declare const OPENAI_AZURE_AI_INFERENCE_PATH = "/models/chat/completions";

declare const openRouterDefaultModelId = "anthropic/claude-sonnet-4";
declare const openRouterDefaultModelInfo: ModelInfo;
declare const OPENROUTER_DEFAULT_PROVIDER_NAME = "[default]";
declare const OPEN_ROUTER_PROMPT_CACHING_MODELS: Set<string>;
declare const OPEN_ROUTER_COMPUTER_USE_MODELS: Set<string>;
declare const OPEN_ROUTER_REQUIRED_REASONING_BUDGET_MODELS: Set<string>;
declare const OPEN_ROUTER_REASONING_BUDGET_MODELS: Set<string>;

declare const requestyDefaultModelId = "coding/claude-4-sonnet";
declare const requestyDefaultModelInfo: ModelInfo;

type SambaNovaModelId = "Meta-Llama-3.1-8B-Instruct" | "Meta-Llama-3.3-70B-Instruct" | "DeepSeek-R1" | "DeepSeek-V3-0324" | "DeepSeek-R1-Distill-Llama-70B" | "Llama-4-Maverick-17B-128E-Instruct" | "Llama-3.3-Swallow-70B-Instruct-v0.4" | "Qwen3-32B";
declare const sambaNovaDefaultModelId: SambaNovaModelId;
declare const sambaNovaModels: {
    readonly "Meta-Llama-3.1-8B-Instruct": {
        readonly maxTokens: 8192;
        readonly contextWindow: 16384;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.2;
        readonly description: "Meta Llama 3.1 8B Instruct model with 16K context window.";
    };
    readonly "Meta-Llama-3.3-70B-Instruct": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.6;
        readonly outputPrice: 1.2;
        readonly description: "Meta Llama 3.3 70B Instruct model with 128K context window.";
    };
    readonly "DeepSeek-R1": {
        readonly maxTokens: 8192;
        readonly contextWindow: 32768;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly supportsReasoningBudget: true;
        readonly inputPrice: 5;
        readonly outputPrice: 7;
        readonly description: "DeepSeek R1 reasoning model with 32K context window.";
    };
    readonly "DeepSeek-V3-0324": {
        readonly maxTokens: 8192;
        readonly contextWindow: 32768;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 3;
        readonly outputPrice: 4.5;
        readonly description: "DeepSeek V3 model with 32K context window.";
    };
    readonly "DeepSeek-R1-Distill-Llama-70B": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.7;
        readonly outputPrice: 1.4;
        readonly description: "DeepSeek R1 distilled Llama 70B model with 128K context window.";
    };
    readonly "Llama-4-Maverick-17B-128E-Instruct": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.63;
        readonly outputPrice: 1.8;
        readonly description: "Meta Llama 4 Maverick 17B 128E Instruct model with 128K context window.";
    };
    readonly "Llama-3.3-Swallow-70B-Instruct-v0.4": {
        readonly maxTokens: 8192;
        readonly contextWindow: 16384;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.6;
        readonly outputPrice: 1.2;
        readonly description: "Tokyotech Llama 3.3 Swallow 70B Instruct v0.4 model with 16K context window.";
    };
    readonly "Qwen3-32B": {
        readonly maxTokens: 8192;
        readonly contextWindow: 8192;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.4;
        readonly outputPrice: 0.8;
        readonly description: "Alibaba Qwen 3 32B model with 8K context window.";
    };
};

declare const unboundDefaultModelId = "anthropic/claude-3-7-sonnet-20250219";
declare const unboundDefaultModelInfo: ModelInfo;

type VertexModelId = keyof typeof vertexModels;
declare const vertexDefaultModelId: VertexModelId;
declare const vertexModels: {
    readonly "gemini-2.5-flash-preview-05-20:thinking": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 3.5;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
    };
    readonly "gemini-2.5-flash-preview-05-20": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
    };
    readonly "gemini-2.5-flash": {
        readonly maxTokens: 64000;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.3;
        readonly outputPrice: 2.5;
        readonly cacheReadsPrice: 0.075;
        readonly cacheWritesPrice: 1;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
    };
    readonly "gemini-2.5-flash-preview-04-17:thinking": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 3.5;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
    };
    readonly "gemini-2.5-flash-preview-04-17": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
    };
    readonly "gemini-2.5-pro-preview-03-25": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
    };
    readonly "gemini-2.5-pro-preview-05-06": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
    };
    readonly "gemini-2.5-pro-preview-06-05": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
        readonly maxThinkingTokens: 32768;
        readonly supportsReasoningBudget: true;
    };
    readonly "gemini-2.5-pro": {
        readonly maxTokens: 64000;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 2.5;
        readonly outputPrice: 15;
        readonly maxThinkingTokens: 32768;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
        readonly tiers: [{
            readonly contextWindow: 200000;
            readonly inputPrice: 1.25;
            readonly outputPrice: 10;
            readonly cacheReadsPrice: 0.31;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 2.5;
            readonly outputPrice: 15;
            readonly cacheReadsPrice: 0.625;
        }];
    };
    readonly "gemini-2.5-pro-exp-03-25": {
        readonly maxTokens: 65535;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.0-pro-exp-02-05": {
        readonly maxTokens: 8192;
        readonly contextWindow: 2097152;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-2.0-flash-001": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
    };
    readonly "gemini-2.0-flash-lite-001": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.075;
        readonly outputPrice: 0.3;
    };
    readonly "gemini-2.0-flash-thinking-exp-01-21": {
        readonly maxTokens: 8192;
        readonly contextWindow: 32768;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
    };
    readonly "gemini-1.5-flash-002": {
        readonly maxTokens: 8192;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.075;
        readonly outputPrice: 0.3;
    };
    readonly "gemini-1.5-pro-002": {
        readonly maxTokens: 8192;
        readonly contextWindow: 2097152;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 1.25;
        readonly outputPrice: 5;
    };
    readonly "claude-sonnet-4@20250514": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly supportsReasoningBudget: true;
    };
    readonly "claude-opus-4-1@20250805": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
        readonly supportsReasoningBudget: true;
    };
    readonly "claude-opus-4@20250514": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
    };
    readonly "claude-3-7-sonnet@20250219:thinking": {
        readonly maxTokens: 64000;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
        readonly supportsReasoningBudget: true;
        readonly requiredReasoningBudget: true;
    };
    readonly "claude-3-7-sonnet@20250219": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-sonnet-v2@20241022": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsComputerUse: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-sonnet@20240620": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 3.75;
        readonly cacheReadsPrice: 0.3;
    };
    readonly "claude-3-5-haiku@20241022": {
        readonly maxTokens: 8192;
        readonly contextWindow: 200000;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 1;
        readonly outputPrice: 5;
        readonly cacheWritesPrice: 1.25;
        readonly cacheReadsPrice: 0.1;
    };
    readonly "claude-3-opus@20240229": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 15;
        readonly outputPrice: 75;
        readonly cacheWritesPrice: 18.75;
        readonly cacheReadsPrice: 1.5;
    };
    readonly "claude-3-haiku@20240307": {
        readonly maxTokens: 4096;
        readonly contextWindow: 200000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.25;
        readonly outputPrice: 1.25;
        readonly cacheWritesPrice: 0.3;
        readonly cacheReadsPrice: 0.03;
    };
    readonly "gemini-2.5-flash-lite-preview-06-17": {
        readonly maxTokens: 64000;
        readonly contextWindow: 1048576;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.4;
        readonly cacheReadsPrice: 0.025;
        readonly cacheWritesPrice: 1;
        readonly maxThinkingTokens: 24576;
        readonly supportsReasoningBudget: true;
    };
    readonly "llama-4-maverick-17b-128e-instruct-maas": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.35;
        readonly outputPrice: 1.15;
        readonly description: "Meta Llama 4 Maverick 17B Instruct model, 128K context.";
    };
};
declare const VERTEX_REGIONS: {
    value: string;
    label: string;
}[];

type VscodeLlmModelId = keyof typeof vscodeLlmModels;
declare const vscodeLlmDefaultModelId: VscodeLlmModelId;
declare const vscodeLlmModels: {
    readonly "gpt-3.5-turbo": {
        readonly contextWindow: 12114;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gpt-3.5-turbo";
        readonly version: "gpt-3.5-turbo-0613";
        readonly name: "GPT 3.5 Turbo";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 12114;
    };
    readonly "gpt-4o-mini": {
        readonly contextWindow: 12115;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gpt-4o-mini";
        readonly version: "gpt-4o-mini-2024-07-18";
        readonly name: "GPT-4o mini";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 12115;
    };
    readonly "gpt-4": {
        readonly contextWindow: 28501;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gpt-4";
        readonly version: "gpt-4-0613";
        readonly name: "GPT 4";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 28501;
    };
    readonly "gpt-4-0125-preview": {
        readonly contextWindow: 63826;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gpt-4-turbo";
        readonly version: "gpt-4-0125-preview";
        readonly name: "GPT 4 Turbo";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 63826;
    };
    readonly "gpt-4o": {
        readonly contextWindow: 63827;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gpt-4o";
        readonly version: "gpt-4o-2024-11-20";
        readonly name: "GPT-4o";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 63827;
    };
    readonly o1: {
        readonly contextWindow: 19827;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "o1-ga";
        readonly version: "o1-2024-12-17";
        readonly name: "o1 (Preview)";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 19827;
    };
    readonly "o3-mini": {
        readonly contextWindow: 63827;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "o3-mini";
        readonly version: "o3-mini-2025-01-31";
        readonly name: "o3-mini";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 63827;
    };
    readonly "claude-3.5-sonnet": {
        readonly contextWindow: 81638;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "claude-3.5-sonnet";
        readonly version: "claude-3.5-sonnet";
        readonly name: "Claude 3.5 Sonnet";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 81638;
    };
    readonly "gemini-2.0-flash-001": {
        readonly contextWindow: 127827;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gemini-2.0-flash";
        readonly version: "gemini-2.0-flash-001";
        readonly name: "Gemini 2.0 Flash";
        readonly supportsToolCalling: false;
        readonly maxInputTokens: 127827;
    };
    readonly "gemini-2.5-pro": {
        readonly contextWindow: 63830;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gemini-2.5-pro";
        readonly version: "gemini-2.5-pro-preview-03-25";
        readonly name: "Gemini 2.5 Pro (Preview)";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 63830;
    };
    readonly "o4-mini": {
        readonly contextWindow: 111446;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "o4-mini";
        readonly version: "o4-mini-2025-04-16";
        readonly name: "o4-mini (Preview)";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 111446;
    };
    readonly "gpt-4.1": {
        readonly contextWindow: 111446;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0;
        readonly outputPrice: 0;
        readonly family: "gpt-4.1";
        readonly version: "gpt-4.1-2025-04-14";
        readonly name: "GPT-4.1 (Preview)";
        readonly supportsToolCalling: true;
        readonly maxInputTokens: 111446;
    };
};

type XAIModelId = keyof typeof xaiModels;
declare const xaiDefaultModelId: XAIModelId;
declare const xaiModels: {
    readonly "grok-4": {
        readonly maxTokens: 8192;
        readonly contextWindow: 256000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 0.75;
        readonly cacheReadsPrice: 0.75;
        readonly description: "xAI's Grok-4 model with 256K context window";
    };
    readonly "grok-3": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 3;
        readonly outputPrice: 15;
        readonly cacheWritesPrice: 0.75;
        readonly cacheReadsPrice: 0.75;
        readonly description: "xAI's Grok-3 model with 128K context window";
    };
    readonly "grok-3-fast": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 5;
        readonly outputPrice: 25;
        readonly cacheWritesPrice: 1.25;
        readonly cacheReadsPrice: 1.25;
        readonly description: "xAI's Grok-3 fast model with 128K context window";
    };
    readonly "grok-3-mini": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.3;
        readonly outputPrice: 0.5;
        readonly cacheWritesPrice: 0.07;
        readonly cacheReadsPrice: 0.07;
        readonly description: "xAI's Grok-3 mini model with 128K context window";
        readonly supportsReasoningEffort: true;
    };
    readonly "grok-3-mini-fast": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.6;
        readonly outputPrice: 4;
        readonly cacheWritesPrice: 0.15;
        readonly cacheReadsPrice: 0.15;
        readonly description: "xAI's Grok-3 mini fast model with 128K context window";
        readonly supportsReasoningEffort: true;
    };
    readonly "grok-2-1212": {
        readonly maxTokens: 8192;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2;
        readonly outputPrice: 10;
        readonly description: "xAI's Grok-2 model (version 1212) with 128K context window";
    };
    readonly "grok-2-vision-1212": {
        readonly maxTokens: 8192;
        readonly contextWindow: 32768;
        readonly supportsImages: true;
        readonly supportsPromptCache: false;
        readonly inputPrice: 2;
        readonly outputPrice: 10;
        readonly description: "xAI's Grok-2 Vision model (version 1212) with image support and 32K context window";
    };
};

declare const doubaoDefaultModelId = "doubao-seed-1-6-250615";
declare const doubaoModels: {
    readonly "doubao-seed-1-6-250615": {
        readonly maxTokens: 32768;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.0001;
        readonly outputPrice: 0.0004;
        readonly cacheWritesPrice: 0.0001;
        readonly cacheReadsPrice: 0.00002;
        readonly description: "Doubao Seed 1.6 is a powerful model designed for high-performance tasks with extensive context handling.";
    };
    readonly "doubao-seed-1-6-thinking-250715": {
        readonly maxTokens: 32768;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.0002;
        readonly outputPrice: 0.0008;
        readonly cacheWritesPrice: 0.0002;
        readonly cacheReadsPrice: 0.00004;
        readonly description: "Doubao Seed 1.6 Thinking is optimized for reasoning tasks, providing enhanced performance in complex problem-solving scenarios.";
    };
    readonly "doubao-seed-1-6-flash-250715": {
        readonly maxTokens: 32768;
        readonly contextWindow: 128000;
        readonly supportsImages: true;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.00015;
        readonly outputPrice: 0.0006;
        readonly cacheWritesPrice: 0.00015;
        readonly cacheReadsPrice: 0.00003;
        readonly description: "Doubao Seed 1.6 Flash is tailored for speed and efficiency, making it ideal for applications requiring rapid responses.";
    };
};
declare const doubaoDefaultModelInfo: ModelInfo;
declare const DOUBAO_API_BASE_URL = "https://ark.cn-beijing.volces.com/api/v3";
declare const DOUBAO_API_CHAT_PATH = "/chat/completions";

type InternationalZAiModelId = keyof typeof internationalZAiModels;
declare const internationalZAiDefaultModelId: InternationalZAiModelId;
declare const internationalZAiModels: {
    readonly "glm-4.5": {
        readonly maxTokens: 98304;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.6;
        readonly outputPrice: 2.2;
        readonly cacheWritesPrice: 0;
        readonly cacheReadsPrice: 0.11;
        readonly description: "GLM-4.5 is Zhipu's latest featured model. Its comprehensive capabilities in reasoning, coding, and agent reach the state-of-the-art (SOTA) level among open-source models, with a context length of up to 128k.";
    };
    readonly "glm-4.5-air": {
        readonly maxTokens: 98304;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.2;
        readonly outputPrice: 1.1;
        readonly cacheWritesPrice: 0;
        readonly cacheReadsPrice: 0.03;
        readonly description: "GLM-4.5-Air is the lightweight version of GLM-4.5. It balances performance and cost-effectiveness, and can flexibly switch to hybrid thinking models.";
    };
};
type MainlandZAiModelId = keyof typeof mainlandZAiModels;
declare const mainlandZAiDefaultModelId: MainlandZAiModelId;
declare const mainlandZAiModels: {
    readonly "glm-4.5": {
        readonly maxTokens: 98304;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.29;
        readonly outputPrice: 1.14;
        readonly cacheWritesPrice: 0;
        readonly cacheReadsPrice: 0.057;
        readonly description: "GLM-4.5 is Zhipu's latest featured model. Its comprehensive capabilities in reasoning, coding, and agent reach the state-of-the-art (SOTA) level among open-source models, with a context length of up to 128k.";
        readonly tiers: [{
            readonly contextWindow: 32000;
            readonly inputPrice: 0.21;
            readonly outputPrice: 1;
            readonly cacheReadsPrice: 0.043;
        }, {
            readonly contextWindow: 128000;
            readonly inputPrice: 0.29;
            readonly outputPrice: 1.14;
            readonly cacheReadsPrice: 0.057;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 0.29;
            readonly outputPrice: 1.14;
            readonly cacheReadsPrice: 0.057;
        }];
    };
    readonly "glm-4.5-air": {
        readonly maxTokens: 98304;
        readonly contextWindow: 131072;
        readonly supportsImages: false;
        readonly supportsPromptCache: true;
        readonly inputPrice: 0.1;
        readonly outputPrice: 0.6;
        readonly cacheWritesPrice: 0;
        readonly cacheReadsPrice: 0.02;
        readonly description: "GLM-4.5-Air is the lightweight version of GLM-4.5. It balances performance and cost-effectiveness, and can flexibly switch to hybrid thinking models.";
        readonly tiers: [{
            readonly contextWindow: 32000;
            readonly inputPrice: 0.07;
            readonly outputPrice: 0.4;
            readonly cacheReadsPrice: 0.014;
        }, {
            readonly contextWindow: 128000;
            readonly inputPrice: 0.1;
            readonly outputPrice: 0.6;
            readonly cacheReadsPrice: 0.02;
        }, {
            readonly contextWindow: number;
            readonly inputPrice: 0.1;
            readonly outputPrice: 0.6;
            readonly cacheReadsPrice: 0.02;
        }];
    };
};
declare const ZAI_DEFAULT_TEMPERATURE = 0;

type FireworksModelId = "accounts/fireworks/models/kimi-k2-instruct" | "accounts/fireworks/models/qwen3-235b-a22b-instruct-2507" | "accounts/fireworks/models/qwen3-coder-480b-a35b-instruct" | "accounts/fireworks/models/deepseek-r1-0528" | "accounts/fireworks/models/deepseek-v3" | "accounts/fireworks/models/glm-4p5" | "accounts/fireworks/models/glm-4p5-air" | "accounts/fireworks/models/gpt-oss-20b" | "accounts/fireworks/models/gpt-oss-120b";
declare const fireworksDefaultModelId: FireworksModelId;
declare const fireworksModels: {
    readonly "accounts/fireworks/models/kimi-k2-instruct": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.6;
        readonly outputPrice: 2.5;
        readonly description: "Kimi K2 is a state-of-the-art mixture-of-experts (MoE) language model with 32 billion activated parameters and 1 trillion total parameters. Trained with the Muon optimizer, Kimi K2 achieves exceptional performance across frontier knowledge, reasoning, and coding tasks while being meticulously optimized for agentic capabilities.";
    };
    readonly "accounts/fireworks/models/qwen3-235b-a22b-instruct-2507": {
        readonly maxTokens: 32768;
        readonly contextWindow: 256000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.22;
        readonly outputPrice: 0.88;
        readonly description: "Latest Qwen3 thinking model, competitive against the best closed source models in Jul 2025.";
    };
    readonly "accounts/fireworks/models/qwen3-coder-480b-a35b-instruct": {
        readonly maxTokens: 32768;
        readonly contextWindow: 256000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.45;
        readonly outputPrice: 1.8;
        readonly description: "Qwen3's most agentic code model to date.";
    };
    readonly "accounts/fireworks/models/deepseek-r1-0528": {
        readonly maxTokens: 20480;
        readonly contextWindow: 160000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 3;
        readonly outputPrice: 8;
        readonly description: "05/28 updated checkpoint of Deepseek R1. Its overall performance is now approaching that of leading models, such as O3 and Gemini 2.5 Pro. Compared to the previous version, the upgraded model shows significant improvements in handling complex reasoning tasks, and this version also offers a reduced hallucination rate, enhanced support for function calling, and better experience for vibe coding. Note that fine-tuning for this model is only available through contacting fireworks at https://fireworks.ai/company/contact-us.";
    };
    readonly "accounts/fireworks/models/deepseek-v3": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.9;
        readonly outputPrice: 0.9;
        readonly description: "A strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token from Deepseek. Note that fine-tuning for this model is only available through contacting fireworks at https://fireworks.ai/company/contact-us.";
    };
    readonly "accounts/fireworks/models/glm-4p5": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.55;
        readonly outputPrice: 2.19;
        readonly description: "Z.ai GLM-4.5 with 355B total parameters and 32B active parameters. Features unified reasoning, coding, and intelligent agent capabilities.";
    };
    readonly "accounts/fireworks/models/glm-4p5-air": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.55;
        readonly outputPrice: 2.19;
        readonly description: "Z.ai GLM-4.5-Air with 106B total parameters and 12B active parameters. Features unified reasoning, coding, and intelligent agent capabilities.";
    };
    readonly "accounts/fireworks/models/gpt-oss-20b": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.07;
        readonly outputPrice: 0.3;
        readonly description: "OpenAI gpt-oss-20b: Compact model for local/edge deployments. Optimized for low-latency and resource-constrained environments with chain-of-thought output, adjustable reasoning, and agentic workflows.";
    };
    readonly "accounts/fireworks/models/gpt-oss-120b": {
        readonly maxTokens: 16384;
        readonly contextWindow: 128000;
        readonly supportsImages: false;
        readonly supportsPromptCache: false;
        readonly inputPrice: 0.15;
        readonly outputPrice: 0.6;
        readonly description: "OpenAI gpt-oss-120b: Production-grade, general-purpose model that fits on a single H100 GPU. Features complex reasoning, configurable effort, full chain-of-thought transparency, and supports function calling, tool use, and structured outputs.";
    };
};

export { type A2AAgentCard, ANTHROPIC_DEFAULT_MAX_TOKENS, ANTHROPIC_STYLE_PROVIDERS, AWS_INFERENCE_PROFILE_MAPPING, type Ack, type AgentApiConfig, type AgentConfig, type AgentDiscoveryQuery, type AgentDiscoveryResult, type AgentEndpoint, type AgentExportData, type AgentInstance, type AgentListOptions, type AgentPermission, type AgentRequest, type AgentResponse, type AgentTemplateData, type AgentTemplateSource, type AgentTodo, type AgentToolConfig, type AnthropicModelId, type AssertEqual, BEDROCK_DEFAULT_CONTEXT, BEDROCK_DEFAULT_TEMPERATURE, BEDROCK_MAX_TOKENS, BEDROCK_REGIONS, type BedrockModelId, type BlockingAsk, CLAUDE_CODE_DEFAULT_MAX_OUTPUT_TOKENS, CODEBASE_INDEX_DEFAULTS, type CerebrasModelId, type ChutesModelId, type ClaudeCodeModelId, type ClineAsk, type ClineMessage, type ClineSay, type CloudOrganization, type CloudOrganizationMembership, type CloudUserInfo, type CodeActionId, type CodeActionName, type CodebaseIndexConfig, type CodebaseIndexModels, type CodebaseIndexProvider, type CommandExecutionStatus, type CommandId, type ContextCondense, type CustomModePrompts, type CustomModesSettings, type CustomSupportPrompts, DEEP_SEEK_DEFAULT_TEMPERATURE, DEFAULT_CONSECUTIVE_MISTAKE_LIMIT, DEFAULT_MODES, DEFAULT_TERMINAL_OUTPUT_CHARACTER_LIMIT, DEFAULT_USAGE_COLLECTION_TIMEOUT_MS, DEFAULT_WRITE_DELAY_MS, DOUBAO_API_BASE_URL, DOUBAO_API_CHAT_PATH, type DeepSeekModelId, EVALS_SETTINGS, EVALS_TIMEOUT, type Equals, type ExperimentId, type Experiments, type FireworksModelId, type FollowUpData, type FollowUpDataType, GLAMA_DEFAULT_TEMPERATURE, GLOBAL_SETTINGS_KEYS, GLOBAL_STATE_KEYS, GPT5_DEFAULT_TEMPERATURE, type GeminiModelId, type GitProperties, type GlobalSettings, type GlobalState, type GroqModelId, type GroupEntry, type GroupOptions, HUGGINGFACE_API_URL, HUGGINGFACE_CACHE_DURATION, HUGGINGFACE_DEFAULT_CONTEXT_WINDOW, HUGGINGFACE_DEFAULT_MAX_TOKENS, HUGGINGFACE_MAX_TOKENS_FALLBACK, HUGGINGFACE_SLIDER_MIN, HUGGINGFACE_SLIDER_STEP, HUGGINGFACE_TEMPERATURE_MAX_VALUE, type HistoryItem, type IOIntelligenceModelId, IO_INTELLIGENCE_CACHE_DURATION, type InstallMarketplaceItemOptions, type InternationalZAiModelId, type IpcClientEvents, type IpcMessage, IpcMessageType, IpcOrigin, type IpcServerEvents, type Keys, LITELLM_COMPUTER_USE_MODELS, LMSTUDIO_DEFAULT_TEMPERATURE, type Language, MISTRAL_DEFAULT_TEMPERATURE, MODEL_ID_KEYS, MOONSHOT_DEFAULT_TEMPERATURE, type MainlandZAiModelId, type MarketplaceItem, type MarketplaceItemType, type McpExecutionStatus, type McpInstallationMethod, type McpMarketplaceItem, type McpParameter, type MistralModelId, type ModeConfig, type ModeMarketplaceItem, type ModelInfo, type ModelParameter, type MoonshotModelId, OPENAI_AZURE_AI_INFERENCE_PATH, OPENAI_NATIVE_DEFAULT_TEMPERATURE, OPENROUTER_DEFAULT_PROVIDER_NAME, OPEN_ROUTER_COMPUTER_USE_MODELS, OPEN_ROUTER_PROMPT_CACHING_MODELS, OPEN_ROUTER_REASONING_BUDGET_MODELS, OPEN_ROUTER_REQUIRED_REASONING_BUDGET_MODELS, ORGANIZATION_ALLOW_ALL, ORGANIZATION_DEFAULT, type OpenAiNativeModelId, type OrganizationAllowList, type OrganizationCloudSettings, type OrganizationDefaultSettings, type OrganizationSettings, PROVIDER_SETTINGS_KEYS, type PromptComponent, type ProviderName, type ProviderSettings, type ProviderSettingsEntry, type ProviderSettingsWithId, type QueuedMessage, type ReasoningEffort, type ReasoningEffortWithMinimal, type ResourceQuota, type ResourceUsage, type RooCodeAPI, type RooCodeAPIEvents, RooCodeEventName, type RooCodeEvents, type RooCodeIpcServer, type RooCodeSettings, type RooCodeTelemetryEvent, SECRET_STATE_KEYS, type SambaNovaModelId, type SecretState, type ShareResponse, type ShareVisibility, type SuggestionItem, type TaskCommand, TaskCommandName, type TaskEvent, type TaskEvents, type TaskLike, type TaskProviderEvents, type TaskProviderLike, type TaskProviderState, type TelemetryClient, type TelemetryEvent, TelemetryEventName, type TelemetryEventSubscription, type TelemetryProperties, type TelemetryPropertiesProvider, type TelemetrySetting, type TerminalActionId, type TerminalActionName, type TerminalActionPromptType, type TodoItem, type TodoStatus, type TokenUsage, type ToolGroup, type ToolName, type ToolProgressStatus, type ToolUsage, type UnifiedAgentRegistry, VERTEX_REGIONS, type Values, type VerbosityLevel, type VertexModelId, type VscodeLlmModelId, type XAIModelId, ZAI_DEFAULT_TEMPERATURE, a2aAgentCardSchema, ackSchema, agentApiConfigSchema, agentConfigSchema, agentDiscoveryQuerySchema, agentDiscoveryResultSchema, agentEndpointSchema, agentExportDataSchema, agentInstanceSchema, agentListOptionsSchema, agentPermissionSchema, agentRequestSchema, agentResponseSchema, agentTemplateDataSchema, agentTemplateSourceSchema, agentTodoSchema, agentToolConfigSchema, anthropicDefaultModelId, anthropicModels, appPropertiesSchema, azureOpenAiDefaultApiVersion, bedrockDefaultModelId, bedrockDefaultPromptRouterModelId, bedrockModels, blockingAsks, cerebrasDefaultModelId, cerebrasModels, chutesDefaultModelId, chutesModels, claudeCodeDefaultModelId, claudeCodeModels, clineAskSchema, clineAsks, clineMessageSchema, clineSaySchema, clineSays, codeActionIds, codebaseIndexConfigSchema, codebaseIndexModelsSchema, codebaseIndexProviderSchema, commandExecutionStatusSchema, commandIds, contextCondenseSchema, convertModelNameForVertex, customModePromptsSchema, customModesSettingsSchema, customSupportPromptsSchema, deepSeekDefaultModelId, deepSeekModels, discriminatedProviderSettingsWithIdSchema, doubaoDefaultModelId, doubaoDefaultModelInfo, doubaoModels, experimentIds, experimentIdsSchema, experimentsSchema, extendedReasoningEffortsSchema, fireworksDefaultModelId, fireworksModels, followUpDataSchema, geminiDefaultModelId, geminiModels, getApiProtocol, getClaudeCodeModelId, getModelId, gitPropertiesSchema, glamaDefaultModelId, glamaDefaultModelInfo, globalSettingsSchema, groqDefaultModelId, groqModels, groupEntrySchema, groupOptionsSchema, historyItemSchema, installMarketplaceItemOptionsSchema, internationalZAiDefaultModelId, internationalZAiModels, ioIntelligenceDefaultBaseUrl, ioIntelligenceDefaultModelId, ioIntelligenceModels, ipcMessageSchema, isBlockingAsk, isGlobalStateKey, isLanguage, isModelParameter, isSecretStateKey, lMStudioDefaultModelId, lMStudioDefaultModelInfo, languages, languagesSchema, litellmDefaultModelId, litellmDefaultModelInfo, mainlandZAiDefaultModelId, mainlandZAiModels, marketplaceItemSchema, marketplaceItemTypeSchema, mcpExecutionStatusSchema, mcpInstallationMethodSchema, mcpMarketplaceItemSchema, mcpParameterSchema, mistralDefaultModelId, mistralModels, modeConfigSchema, modeMarketplaceItemSchema, modelInfoSchema, modelParameters, modelParametersSchema, moonshotDefaultModelId, moonshotModels, ollamaDefaultModelId, ollamaDefaultModelInfo, openAiModelInfoSaneDefaults, openAiNativeDefaultModelId, openAiNativeModels, openRouterDefaultModelId, openRouterDefaultModelInfo, organizationAllowListSchema, organizationCloudSettingsSchema, organizationDefaultSettingsSchema, organizationSettingsSchema, promptComponentSchema, providerNames, providerNamesSchema, providerSettingsEntrySchema, providerSettingsSchema, providerSettingsSchemaDiscriminated, providerSettingsWithIdSchema, reasoningEfforts, reasoningEffortsSchema, requestyDefaultModelId, requestyDefaultModelInfo, resourceQuotaSchema, resourceUsageSchema, rooCodeEventsSchema, rooCodeSettingsSchema, rooCodeTelemetryEventSchema, sambaNovaDefaultModelId, sambaNovaModels, shareResponseSchema, suggestionItemSchema, taskCommandSchema, taskEventSchema, taskPropertiesSchema, telemetryPropertiesSchema, telemetrySettings, telemetrySettingsSchema, terminalActionIds, todoItemSchema, todoStatusSchema, tokenUsageSchema, toolGroups, toolGroupsSchema, toolNames, toolNamesSchema, toolProgressStatusSchema, toolUsageSchema, unboundDefaultModelId, unboundDefaultModelInfo, unifiedAgentRegistrySchema, verbosityLevels, verbosityLevelsSchema, vertexDefaultModelId, vertexModels, vscodeLlmDefaultModelId, vscodeLlmModels, xaiDefaultModelId, xaiModels };
